  REAL8 L[3] = {0, 0, 0};
  REAL8 Lhat[3] = {0, 0, 0.0};
  cross_product(x->data, p->data, L); // Note that L = r x p is invariant under tortoise transform
  REAL8 L_mag = sqrt(inner_product(L, L));
  for (UINT4 jj = 0; jj < 3; jj++)
  {
    Lhat[jj] = L[jj] / L_mag;
  }

  REAL8 tempS1_p = inner_product(s1Vec->data, Lhat);
  REAL8 tempS2_p = inner_product(s2Vec->data, Lhat);
  REAL8 S1_perp[3] = {0, 0, 0};
  REAL8 S2_perp[3] = {0, 0, 0};
  REAL8 S_perp[3] = {0,0,0};
  for (UINT4 jj = 0; jj < 3; jj++)
  {
    S1_perp[jj] = s1Vec->data[jj] - tempS1_p * Lhat[jj];
    S2_perp[jj] = s2Vec->data[jj] - tempS2_p * Lhat[jj];
    S_perp[jj] = S1_perp[jj]+S2_perp[jj];
  }
  REAL8 sKerr_norm = sqrt(inner_product(sigmaKerr->data, sigmaKerr->data));
  REAL8 S_con = 0.0;
  if (sKerr_norm>1e-6){
    S_con = sigmaKerr->data[0] * Lhat[0] + sigmaKerr->data[1] * Lhat[1] + sigmaKerr->data[2] * Lhat[2];
    S_con /= (1 - 2 * eta);
    // Last division by 2 is to ensure the spin oebys the Kerr bound.
    S_con += inner_product(S_perp, sigmaKerr->data) / sKerr_norm / (1 - 2 * eta) / 2.;
  }

  REAL8 chi = S_con;
  if ( UsePrecH && coeffs->updateHCoeffs )
  {

    REAL8 tmpa; // = magnitude of S_1 + S_2
    tmpa = sqrt(sigmaKerr->data[0]*sigmaKerr->data[0]
                + sigmaKerr->data[1]*sigmaKerr->data[1]
                + sigmaKerr->data[2]*sigmaKerr->data[2]);

    // Update coefficients, checking for errors
    if (coeffs->SpinAlignedEOBversion ==4){
      if ( XLALSimIMRCalculateSpinPrecEOBHCoeffs_v2( &tmpCoeffs, eta,
          tmpa, chi, coeffs->SpinAlignedEOBversion ) == XLAL_FAILURE )
      {
        XLAL_ERROR( XLAL_EFUNC );
      }
    }
    else{
      if ( XLALSimIMRCalculateSpinPrecEOBHCoeffs( &tmpCoeffs, eta,
          tmpa, coeffs->SpinAlignedEOBversion ) == XLAL_FAILURE )
      {
        XLAL_ERROR( XLAL_EFUNC );
      }
    }


    // Copy over underlying model version number
    tmpCoeffs.SpinAlignedEOBversion = coeffs->SpinAlignedEOBversion;
    tmpCoeffs.updateHCoeffs = coeffs->updateHCoeffs;

    coeffs = &tmpCoeffs;
  }

  REAL8 r, r2, nx, ny, nz;
  REAL8 sKerr_x, sKerr_y, sKerr_z, a, a2;
  REAL8 sStar_x, sStar_y, sStar_z;
  REAL8 e3_x, e3_y, e3_z;
  REAL8 costheta; /* Cosine of angle between Skerr and r */
  REAL8 xi2, xi_x, xi_y, xi_z; /* Cross product of unit vectors in direction of Skerr and r */
  REAL8 vx, vy, vz, pxir, pvr, pn, prT, pr, pf, ptheta2; /*prT is the tortoise pr */
  REAL8 w2, rho2;
  REAL8 u, u2, u3, u4, u5;
  REAL8 bulk, deltaT, deltaR, Lambda;
  REAL8 D, qq, ww, B, w, BR, wr, nur, mur;
  REAL8 wcos, nucos, mucos, ww_r, Lambda_r;
  REAL8 logTerms, deltaU, deltaU_u, Q, deltaT_r, pn2, pp;
  REAL8 deltaSigmaStar_x, deltaSigmaStar_y, deltaSigmaStar_z;
  REAL8 sx, sy, sz, sxi, sv, sn, s3;
  REAL8 H, Hns, Hs, Hss, Hreal, Hwcos, Hwr, HSOL, HSONL;

  /* Terms which come into the 3.5PN mapping of the spins */
  REAL8 sMultiplier1, sMultiplier2;

  /*Temporary p vector which we will make non-tortoise */
  REAL8 tmpP[3] = {0.};

  REAL8 csi;
  REAL8 logu;

  r2 = x->data[0]*x->data[0] + x->data[1]*x->data[1] + x->data[2]*x->data[2];
  r  = sqrt(r2);
  u  = 1./r;
  u2 = u*u;
  u3 = u2*u;
  u4 = u2*u2;
  u5 = u4*u;

  nx = x->data[0] *u;
  ny = x->data[1] *u;
  nz = x->data[2] *u;

  sKerr_x = sigmaKerr->data[0];
  sKerr_y = sigmaKerr->data[1];
  sKerr_z = sigmaKerr->data[2];

  sStar_x = sigmaStar->data[0];
  sStar_y = sigmaStar->data[1];
  sStar_z = sigmaStar->data[2];

  a2 = sKerr_x*sKerr_x + sKerr_y*sKerr_y + sKerr_z*sKerr_z;
  a  = sqrt( a2 );

  if(a !=0.)
  {
    const REAL8 inva = 1./a;
    e3_x = sKerr_x * inva;
    e3_y = sKerr_y * inva;
    e3_z = sKerr_z * inva;
  }
  else
  {
    e3_x = 1./sqrt(3.);
    e3_y = 1./sqrt(3.);
    e3_z = 1./sqrt(3.);
  }
  UNUSED REAL8 result[3] = {0.0, 0.0, 0.0};
  UNUSED REAL8 e3[3] = {e3_x, e3_y, e3_z};
  UNUSED REAL8 nhat[3] = {nx,ny,nz};
  UNUSED REAL8 lambda_hat[3]={0.0,0.0,0.0};
  cross_product(Lhat,nhat,lambda_hat);
  UNUSED REAL8 nrm = sqrt(inner_product(lambda_hat,lambda_hat));
  for (int k=0;k<3;k++){
    lambda_hat[k]/=nrm;
  }
  // Check if e_3 is aligned with n

  if (1. - fabs(e3_x * nx + e3_y * ny + e3_z * nz) <= 1.e-8)
  {
    if (coeffs->SpinAlignedEOBversion == 4){
      UNUSED REAL8 angle = 1.8e-3; // This is ~0.1 degrees
      rotate_vector(e3, lambda_hat, angle, result);
      e3_x = result[0];
      e3_y = result[1];
      e3_z = result[2];
    }
    else{
      e3_x = e3_x+0.1;
      e3_y = e3_y+0.1;
      const REAL8 invnorm = 1./sqrt(e3_x*e3_x + e3_y*e3_y + e3_z*e3_z);
      e3_x = e3_x*invnorm;
      e3_y = e3_y*invnorm;
      e3_z = e3_z*invnorm;
    }
  }
  costheta = e3_x*nx + e3_y*ny + e3_z*nz;

  xi2=1. - costheta*costheta;

  xi_x = -e3_z*ny + e3_y*nz;
  xi_y =  e3_z*nx - e3_x*nz;
  xi_z = -e3_y*nx + e3_x*ny;

  vx = -nz*xi_y + ny*xi_z;
  vy =  nz*xi_x - nx*xi_z;
  vz = -ny*xi_x + nx*xi_y;

  w2 = r2 + a2;
  rho2 = r2 + a2*costheta*costheta;

  if(debugPK)XLAL_PRINT_INFO( "KK = %.16e\n", coeffs->KK );
  const REAL8 invm1PlusetaKK = 1./(-1. + eta * coeffs->KK);
  /* Eq. 5.75 of BB1 */
  bulk = invm1PlusetaKK*(invm1PlusetaKK + (2.*u)) + a2*u2;
  /* Eq. 5.73 of BB1 */
  // use ln(u) = log_2(u)/log_2(e) and the fact that log2 is faster than ln
  // this relies on the compiler evaluating the expression at compile time.
  // which apparently not all do so in stead of 1./log2(exp(1.)) I use the
  // result returned by Maple.
  const REAL8 invlog_2e = 0.69314718055994530941723212145817656807550013436026;
  logu = log2(u)*invlog_2e;
  const REAL8 logarg = coeffs->k1*u + coeffs->k2*u2 + coeffs->k3*u3 + coeffs->k4*u4
                                             + coeffs->k5*u5 + coeffs->k5l*u5*logu;
  logTerms = 1. + eta*coeffs->k0 + eta*log1p(fabs(1. + logarg) - 1.);
  if(debugPK)XLAL_PRINT_INFO( "bulk = %.16e, logTerms = %.16e\n", bulk, logTerms );
  /* Eq. 5.73 of BB1 */
  deltaU = fabs(bulk*logTerms);
  /* Eq. 5.71 of BB1 */
  deltaT = r2*deltaU;
  /* ddeltaU/du */
  deltaU_u = 2.*(invm1PlusetaKK + a2*u)*logTerms +
	  bulk * (eta*(coeffs->k1 + u*(2.*coeffs->k2 + u*(3.*coeffs->k3 + u*(4.*coeffs->k4 + 5.*(coeffs->k5+coeffs->k5l*logu)*u)))))
          / (1. + logarg);
  /* ddeltaT/dr */
  deltaT_r = 2.*r*deltaU - deltaU_u;
  /* Eq. 5.39 of BB1 */
  Lambda = fabs(w2*w2 - a2*deltaT*xi2);
  // RH: this is horrible, but faster than 3 divisions
  const REAL8 invrho2xi2Lambda = 1./(rho2*xi2*Lambda);
  const REAL8 invrho2 = xi2 * (Lambda*invrho2xi2Lambda);
  const REAL8 invxi2 = rho2 * (Lambda*invrho2xi2Lambda);
  const REAL8 invLambda = xi2*rho2*invrho2xi2Lambda;
  /* Eq. 5.83 of BB1, inverse */
  D = 1. + log1p(6.*eta*u2 + 2.*(26. - 3.*eta)*eta*u3);
  /* Eq. 5.38 of BB1 */
  deltaR = deltaT*D;
  /* See Hns below, Eq. 4.34 of Damour et al. PRD 62, 084011 (2000) */
  qq = 2.*eta*(4. - 3.*eta);
  /* See Hns below. In Sec. II D of BB2 b3 and bb3 coeffs are chosen to be zero. */
  ww=2.*a*r + coeffs->b3*eta*a2*a*u + coeffs->bb3*eta*a*u;
  /* We need to transform the momentum to get the tortoise co-ord */
  /* Eq. 28 of Pan et al. PRD 81, 084041 (2010) */
  // RH: this assumes that tortoise can be 0 or 1 or 2.
  csi = sqrt( fabs(deltaT * deltaR) )/ w2;
  // non-unity only for tortoise==1
  const REAL8 csi1 = 1.0 + (1.-fabs(1.-tortoise)) * (csi - 1.0);
  // non-unity only for tortoise==2
  const REAL8 csi2 = 1.0 + (0.5-copysign(0.5, 1.5-tortoise)) * (csi - 1.0);

  if(debugPK){
      XLAL_PRINT_INFO( "csi1(miami) = %.16e\n", csi1 );
      XLAL_PRINT_INFO( "csi2(miami) = %.16e\n", csi2 );}

  prT = (p->data[0]*nx + p->data[1]*ny + p->data[2]*nz)*csi2;
  /* p->data is BL momentum vector; tmpP is tortoise momentum vector */
  tmpP[0] = p->data[0] - nx * prT * (1. - 1./csi1);
  tmpP[1] = p->data[1] - ny * prT * (1. - 1./csi1);
  tmpP[2] = p->data[2] - nz * prT * (1. - 1./csi1);

  pxir = (tmpP[0]*xi_x + tmpP[1]*xi_y + tmpP[2]*xi_z) * r;
  pvr  = (tmpP[0]*vx + tmpP[1]*vy + tmpP[2]*vz) * r;
  pn   = tmpP[0]*nx + tmpP[1]*ny + tmpP[2]*nz;

  pr = pn;
  pf = pxir;
  ptheta2 = pvr * pvr *invxi2;

  if(debugPK)
  {XLAL_PRINT_INFO( "pr = %.16e, prT = %.16e\n", pr, prT );

  XLAL_PRINT_INFO( " a = %.16e, r = %.16e\n", a, r );
  XLAL_PRINT_INFO( "D = %.16e, ww = %.16e, rho = %.16e, Lambda = %.16e, xi = %.16e\npr = %.16e, pf = %.16e, deltaR = %.16e, deltaT = %.16e\n",
      D, ww, sqrt(rho2), Lambda, sqrt(xi2), pr, pf, deltaR, deltaT );}

  /* Eqs. 5.36 - 5.46 of BB1 */
  /* Note that the tortoise prT appears only in the quartic term, explained in Eqs. 14 and 15 of Tarrachini et al. */
  Hns = sqrt((1. + ((prT*prT)*(prT*prT))*qq*u2 + ptheta2*invrho2 + pf*pf*rho2*invLambda*invxi2 + pr*pr*deltaR*invrho2)
             * (rho2*deltaT) * invLambda) + pf*ww*invLambda;
  if(debugPK){
  XLAL_PRINT_INFO( "term 1 in Hns: %.16e\n",  prT*prT*prT*prT*qq*u2 );
  XLAL_PRINT_INFO( "term 2 in Hns: %.16e\n", ptheta2/rho2 );
  XLAL_PRINT_INFO( "term 3 in Hns = %.16e\n", pf*pf*rho2/(Lambda*xi2) );
  XLAL_PRINT_INFO( "term 4 in Hns = %.16e\n", pr*pr*deltaR/rho2 );
  XLAL_PRINT_INFO( "term 5 in Hns = %.16e\n", Lambda/(rho2*deltaT) );
  XLAL_PRINT_INFO( "term 6 in Hns = %.16e\n", pf*ww/Lambda );}

  /* Eqs. 5.30 - 5.33 of BB1 */
  B = sqrt(deltaT);
  // RH: this is horrible but faster than 3 divisions
  const REAL8 sqrtdeltaT = B;
  const REAL8 sqrtdeltaR = sqrt(deltaR);
  const REAL8 invdeltaTsqrtdeltaTsqrtdeltaR = 1./(sqrtdeltaT*deltaT*sqrtdeltaR);
  const REAL8 invdeltaT = sqrtdeltaT*(sqrtdeltaR*invdeltaTsqrtdeltaTsqrtdeltaR);
  const REAL8 invsqrtdeltaT = deltaT*(sqrtdeltaR*invdeltaTsqrtdeltaTsqrtdeltaR);
  const REAL8 invsqrtdeltaR = deltaT*sqrtdeltaT*invdeltaTsqrtdeltaTsqrtdeltaR;
  w = ww*invLambda;
  //nu = 0.5 * log(deltaT*rho2/Lambda);
  //MU = 0.5 * log(rho2);
  const REAL8 expnu = sqrt(deltaT*rho2*invLambda);
  const REAL8 expMU = sqrt(rho2);
  // RH: this is horrible but faster than 2 divisions
  const REAL8 invexpnuexpMU = 1./(expnu*expMU);
  const REAL8 invexpnu = expMU*invexpnuexpMU;
  const REAL8 invexpMU = expnu*invexpnuexpMU;
  /* dLambda/dr */
  Lambda_r = 4.*r*w2 - a2*deltaT_r*xi2;

  ww_r=2.*a - (a2*a*coeffs->b3*eta)*u2 - coeffs->bb3*eta*a*u2;
  /* Eqs. 5.47a - 5.47d of BB1 */
  BR = (-deltaT*invsqrtdeltaR + deltaT_r*0.5)*invsqrtdeltaT;
  wr = (-Lambda_r*ww + Lambda*ww_r)*(invLambda*invLambda);
  nur = (r*invrho2 + (w2 * (-4.*r*deltaT + w2*deltaT_r) ) * 0.5*invdeltaT*invLambda );
  mur = (r*invrho2 - invsqrtdeltaR);
  /* Eqs. 5.47f - 5.47h of BB1 */
  wcos  = -2.*(a2*costheta)*deltaT*ww*(invLambda*invLambda);
  nucos = (a2*costheta)*w2*(w2-deltaT)*(invrho2*invLambda);
  mucos = (a2*costheta)*invrho2;
  /* Eq. 5.52 of BB1, (YP) simplified */
  Q = 1. + pvr*pvr*invrho2*invxi2 + pxir*pxir*rho2*invLambda*invxi2 + pn*pn*deltaR*invrho2;
   if(debugPK){
       XLAL_PRINT_INFO( "Q = %.16e, pvr = %.16e, xi2 = %.16e , deltaT = %.16e, rho2 = %.16e, Lambda = %.16e, pxir = %.16e, B = %.16e\n", Q, pvr, xi2, deltaT, rho2, Lambda, pxir, B );
   }
  pn2 = pr * pr * deltaR * invrho2;
  pp  = Q - 1.;

  if(debugPK){
    XLAL_PRINT_INFO( "pn2 = %.16e, pp = %.16e\n", pn2, pp );
    XLAL_PRINT_INFO( "sigmaKerr = %.16e, sigmaStar = %.16e\n", sKerr_z, sStar_z );}

  /* Eq. 5.68 of BB1, (YP) simplified for aa=bb=0. */
  deltaSigmaStar_x=eta*((-8. - 3.*r*(12.*pn2 - pp))*sKerr_x + (14. + (- 30.*pn2 + 4.*pp)*r)*sStar_x)*(1./12.)*u;

  deltaSigmaStar_y=eta*((-8. - 3.*r*(12.*pn2 - pp))*sKerr_y + (14. + (- 30.*pn2 + 4.*pp)*r)*sStar_y)*(1./12.)*u;

  deltaSigmaStar_z=eta*((-8. - 3.*r*(12.*pn2 - pp))*sKerr_z + (14. + (- 30.*pn2 + 4.*pp)*r)*sStar_z)*(1./12.)*u;


  /* Now compute the additional 3.5PN terms. */
  /* Eq. 52 of BB2, (YP) simplified for zero gauge parameters */
  // RH: below is horner(%, [eta,r])
  // sMultiplier1 = -(2.*eta*(-353. + 27.*eta) + 2.*(103.*eta - 60.*eta*eta)*pp*r
  //             + (120.*(-3.))*(eta*eta)*(pn2*pn2)*(r*r) + (eta*(23. + 3.*eta))*(pp*pp)*(r*r )
  //             + 6.*pn2*r*(- 47.*eta + 54.*(eta*eta) + (- 16.*eta + 21.*(eta*eta))*pp*r))
  //             * (1./72.) * u2;
  sMultiplier1 = (-706.0+(206.0*pp-282.0*pn2+(-96.0*pn2*pp+23.0*pp*pp)*r)*r
                  +(54.0+( -120.0*pp+324.0*pn2+(-360.0*pn2*pn2+126.0*pn2*pp
                                                 +3.0*pp*pp)*r)*r)*eta)*eta*u2
                 *(-1./72.0);
  /* Eq. 52 of BB2, (YP) simplified for zero gauge parameters */
  //RH: below is horner(expand(%), [eta,r])
  // sMultiplier2 = (-16.*(7.*eta*(8. + 3.*eta)) + 4.*(- 109.*eta + 51.*eta*eta)*pp*r
  //             + 810.*(eta*eta)*(pn2*pn2)*(r*r) - 45.*eta*(pp*pp)*(r*r)
  //             - 6.*pn2*r*(16.*eta + 147.*eta*eta + (- 6.*eta + 39.*(eta*eta))*pp*r))
  //             * (1./144.) * u2;
  sMultiplier2 = (-56.0/9.0*u2+(-2.0/3.0*pn2*u2-109.0/36.0*pp*u2
                                +(pn2*pp*u2/4.0-5.0/16.0*pp*pp*u2)*r)*r
                              +(-7.0/3.0*u2+(-49.0/8.0*pn2*u2+17.0/12.0*pp*u2
                                             +(45.0/8.0* pn2*pn2*u2
                                               -13.0/8.0*pn2*pp*u2)*r)*r)*eta)
                 *eta;
  /* Eq. 52 of BB2 */
  deltaSigmaStar_x += sMultiplier1*sigmaStar->data[0] + sMultiplier2*sigmaKerr->data[0];
  deltaSigmaStar_y += sMultiplier1*sigmaStar->data[1] + sMultiplier2*sigmaKerr->data[1];
  deltaSigmaStar_z += sMultiplier1*sigmaStar->data[2] + sMultiplier2*sigmaKerr->data[2];

  /* And now the (calibrated) 4.5PN term */
  deltaSigmaStar_x += coeffs->d1 * eta * sigmaStar->data[0] * u3;
  deltaSigmaStar_y += coeffs->d1 * eta * sigmaStar->data[1] * u3;
  deltaSigmaStar_z += coeffs->d1 * eta * sigmaStar->data[2] * u3;
  deltaSigmaStar_x += coeffs->d1v2 * eta * sigmaKerr->data[0] * u3;
  deltaSigmaStar_y += coeffs->d1v2 * eta * sigmaKerr->data[1] * u3;
  deltaSigmaStar_z += coeffs->d1v2 * eta * sigmaKerr->data[2] * u3;


  if(debugPK){
    XLAL_PRINT_INFO( "deltaSigmaStar_x = %.16e, deltaSigmaStar_y = %.16e, deltaSigmaStar_z = %.16e\n", deltaSigmaStar_x, deltaSigmaStar_y, deltaSigmaStar_z );}

  sx = sStar_x + deltaSigmaStar_x;
  sy = sStar_y + deltaSigmaStar_y;
  sz = sStar_z + deltaSigmaStar_z;


  sxi = sx*xi_x + sy*xi_y + sz*xi_z;
  sv  = sx*vx + sy*vy + sz*vz;
  sn  = sx*nx + sy*ny + sz*nz;

  s3 = sx*e3_x + sy*e3_y + sz*e3_z;

/* Eq. 3.45 of BB1, second term */
  const REAL8 sqrtQ = sqrt(Q);

  const REAL8 inv2B1psqrtQsqrtQ = 1./(2.*B*(1. + sqrtQ)*sqrtQ);
  
  Hwr = ((invexpMU*invexpMU*invexpMU*invexpnu)*sqrtdeltaR*((expMU*expMU)*(expnu*expnu)*(pxir*pxir)*sv - B*(expMU*expnu)*pvr*pxir*sxi +
                                                       B*B*xi2*((expMU*expMU)*(sqrtQ + Q)*sv + pn*pvr*sn*sqrtdeltaR - pn*pn*sv*deltaR)))*inv2B1psqrtQsqrtQ*invxi2;
  /* Eq. 3.45 of BB1, third term */
  Hwcos = ((invexpMU*invexpMU*invexpMU*invexpnu)*(sn*(-((expMU*expMU)*(expnu*expnu)*(pxir*pxir)) + B*B*(pvr*pvr - (expMU*expMU)*(sqrtQ + Q)*xi2)) -
                                            B*pn*(B*pvr*sv - (expMU*expnu)*pxir*sxi)*sqrtdeltaR))*inv2B1psqrtQsqrtQ;
  /* Eq. 3.44 of BB1, leading term */
  HSOL = ((expnu*expnu*invexpMU)*(-B + (expMU*expnu))*pxir*s3)/(deltaT*sqrtQ)*invxi2;
  
  /* Eq. 3.44 of BB1, next-to-leading term */
  HSONL = ((expnu*(invexpMU*invexpMU))*(-(B*expMU*expnu*nucos*pxir*(1. + 2.*sqrtQ)*sn*xi2) +
        (-(BR*(expMU*expnu)*pxir*(1. + sqrtQ)*sv) + B*((expMU*expnu)*nur*pxir*(1. + 2.*sqrtQ)*sv + B*mur*pvr*sxi +
        B*sxi*(-(mucos*pn*xi2) + sqrtQ*(mur*pvr - nur*pvr + (-mucos + nucos)*pn*xi2))))*sqrtdeltaR))*invxi2/(deltaT*(sqrtQ + Q));
  
  
  /* Eq. 3.43 and 3.45 of BB1 */
  Hs = w*s3 + Hwr*wr + Hwcos*wcos + HSOL + HSONL;
  
  /* Eq. 5.70 of BB1, last term */
  Hss = -0.5*u3 * (sx*sx + sy*sy + sz*sz - 3.*sn*sn);
  
  Hcalib = coeffs->dheffSSv2 * eta * u4 * (s1Vec->data[0]*s1Vec->data[0] + s1Vec->data[1]*s1Vec->data[1] + s1Vec->data[2]*s1Vec->data[2] + s2Vec->data[0]*s2Vec->data[0] + s2Vec->data[1]*s2Vec->data[1] + s2Vec->data[2]*s2Vec->data[2]);
  /* Eq. 5.70 of BB1 */
  H = Hns + Hs + Hss + Hcalib;
  
  Hreal = sqrt(1. + 2.*eta *(fabs(H) - 1.));
