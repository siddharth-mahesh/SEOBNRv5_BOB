EMgamma = 0.577215664901532860606512090082402431
M = m1+m2
mu = m1*m2/M
eta = mu/M
L1 = x2*p3-x3*p2
L2 = -(x1*p3-x3*p1)
L3 = x1*p2-x2*p1
L_mag = sp.sqrt(L1*L1+L2*L2+L3*L3)
Lhat1 = L1/L_mag
Lhat2 = L2/L_mag
Lhat3 = L3/L_mag
S1dotLhat = S1x*L1+S1y*L2+S1z*L3
S2dotLhat = S2x*L1+S2y*L2+S2z*L3
S1_perp1 = S1x-S1dotLhat*Lhat1
S1_perp2 = S1y-S1dotLhat*Lhat2
S1_perp3 = S1z-S1dotLhat*Lhat3
S2_perp1 = S2x-S2dotLhat*Lhat1
S2_perp2 = S2y-S2dotLhat*Lhat2
S2_perp3 = S2z-S2dotLhat*Lhat3
S_perp1 = S1_perp1+S2_perp1
S_perp2 = S1_perp2+S2_perp2
S_perp3 = S1_perp3+S2_perp3
sigmaKerr1 = S1x+S2x
sigmaKerr2 = S1y+S2y
sigmaKerr3 = S1z+S2z
sKerr_norm = sp.sqrt(sigmaKerr1*sigmaKerr1+sigmaKerr2*sigmaKerr2+sigmaKerr3*sigmaKerr3)
S_con = (sigmaKerr1*Lhat1+sigmaKerr2*Lhat2+sigmaKerr3*Lhat3)/(1-2*eta)+(S_perp1*sigmaKerr1+S_perp2*sigmaKerr2+S_perp3*sigmaKerr3)/(sKerr_norm*2*(12*eta))
chi = S_con
r2 = x1*x1+x2*x2+x3*x3
r = sp.sqrt(r2)
u = 1./r
u2 = u*u
u3 = u2*u
u4 = u2*u2
u5 = u4*u
nx = x1*u
ny = x2*u
nz = x3*u
sKerr_x = sigmaKerr1
sKerr_y = sigmaKerr2
sKerr_z = sigmaKerr3
sStar_x = S1x*m1/m2+S2x*m2/m1
sStar_y = S1y*m1/m2+S2y*m2/m1
sStar_z = S1z*m1/m2+S2z*m2/m1
a2 = sKerr_x*sKerr_x+sKerr_y*sKerr_y+sKerr_z*sKerr_z
a = sp.sqrt(a2)
inva = 1./a
e3_x = sKerr_x*inva
e3_y = sKerr_y*inva
e3_z = sKerr_z*inva
lambda_vec1 = Lhat2*nz-Lhat3*ny
lambda_vec2 = -(Lhat1*nz-Lhat3*n1)
lambda_vec3 = Lhat1*ny-Lhat2*nx
nrm = sp.sqrt(lambda_vec1*lambda_vec1+lambda_vec2*lambda_vec2+lambda_vec3*lambda_vec3)
lambda_hat1 = lambda_vec1/nrm
lambda_hat2 = lambda_vec2/nrm
lambda_hat3 = lambda_vec3/nrm
costheta = e3_x*nx+e3_y*ny+e3_z*nz
xi2 = 1.-costheta*costheta
xi_x = -e3_z*ny+e3_y*nz
xi_y = e3_z*nx-e3_x*nz
xi_z = -e3_y*nx+e3_x*ny
vx = -nz*xi_y+ny*xi_z
vy = nz*xi_x-nx*xi_z
vz = -ny*xi_x+nx*xi_y
w2 = r2+a2
rho2 = r2+a2*costheta*costheta
KK = -59.1658*chi*chi*chi*eta*eta*eta-0.426958*chi*chi*chi*eta+1.43659*chi*chi*chi+31.1746*chi*chi*eta*eta*eta+6.16466*chi*chi*eta*eta-1.38086*chi*chi-27.5201*chi*eta*eta*eta+17.3736*chi*eta*eta+2.26831*chi*eta-1.62045*chi+267.788*eta*eta*eta-126.687*eta*eta+10.2573*eta+1.7336
m1PlusEtaKK = -1+eta*KK
invm1PlusetaKK = 1./m1PlusEtaKK
k0 = KK*(m1PlusEtaKK-1.)
k1 = -2.*(k0+KK)*m1PlusEtaKK
k2 = (k1*(k1-4.*m1PlusEtaKK))*0.5-a*a*k0*m1PlusEtaKK*m1PlusEtaKK
k3 = -(k1*k1)*k1*divide(1,3)+k1*k2+(k1*k1)*m1PlusEtaKK-2.*(k2-m1PlusEtaKK)*m1PlusEtaKK-a*a*k1*(m1PlusEtaKK*m1PlusEtaKK)
k4 = ((24./96.)*(k1*k1)*(k1*k1)-(96./96.)*(k1*k1)*k2+(48./96.)*k2*k2-(64./96.)*(k1*k1)*k1*m1PlusEtaKK+(48./96.)*(a*a)*(k1*k1-2.*k2)*(m1PlusEtaKK*m1PlusEtaKK)+(96./96.)*k1*(k3+2.*k2*m1PlusEtaKK)-m1PlusEtaKK*((192./96.)*k3+m1PlusEtaKK*(-(3008./96.)+(123./96.)*LAL_PI*LAL_PI)))
k5 = m1PlusEtaKK*m1PlusEtaKK*(-4237./60.+128./5.*EMgamma+2275.*sp.pi*sp.pi/512.-divide(1,3)*(a*a)*(k1*k1*k1-3.*(k1*k2)+3.*k3)-((k1*k1*k1*k1*k1)-5.*(k1*k1*k1*k2)+5.*k1*k2*k2+5.*k1*k1*k3-5.*k2*k3-5.*k1*k4)*divide(1,5)*invm1PlusEtaKK*invm1PlusEtaKK+((k1*k1*k1*k1)-4.*(k1*k1*k2)+2.*k2*k2+4.*k1*k3-4.*k4)*0.5*invm1PlusEtaKK+(256./5.)*ln2+(41.*sp.pi*sp.pi/32.-221./6.)*eta)
k5l = (m1PlusEtaKK*m1PlusEtaKK)*(64./5.)
bulk = invm1PlusetaKK*(invm1PlusetaKK+(2.*u))+a2*u2
logu = sp.log(u)
logarg = k1*u+k2*u2+k3*u3+k4*u4+k5*u5+k5l*u5*logu
logTerms = 1.+eta*k0+eta*sp.log(1.+logarg)
deltaU = bulk*logTerms
deltaT = r2*deltaU
deltaU_u = 2.*(invm1PlusetaKK+a2*u)*logTerms+bulk*(eta*(k1+u*(2.*k2+u*(3.*k3+u*(4.*k4+5.*(k5+k5l*logu)*u)))))/(1.+logarg)
deltaT_r = 2.*r*deltaU-deltaU_u
Lamb = w2*w2-a2*deltaT*xi2
invrho2xi2Lamb = 1./(rho2*xi2*Lamb)
invrho2 = xi2*(Lamb*invrho2xi2Lamb)
invxi2 = rho2*(Lamb*invrho2xi2Lamb)
invLamb = xi2*rho2*invrho2xi2Lamb
D = 1.+sp.log(1+6.*eta*u2+2.*(26.-3.*eta)*eta*u3)
deltaR = deltaT*Dqqww = 2.*a*r
csi = sp.sqrt(deltaT*deltaR)/w2
csi1 = 1.0+(1.-sp.Abs(1.-tortoise))*(csi-1.0)
csi2 = 1.0+(0.5-0.5*sp.sign(1.5-tortoise))*(csi-1.0)
prT = (p1*nx+p2*ny+p3*nz)*csi2
tmpP1 = p1-nx*prT*(1.-1./csi1)
tmpP2 = p2-ny*prT*(1.-1./csi1)
tmpP3 = p3-nz*prT*(1.-1./csi1)
pxir = (tmpP1*xi_x+tmpP1*xi_y+tmpP3*xi_z)*r
pvr = (tmpP1*vx+tmpP2*vy+tmpP3*vz)*r
pn = tmpP1*nx+tmpP2*ny+tmpP3*nz
pr = pn
pf = pxir
ptheta2 = pvr*pvr*invxi2
Hns = sp.sqrt((1.+((prT*prT)*(prT*prT))*qq*u2+ptheta2*invrho2+pf*pf*rho2*invLamb*invxi2+pr*pr*deltaR*invrho2)*(rho2*deltaT)*invLamb)+pf*ww*invLamb
B = sp.sqrt(deltaT)
sqrtdeltaT = B
sqrtdeltaR = sp.sqrt(deltaR)
invdeltaTsqrtdeltaTsqrtdeltaR = 1./(sqrtdeltaT*deltaT*sqrtdeltaR)
invdeltaT = sqrtdeltaT*(sqrtdeltaR*invdeltaTsqrtdeltaTsqrtdeltaR)
invsqrtdeltaT = deltaT*(sqrtdeltaR*invdeltaTsqrtdeltaTsqrtdeltaR)
invsqrtdeltaR = deltaT*sqrtdeltaT*invdeltaTsqrtdeltaTsqrtdeltaR
w = ww*invLamb
expnu = sp.sqrt(deltaT*rho2*invLamb)
expMU = sp.sqrt(rho2)
invexpnuexpMU = 1./(expnu*expMU)
invexpnu = expMU*invexpnuexpMU
invexpMU = expnu*invexpnuexpMU
Lamb_r = 4.*r*w2-a2*deltaT_r*xi2
ww_r = 2.*a
BR = (-deltaT*invsqrtdeltaR+deltaT_r*0.5)*invsqrtdeltaT
wr = (-Lamb_r*ww+Lamb*ww_r)*(invLamb*invLamb)
nur = (r*invrho2+(w2*(-4.*r*deltaT+w2*deltaT_r))*0.5*invdeltaT*invLamb)
mur = (r*invrho2-invsqrtdeltaR)
wcos = -2.*(a2*costheta)*deltaT*ww*(invLamb*invLamb)
nucos = (a2*costheta)*w2*(w2-deltaT)*(invrho2*invLamb)
mucos = (a2*costheta)*invrho2
Q = 1.+pvr*pvr*invrho2*invxi2+pxir*pxir*rho2*invLamb*invxi2+pn*pn*deltaR*invrho2
pn2 = pr*pr*deltaR*invrho2
pp = Q-1.
sMultiplier1 = (-706.0+(206.0*pp-282.0*pn2+(-96.0*pn2*pp+23.0*pp*pp)*r)*r+(54.0+(-120.0*pp+324.0*pn2+(-360.0*pn2*pn2+126.0*pn2*pp+3.0*pp*pp)*r)*r)*eta)*eta*u2*(-1./72.0)
sMultiplier2 = (-56.0/9.0*u2+(-2.0/3.0*pn2*u2-109.0/36.0*pp*u2+(pn2*pp*u2/4.0-5.0/16.0*pp*pp*u2)*r)*r+(-7.0/3.0*u2+(-49.0/8.0*pn2*u2+17.0/12.0*pp*u2+(45.0/8.0*pn2*pn2*u2-13.0/8.0*pn2*pp*u2)*r)*r)*eta)*eta
coeff00dSO = -44.5324
coeff01dSO = 0
coeff02dSO = 0
coeff03dSO = 66.1987
coeff10dSO = 0
coeff11dSO = 0
coeff12dSO = -343.313
coeff13dSO = -568.651
coeff20dSO = 0
coeff21dSO = 2495.29
coeff22dSO = 0
coeff23dSO = 147.481
coeff30dSO = 0
coeff31dSO = 0
coeff32dSO = 0
coeff33dSO = 0
chi2 = chi*chi
chi3 = chi2*chi
eta2 = eta*eta
eta3 = eta2*eta
d1v2 = coeff00dSO+coeff01dSO*chi+coeff02dSO*chi2+coeff03dSO*chi3+coeff10dSO*eta+coeff11dSO*eta*chi+coeff12dSO*eta*chi2+coeff13dSO*eta*chi3+coeff20dSO*eta2+coeff21dSO*eta2*chi+coeff22dSO*eta2*chi2+coeff23dSO*eta2*chi3+coeff30dSO*eta3+coeff31dSO*eta3*chi+coeff32dSO*eta3*chi2+coeff33dSO*eta3*chi3
deltaSigmaStar_x = eta*((-8.-3.*r*(12.*pn2-pp))*sKerr_x+(14.+(-30.*pn2+4.*pp)*r)*sStar_x)*(1./12.)*u+sMultiplier1*sStar_x+sMultiplier2*sKerr_x+d1v2*eta*sKerr_x*u3
deltaSigmaStar_y = eta*((-8.-3.*r*(12.*pn2-pp))*sKerr_y+(14.+(-30.*pn2+4.*pp)*r)*sStar_y)*(1./12.)*u+sMultiplier1*sStar_y+sMultiplier2*sKerr_y+d1v2*eta*sKerr_y*u3
deltaSigmaStar_z = eta*((-8.-3.*r*(12.*pn2-pp))*sKerr_z+(14.+(-30.*pn2+4.*pp)*r)*sStar_z)*(1./12.)*u+sMultiplier1*sStar_z+sMultiplier2*sKerr_z+d1v2*eta*sKerr_z*u3
sx = sStar_x+deltaSigmaStar_x
sy = sStar_y+deltaSigmaStar_y
sz = sStar_z+deltaSigmaStar_z
sxi = sx*xi_x+sy*xi_y+sz*xi_z
sv = sx*vx+sy*vy+sz*vz
sn = sx*nx+sy*ny+sz*nz
s3 = sx*e3_x+sy*e3_y+sz*e3_z
sqrtQ = sp.sqrt(Q)
inv2B1psqrtQsqrtQ = 1./(2.*B*(1.+sqrtQ)*sqrtQ)
Hwr = ((invexpMU*invexpMU*invexpMU*invexpnu)*sqrtdeltaR*((expMU*expMU)*(expnu*expnu)*(pxir*pxir)*sv-B*(expMU*expnu)*pvr*pxir*sxi+B*B*xi2*((expMU*expMU)*(sqrtQ+Q)*sv+pn*pvr*sn*sqrtdeltaR-pn*pn*sv*deltaR)))*inv2B1psqrtQsqrtQ*invxi2
Hwcos = ((invexpMU*invexpMU*invexpMU*invexpnu)*(sn*(-((expMU*expMU)*(expnu*expnu)*(pxir*pxir))+B*B*(pvr*pvr-(expMU*expMU)*(sqrtQ+Q)*xi2))-B*pn*(B*pvr*sv-(expMU*expnu)*pxir*sxi)*sqrtdeltaR))*inv2B1psqrtQsqrtQ
HSOL = ((expnu*expnu*invexpMU)*(-B+(expMU*expnu))*pxir*s3)/(deltaT*sqrtQ)*invxi2
HSONL = ((expnu*(invexpMU*invexpMU))*(-(B*expMU*expnu*nucos*pxir*(1.+2.*sqrtQ)*sn*xi2)+(-(BR*(expMU*expnu)*pxir*(1.+sqrtQ)*sv)+B*((expMU*expnu)*nur*pxir*(1.+2.*sqrtQ)*sv+B*mur*pvr*sxi+B*sxi*(-(mucos*pn*xi2)+sqrtQ*(mur*pvr-nur*pvr+(-mucos+nucos)*pn*xi2))))*sqrtdeltaR))*invxi2/(deltaT*(sqrtQ+Q))
Hs = w*s3+Hwr*wr+Hwcos*wcos+HSOL+HSONL
Hss = -0.5*u3*(sx*sx+sy*sy+sz*sz-3.*sn*sn)
coeff00dSS = 6.06807
coeff01dSS = 0
coeff02dSS = 0
coeff03dSS = 0
coeff10dSS = -36.0272
coeff11dSS = 37.1964
coeff12dSS = 0
coeff13dSS = -41.0003
coeff20dSS = 0
coeff21dSS = 0
coeff22dSS = -326.325
coeff23dSS = 528.511
coeff30dSS = 706.958
coeff31dSS = 0
coeff32dSS = 1161.78
coeff33dSS = 0.
dheffSSv2 = coeff00dSS+coeff01dSS*chi+coeff02dSS*chi2+coeff03dSS*chi3+coeff10dSS*eta+coeff11dSS*eta*chi+coeff12dSS*eta*chi2+coeff13dSS*eta*chi3+coeff20dSS*eta2+coeff21dSS*eta2*chi+coeff22dSS*eta2*chi2+coeff23dSS*eta2*chi3+coeff30dSS*eta3+coeff31dSS*eta3*chi+coeff32dSS*eta3*chi2+coeff33dSS*eta3*chi3
H = Hns+Hs+Hss+dheffSSv2*eta*u4*(S1x*S1x+S1y*S1y+S1z*S1z+S2x*S2x+S2y*S2y+S2z*S2z)
Hreal = sp.sqrt(1.+2.*eta*(H-1.))L1_prmx = -p2*x3_prmx + p3*x2_prmx
L1_prmp2 = -p2*x3_prmp2 + p3*x2_prmp2 - x3
L1_prmp3 = -p2*x3_prmp3 + p3*x2_prmp3 + x2
L2_prmx = p1*x3_prmx - p3*x1_prmx
L2_prmp2 = p1*x3_prmp2 - p3*x1_prmp2
L2_prmp3 = p1*x3_prmp3 - p3*x1_prmp3 - x1
L3_prmx = -p1*x2_prmx + p2*x1_prmx
L3_prmp2 = -p1*x2_prmp2 + p2*x1_prmp2 + x1
L3_prmp3 = -p1*x2_prmp3 + p2*x1_prmp3
L_mag_prmx = (L1*L1_prmx + L2*L2_prmx + L3*L3_prmx)/sp.sqrt(L1**2 + L2**2 + L3**2)
L_mag_prmp2 = (L1*L1_prmp2 + L2*L2_prmp2 + L3*L3_prmp2)/sp.sqrt(L1**2 + L2**2 + L3**2)
L_mag_prmp3 = (L1*L1_prmp3 + L2*L2_prmp3 + L3*L3_prmp3)/sp.sqrt(L1**2 + L2**2 + L3**2)
Lhat1_prmx = -L1*L_mag_prmx/L_mag**2 + L1_prmx/L_mag
Lhat1_prmp2 = -L1*L_mag_prmp2/L_mag**2 + L1_prmp2/L_mag
Lhat1_prmp3 = -L1*L_mag_prmp3/L_mag**2 + L1_prmp3/L_mag
Lhat2_prmx = -L2*L_mag_prmx/L_mag**2 + L2_prmx/L_mag
Lhat2_prmp2 = -L2*L_mag_prmp2/L_mag**2 + L2_prmp2/L_mag
Lhat2_prmp3 = -L2*L_mag_prmp3/L_mag**2 + L2_prmp3/L_mag
Lhat3_prmx = -L3*L_mag_prmx/L_mag**2 + L3_prmx/L_mag
Lhat3_prmp2 = -L3*L_mag_prmp2/L_mag**2 + L3_prmp2/L_mag
Lhat3_prmp3 = -L3*L_mag_prmp3/L_mag**2 + L3_prmp3/L_mag
S1dotLhat_prmx = L1_prmx*S1x + L2_prmx*S1y + L3_prmx*S1z
S1dotLhat_prmp2 = L1_prmp2*S1x + L2_prmp2*S1y + L3_prmp2*S1z
S1dotLhat_prmp3 = L1_prmp3*S1x + L2_prmp3*S1y + L3_prmp3*S1z
S2dotLhat_prmx = L1_prmx*S2x + L2_prmx*S2y + L3_prmx*S2z
S2dotLhat_prmp2 = L1_prmp2*S2x + L2_prmp2*S2y + L3_prmp2*S2z
S2dotLhat_prmp3 = L1_prmp3*S2x + L2_prmp3*S2y + L3_prmp3*S2z
S1_perp1_prmx = -Lhat1*S1dotLhat_prmx - Lhat1_prmx*S1dotLhat
S1_perp1_prmp2 = -Lhat1*S1dotLhat_prmp2 - Lhat1_prmp2*S1dotLhat
S1_perp1_prmp3 = -Lhat1*S1dotLhat_prmp3 - Lhat1_prmp3*S1dotLhat
S1_perp2_prmx = -Lhat2*S1dotLhat_prmx - Lhat2_prmx*S1dotLhat
S1_perp2_prmp2 = -Lhat2*S1dotLhat_prmp2 - Lhat2_prmp2*S1dotLhat
S1_perp2_prmp3 = -Lhat2*S1dotLhat_prmp3 - Lhat2_prmp3*S1dotLhat
S1_perp3_prmx = -Lhat3*S1dotLhat_prmx - Lhat3_prmx*S1dotLhat
S1_perp3_prmp2 = -Lhat3*S1dotLhat_prmp2 - Lhat3_prmp2*S1dotLhat
S1_perp3_prmp3 = -Lhat3*S1dotLhat_prmp3 - Lhat3_prmp3*S1dotLhat
S2_perp1_prmx = -Lhat1*S2dotLhat_prmx - Lhat1_prmx*S2dotLhat
S2_perp1_prmp2 = -Lhat1*S2dotLhat_prmp2 - Lhat1_prmp2*S2dotLhat
S2_perp1_prmp3 = -Lhat1*S2dotLhat_prmp3 - Lhat1_prmp3*S2dotLhat
S2_perp2_prmx = -Lhat2*S2dotLhat_prmx - Lhat2_prmx*S2dotLhat
S2_perp2_prmp2 = -Lhat2*S2dotLhat_prmp2 - Lhat2_prmp2*S2dotLhat
S2_perp2_prmp3 = -Lhat2*S2dotLhat_prmp3 - Lhat2_prmp3*S2dotLhat
S2_perp3_prmx = -Lhat3*S2dotLhat_prmx - Lhat3_prmx*S2dotLhat
S2_perp3_prmp2 = -Lhat3*S2dotLhat_prmp2 - Lhat3_prmp2*S2dotLhat
S2_perp3_prmp3 = -Lhat3*S2dotLhat_prmp3 - Lhat3_prmp3*S2dotLhat
S_perp1_prmx = S1_perp1_prmx + S2_perp1_prmx
S_perp1_prmp2 = S1_perp1_prmp2 + S2_perp1_prmp2
S_perp1_prmp3 = S1_perp1_prmp3 + S2_perp1_prmp3
S_perp2_prmx = S1_perp2_prmx + S2_perp2_prmx
S_perp2_prmp2 = S1_perp2_prmp2 + S2_perp2_prmp2
S_perp2_prmp3 = S1_perp2_prmp3 + S2_perp2_prmp3
S_perp3_prmx = S1_perp3_prmx + S2_perp3_prmx
S_perp3_prmp2 = S1_perp3_prmp2 + S2_perp3_prmp2
S_perp3_prmp3 = S1_perp3_prmp3 + S2_perp3_prmp3
S_con_prmx = (Lhat1_prmx*sigmaKerr1 + Lhat2_prmx*sigmaKerr2 + Lhat3_prmx*sigmaKerr3)/(1 - 2*eta) + (S_perp1_prmx*sigmaKerr1 + S_perp2_prmx*sigmaKerr2 + S_perp3_prmx*sigmaKerr3)/(24*eta*sKerr_norm)
S_con_prmp2 = (Lhat1_prmp2*sigmaKerr1 + Lhat2_prmp2*sigmaKerr2 + Lhat3_prmp2*sigmaKerr3)/(1 - 2*eta) + (S_perp1_prmp2*sigmaKerr1 + S_perp2_prmp2*sigmaKerr2 + S_perp3_prmp2*sigmaKerr3)/(24*eta*sKerr_norm)
S_con_prmp3 = (Lhat1_prmp3*sigmaKerr1 + Lhat2_prmp3*sigmaKerr2 + Lhat3_prmp3*sigmaKerr3)/(1 - 2*eta) + (S_perp1_prmp3*sigmaKerr1 + S_perp2_prmp3*sigmaKerr2 + S_perp3_prmp3*sigmaKerr3)/(24*eta*sKerr_norm)
chi_prmx = S_con_prmx
chi_prmp2 = S_con_prmp2
chi_prmp3 = S_con_prmp3
r2_prmx = 2*x1*x1_prmx + 2*x2*x2_prmx + 2*x3*x3_prmx
r2_prmp2 = 2*x1*x1_prmp2 + 2*x2*x2_prmp2 + 2*x3*x3_prmp2
r2_prmp3 = 2*x1*x1_prmp3 + 2*x2*x2_prmp3 + 2*x3*x3_prmp3
r_prmx = r2_prmx/(2*sp.sqrt(r2))
r_prmp2 = r2_prmp2/(2*sp.sqrt(r2))
r_prmp3 = r2_prmp3/(2*sp.sqrt(r2))
u_prmx = -1.0*r_prmx/r**2
u_prmp2 = -1.0*r_prmp2/r**2
u_prmp3 = -1.0*r_prmp3/r**2
u2_prmx = 2*u*u_prmx
u2_prmp2 = 2*u*u_prmp2
u2_prmp3 = 2*u*u_prmp3
u3_prmx = u*u2_prmx + u2*u_prmx
u3_prmp2 = u*u2_prmp2 + u2*u_prmp2
u3_prmp3 = u*u2_prmp3 + u2*u_prmp3
u4_prmx = 2*u2*u2_prmx
u4_prmp2 = 2*u2*u2_prmp2
u4_prmp3 = 2*u2*u2_prmp3
u5_prmx = u*u4_prmx + u4*u_prmx
u5_prmp2 = u*u4_prmp2 + u4*u_prmp2
u5_prmp3 = u*u4_prmp3 + u4*u_prmp3
nx_prmx = u*x1_prmx + u_prmx*x1
nx_prmp2 = u*x1_prmp2 + u_prmp2*x1
nx_prmp3 = u*x1_prmp3 + u_prmp3*x1
ny_prmx = u*x2_prmx + u_prmx*x2
ny_prmp2 = u*x2_prmp2 + u_prmp2*x2
ny_prmp3 = u*x2_prmp3 + u_prmp3*x2
nz_prmx = u*x3_prmx + u_prmx*x3
nz_prmp2 = u*x3_prmp2 + u_prmp2*x3
nz_prmp3 = u*x3_prmp3 + u_prmp3*x3
lambda_vec1_prmx = Lhat2*nz_prmx + Lhat2_prmx*nz - Lhat3*ny_prmx - Lhat3_prmx*ny
lambda_vec1_prmp2 = Lhat2*nz_prmp2 + Lhat2_prmp2*nz - Lhat3*ny_prmp2 - Lhat3_prmp2*ny
lambda_vec1_prmp3 = Lhat2*nz_prmp3 + Lhat2_prmp3*nz - Lhat3*ny_prmp3 - Lhat3_prmp3*ny
lambda_vec2_prmx = -Lhat1*nz_prmx - Lhat1_prmx*nz + Lhat3*n1_prmx + Lhat3_prmx*n1
lambda_vec2_prmp2 = -Lhat1*nz_prmp2 - Lhat1_prmp2*nz + Lhat3*n1_prmp2 + Lhat3_prmp2*n1
lambda_vec2_prmp3 = -Lhat1*nz_prmp3 - Lhat1_prmp3*nz + Lhat3*n1_prmp3 + Lhat3_prmp3*n1
lambda_vec3_prmx = Lhat1*ny_prmx + Lhat1_prmx*ny - Lhat2*nx_prmx - Lhat2_prmx*nx
lambda_vec3_prmp2 = Lhat1*ny_prmp2 + Lhat1_prmp2*ny - Lhat2*nx_prmp2 - Lhat2_prmp2*nx
lambda_vec3_prmp3 = Lhat1*ny_prmp3 + Lhat1_prmp3*ny - Lhat2*nx_prmp3 - Lhat2_prmp3*nx
nrm_prmx = (lambda_vec1*lambda_vec1_prmx + lambda_vec2*lambda_vec2_prmx + lambda_vec3*lambda_vec3_prmx)/sp.sqrt(lambda_vec1**2 + lambda_vec2**2 + lambda_vec3**2)
nrm_prmp2 = (lambda_vec1*lambda_vec1_prmp2 + lambda_vec2*lambda_vec2_prmp2 + lambda_vec3*lambda_vec3_prmp2)/sp.sqrt(lambda_vec1**2 + lambda_vec2**2 + lambda_vec3**2)
nrm_prmp3 = (lambda_vec1*lambda_vec1_prmp3 + lambda_vec2*lambda_vec2_prmp3 + lambda_vec3*lambda_vec3_prmp3)/sp.sqrt(lambda_vec1**2 + lambda_vec2**2 + lambda_vec3**2)
lambda_hat1_prmx = -lambda_vec1*nrm_prmx/nrm**2 + lambda_vec1_prmx/nrm
lambda_hat1_prmp2 = -lambda_vec1*nrm_prmp2/nrm**2 + lambda_vec1_prmp2/nrm
lambda_hat1_prmp3 = -lambda_vec1*nrm_prmp3/nrm**2 + lambda_vec1_prmp3/nrm
lambda_hat2_prmx = -lambda_vec2*nrm_prmx/nrm**2 + lambda_vec2_prmx/nrm
lambda_hat2_prmp2 = -lambda_vec2*nrm_prmp2/nrm**2 + lambda_vec2_prmp2/nrm
lambda_hat2_prmp3 = -lambda_vec2*nrm_prmp3/nrm**2 + lambda_vec2_prmp3/nrm
lambda_hat3_prmx = -lambda_vec3*nrm_prmx/nrm**2 + lambda_vec3_prmx/nrm
lambda_hat3_prmp2 = -lambda_vec3*nrm_prmp2/nrm**2 + lambda_vec3_prmp2/nrm
lambda_hat3_prmp3 = -lambda_vec3*nrm_prmp3/nrm**2 + lambda_vec3_prmp3/nrm
costheta_prmx = e3_x*nx_prmx + e3_y*ny_prmx + e3_z*nz_prmx
costheta_prmp2 = e3_x*nx_prmp2 + e3_y*ny_prmp2 + e3_z*nz_prmp2
costheta_prmp3 = e3_x*nx_prmp3 + e3_y*ny_prmp3 + e3_z*nz_prmp3
xi2_prmx = -2*costheta*costheta_prmx
xi2_prmp2 = -2*costheta*costheta_prmp2
xi2_prmp3 = -2*costheta*costheta_prmp3
xi_x_prmx = e3_y*nz_prmx - e3_z*ny_prmx
xi_x_prmp2 = e3_y*nz_prmp2 - e3_z*ny_prmp2
xi_x_prmp3 = e3_y*nz_prmp3 - e3_z*ny_prmp3
xi_y_prmx = -e3_x*nz_prmx + e3_z*nx_prmx
xi_y_prmp2 = -e3_x*nz_prmp2 + e3_z*nx_prmp2
xi_y_prmp3 = -e3_x*nz_prmp3 + e3_z*nx_prmp3
xi_z_prmx = e3_x*ny_prmx - e3_y*nx_prmx
xi_z_prmp2 = e3_x*ny_prmp2 - e3_y*nx_prmp2
xi_z_prmp3 = e3_x*ny_prmp3 - e3_y*nx_prmp3
vx_prmx = ny*xi_z_prmx + ny_prmx*xi_z - nz*xi_y_prmx - nz_prmx*xi_y
vx_prmp2 = ny*xi_z_prmp2 + ny_prmp2*xi_z - nz*xi_y_prmp2 - nz_prmp2*xi_y
vx_prmp3 = ny*xi_z_prmp3 + ny_prmp3*xi_z - nz*xi_y_prmp3 - nz_prmp3*xi_y
vy_prmx = -nx*xi_z_prmx - nx_prmx*xi_z + nz*xi_x_prmx + nz_prmx*xi_x
vy_prmp2 = -nx*xi_z_prmp2 - nx_prmp2*xi_z + nz*xi_x_prmp2 + nz_prmp2*xi_x
vy_prmp3 = -nx*xi_z_prmp3 - nx_prmp3*xi_z + nz*xi_x_prmp3 + nz_prmp3*xi_x
vz_prmx = nx*xi_y_prmx + nx_prmx*xi_y - ny*xi_x_prmx - ny_prmx*xi_x
vz_prmp2 = nx*xi_y_prmp2 + nx_prmp2*xi_y - ny*xi_x_prmp2 - ny_prmp2*xi_x
vz_prmp3 = nx*xi_y_prmp3 + nx_prmp3*xi_y - ny*xi_x_prmp3 - ny_prmp3*xi_x
w2_prmx = r2_prmx
w2_prmp2 = r2_prmp2
w2_prmp3 = r2_prmp3
rho2_prmx = 2*a2*costheta*costheta_prmx + r2_prmx
rho2_prmp2 = 2*a2*costheta*costheta_prmp2 + r2_prmp2
rho2_prmp3 = 2*a2*costheta*costheta_prmp3 + r2_prmp3
KK_prmx = -177.4974*chi**2*chi_prmx*eta**3 - 1.280874*chi**2*chi_prmx*eta + 4.30977*chi**2*chi_prmx + 62.3492*chi*chi_prmx*eta**3 + 12.32932*chi*chi_prmx*eta**2 - 2.76172*chi*chi_prmx - 27.5201*chi_prmx*eta**3 + 17.3736*chi_prmx*eta**2 + 2.26831*chi_prmx*eta - 1.62045*chi_prmx
KK_prmp2 = -177.4974*chi**2*chi_prmp2*eta**3 - 1.280874*chi**2*chi_prmp2*eta + 4.30977*chi**2*chi_prmp2 + 62.3492*chi*chi_prmp2*eta**3 + 12.32932*chi*chi_prmp2*eta**2 - 2.76172*chi*chi_prmp2 - 27.5201*chi_prmp2*eta**3 + 17.3736*chi_prmp2*eta**2 + 2.26831*chi_prmp2*eta - 1.62045*chi_prmp2
KK_prmp3 = -177.4974*chi**2*chi_prmp3*eta**3 - 1.280874*chi**2*chi_prmp3*eta + 4.30977*chi**2*chi_prmp3 + 62.3492*chi*chi_prmp3*eta**3 + 12.32932*chi*chi_prmp3*eta**2 - 2.76172*chi*chi_prmp3 - 27.5201*chi_prmp3*eta**3 + 17.3736*chi_prmp3*eta**2 + 2.26831*chi_prmp3*eta - 1.62045*chi_prmp3
m1PlusEtaKK_prmx = KK_prmx*eta
m1PlusEtaKK_prmp2 = KK_prmp2*eta
m1PlusEtaKK_prmp3 = KK_prmp3*eta
invm1PlusetaKK_prmx = -1.0*m1PlusEtaKK_prmx/m1PlusEtaKK**2
invm1PlusetaKK_prmp2 = -1.0*m1PlusEtaKK_prmp2/m1PlusEtaKK**2
invm1PlusetaKK_prmp3 = -1.0*m1PlusEtaKK_prmp3/m1PlusEtaKK**2
k0_prmx = KK*m1PlusEtaKK_prmx + KK_prmx*(m1PlusEtaKK - 1.0)
k0_prmp2 = KK*m1PlusEtaKK_prmp2 + KK_prmp2*(m1PlusEtaKK - 1.0)
k0_prmp3 = KK*m1PlusEtaKK_prmp3 + KK_prmp3*(m1PlusEtaKK - 1.0)
k1_prmx = m1PlusEtaKK*(-2.0*KK_prmx - 2.0*k0_prmx) + m1PlusEtaKK_prmx*(-2.0*KK - 2.0*k0)
k1_prmp2 = m1PlusEtaKK*(-2.0*KK_prmp2 - 2.0*k0_prmp2) + m1PlusEtaKK_prmp2*(-2.0*KK - 2.0*k0)
k1_prmp3 = m1PlusEtaKK*(-2.0*KK_prmp3 - 2.0*k0_prmp3) + m1PlusEtaKK_prmp3*(-2.0*KK - 2.0*k0)
k2_prmx = -2*a**2*k0*m1PlusEtaKK*m1PlusEtaKK_prmx - a**2*k0_prmx*m1PlusEtaKK**2 + k1*(0.5*k1_prmx - 2.0*m1PlusEtaKK_prmx) + k1_prmx*(0.5*k1 - 2.0*m1PlusEtaKK)
k2_prmp2 = -2*a**2*k0*m1PlusEtaKK*m1PlusEtaKK_prmp2 - a**2*k0_prmp2*m1PlusEtaKK**2 + k1*(0.5*k1_prmp2 - 2.0*m1PlusEtaKK_prmp2) + k1_prmp2*(0.5*k1 - 2.0*m1PlusEtaKK)
k2_prmp3 = -2*a**2*k0*m1PlusEtaKK*m1PlusEtaKK_prmp3 - a**2*k0_prmp3*m1PlusEtaKK**2 + k1*(0.5*k1_prmp3 - 2.0*m1PlusEtaKK_prmp3) + k1_prmp3*(0.5*k1 - 2.0*m1PlusEtaKK)
k3_prmx = -2*a**2*k1*m1PlusEtaKK*m1PlusEtaKK_prmx - a**2*k1_prmx*m1PlusEtaKK**2 - 3*k1**2*k1_prmx*divide(1, 3) + k1**2*m1PlusEtaKK_prmx + 2*k1*k1_prmx*m1PlusEtaKK + k1*k2_prmx + k1_prmx*k2 + m1PlusEtaKK*(-2.0*k2_prmx + 2.0*m1PlusEtaKK_prmx) + m1PlusEtaKK_prmx*(-2.0*k2 + 2.0*m1PlusEtaKK)
k3_prmp2 = -2*a**2*k1*m1PlusEtaKK*m1PlusEtaKK_prmp2 - a**2*k1_prmp2*m1PlusEtaKK**2 - 3*k1**2*k1_prmp2*divide(1, 3) + k1**2*m1PlusEtaKK_prmp2 + 2*k1*k1_prmp2*m1PlusEtaKK + k1*k2_prmp2 + k1_prmp2*k2 + m1PlusEtaKK*(-2.0*k2_prmp2 + 2.0*m1PlusEtaKK_prmp2) + m1PlusEtaKK_prmp2*(-2.0*k2 + 2.0*m1PlusEtaKK)
k3_prmp3 = -2*a**2*k1*m1PlusEtaKK*m1PlusEtaKK_prmp3 - a**2*k1_prmp3*m1PlusEtaKK**2 - 3*k1**2*k1_prmp3*divide(1, 3) + k1**2*m1PlusEtaKK_prmp3 + 2*k1*k1_prmp3*m1PlusEtaKK + k1*k2_prmp3 + k1_prmp3*k2 + m1PlusEtaKK*(-2.0*k2_prmp3 + 2.0*m1PlusEtaKK_prmp3) + m1PlusEtaKK_prmp3*(-2.0*k2 + 2.0*m1PlusEtaKK)
k4_prmx = a**2*m1PlusEtaKK**2*(1.0*k1*k1_prmx - 1.0*k2_prmx) + a**2*m1PlusEtaKK*m1PlusEtaKK_prmx*(1.0*k1**2 - 2.0*k2) + 1.0*k1**3*k1_prmx - 0.666666666666667*k1**3*m1PlusEtaKK_prmx - 2.0*k1**2*k1_prmx*m1PlusEtaKK - 1.0*k1**2*k2_prmx - 2.0*k1*k1_prmx*k2 + k1*(2.0*k2*m1PlusEtaKK_prmx + 2.0*k2_prmx*m1PlusEtaKK + 1.0*k3_prmx) + k1_prmx*(2.0*k2*m1PlusEtaKK + 1.0*k3) + 1.0*k2*k2_prmx + m1PlusEtaKK*(-2.5625*LAL_PI*LAL_PI_prmx*m1PlusEtaKK - 2.0*k3_prmx + m1PlusEtaKK_prmx*(31.3333333333333 - 1.28125*LAL_PI**2)) + m1PlusEtaKK_prmx*(-2.0*k3 + m1PlusEtaKK*(31.3333333333333 - 1.28125*LAL_PI**2))
k4_prmp2 = a**2*m1PlusEtaKK**2*(1.0*k1*k1_prmp2 - 1.0*k2_prmp2) + a**2*m1PlusEtaKK*m1PlusEtaKK_prmp2*(1.0*k1**2 - 2.0*k2) + 1.0*k1**3*k1_prmp2 - 0.666666666666667*k1**3*m1PlusEtaKK_prmp2 - 2.0*k1**2*k1_prmp2*m1PlusEtaKK - 1.0*k1**2*k2_prmp2 - 2.0*k1*k1_prmp2*k2 + k1*(2.0*k2*m1PlusEtaKK_prmp2 + 2.0*k2_prmp2*m1PlusEtaKK + 1.0*k3_prmp2) + k1_prmp2*(2.0*k2*m1PlusEtaKK + 1.0*k3) + 1.0*k2*k2_prmp2 + m1PlusEtaKK*(-2.5625*LAL_PI*LAL_PI_prmp2*m1PlusEtaKK - 2.0*k3_prmp2 + m1PlusEtaKK_prmp2*(31.3333333333333 - 1.28125*LAL_PI**2)) + m1PlusEtaKK_prmp2*(-2.0*k3 + m1PlusEtaKK*(31.3333333333333 - 1.28125*LAL_PI**2))
k4_prmp3 = a**2*m1PlusEtaKK**2*(1.0*k1*k1_prmp3 - 1.0*k2_prmp3) + a**2*m1PlusEtaKK*m1PlusEtaKK_prmp3*(1.0*k1**2 - 2.0*k2) + 1.0*k1**3*k1_prmp3 - 0.666666666666667*k1**3*m1PlusEtaKK_prmp3 - 2.0*k1**2*k1_prmp3*m1PlusEtaKK - 1.0*k1**2*k2_prmp3 - 2.0*k1*k1_prmp3*k2 + k1*(2.0*k2*m1PlusEtaKK_prmp3 + 2.0*k2_prmp3*m1PlusEtaKK + 1.0*k3_prmp3) + k1_prmp3*(2.0*k2*m1PlusEtaKK + 1.0*k3) + 1.0*k2*k2_prmp3 + m1PlusEtaKK*(-2.5625*LAL_PI*LAL_PI_prmp3*m1PlusEtaKK - 2.0*k3_prmp3 + m1PlusEtaKK_prmp3*(31.3333333333333 - 1.28125*LAL_PI**2)) + m1PlusEtaKK_prmp3*(-2.0*k3 + m1PlusEtaKK*(31.3333333333333 - 1.28125*LAL_PI**2))
k5_prmx = m1PlusEtaKK**2*(-a**2*(3*k1**2*k1_prmx - 3.0*k1*k2_prmx - 3.0*k1_prmx*k2 + 3.0*k3_prmx)*divide(1, 3) - invm1PlusEtaKK**2*(5*k1**4*k1_prmx - 5.0*k1**3*k2_prmx - 15.0*k1**2*k1_prmx*k2 + 5.0*k1**2*k3_prmx + 10.0*k1*k1_prmx*k3 + 10.0*k1*k2*k2_prmx - 5.0*k1*k4_prmx + 5.0*k1_prmx*k2**2 - 5.0*k1_prmx*k4 - 5.0*k2*k3_prmx - 5.0*k2_prmx*k3)*divide(1, 5) - invm1PlusEtaKK*invm1PlusEtaKK_prmx*(2*k1**5 - 10.0*k1**3*k2 + 10.0*k1**2*k3 + 10.0*k1*k2**2 - 10.0*k1*k4 - 10.0*k2*k3)*divide(1, 5) + invm1PlusEtaKK*(2.0*k1**3*k1_prmx - 2.0*k1**2*k2_prmx - 4.0*k1*k1_prmx*k2 + 2.0*k1*k3_prmx + 2.0*k1_prmx*k3 + 2.0*k2*k2_prmx - 2.0*k4_prmx) + invm1PlusEtaKK_prmx*(0.5*k1**4 - 2.0*k1**2*k2 + 2.0*k1*k3 + 1.0*k2**2 - 2.0*k4) + 51.2*ln2_prmx) + m1PlusEtaKK*m1PlusEtaKK_prmx*(51.2*EMgamma - 2*a**2*(k1**3 - 3.0*k1*k2 + 3.0*k3)*divide(1, 3) + 2*eta*(-36.8333333333333 + 1.28125*sp.pi**2) - 2*invm1PlusEtaKK**2*(k1**5 - 5.0*k1**3*k2 + 5.0*k1**2*k3 + 5.0*k1*k2**2 - 5.0*k1*k4 - 5.0*k2*k3)*divide(1, 5) + 2*invm1PlusEtaKK*(0.5*k1**4 - 2.0*k1**2*k2 + 2.0*k1*k3 + 1.0*k2**2 - 2.0*k4) + 102.4*ln2 - 141.233333333333 + 8.88671875*sp.pi**2)
k5_prmp2 = m1PlusEtaKK**2*(-a**2*(3*k1**2*k1_prmp2 - 3.0*k1*k2_prmp2 - 3.0*k1_prmp2*k2 + 3.0*k3_prmp2)*divide(1, 3) - invm1PlusEtaKK**2*(5*k1**4*k1_prmp2 - 5.0*k1**3*k2_prmp2 - 15.0*k1**2*k1_prmp2*k2 + 5.0*k1**2*k3_prmp2 + 10.0*k1*k1_prmp2*k3 + 10.0*k1*k2*k2_prmp2 - 5.0*k1*k4_prmp2 + 5.0*k1_prmp2*k2**2 - 5.0*k1_prmp2*k4 - 5.0*k2*k3_prmp2 - 5.0*k2_prmp2*k3)*divide(1, 5) - invm1PlusEtaKK*invm1PlusEtaKK_prmp2*(2*k1**5 - 10.0*k1**3*k2 + 10.0*k1**2*k3 + 10.0*k1*k2**2 - 10.0*k1*k4 - 10.0*k2*k3)*divide(1, 5) + invm1PlusEtaKK*(2.0*k1**3*k1_prmp2 - 2.0*k1**2*k2_prmp2 - 4.0*k1*k1_prmp2*k2 + 2.0*k1*k3_prmp2 + 2.0*k1_prmp2*k3 + 2.0*k2*k2_prmp2 - 2.0*k4_prmp2) + invm1PlusEtaKK_prmp2*(0.5*k1**4 - 2.0*k1**2*k2 + 2.0*k1*k3 + 1.0*k2**2 - 2.0*k4) + 51.2*ln2_prmp2) + m1PlusEtaKK*m1PlusEtaKK_prmp2*(51.2*EMgamma - 2*a**2*(k1**3 - 3.0*k1*k2 + 3.0*k3)*divide(1, 3) + 2*eta*(-36.8333333333333 + 1.28125*sp.pi**2) - 2*invm1PlusEtaKK**2*(k1**5 - 5.0*k1**3*k2 + 5.0*k1**2*k3 + 5.0*k1*k2**2 - 5.0*k1*k4 - 5.0*k2*k3)*divide(1, 5) + 2*invm1PlusEtaKK*(0.5*k1**4 - 2.0*k1**2*k2 + 2.0*k1*k3 + 1.0*k2**2 - 2.0*k4) + 102.4*ln2 - 141.233333333333 + 8.88671875*sp.pi**2)
k5_prmp3 = m1PlusEtaKK**2*(-a**2*(3*k1**2*k1_prmp3 - 3.0*k1*k2_prmp3 - 3.0*k1_prmp3*k2 + 3.0*k3_prmp3)*divide(1, 3) - invm1PlusEtaKK**2*(5*k1**4*k1_prmp3 - 5.0*k1**3*k2_prmp3 - 15.0*k1**2*k1_prmp3*k2 + 5.0*k1**2*k3_prmp3 + 10.0*k1*k1_prmp3*k3 + 10.0*k1*k2*k2_prmp3 - 5.0*k1*k4_prmp3 + 5.0*k1_prmp3*k2**2 - 5.0*k1_prmp3*k4 - 5.0*k2*k3_prmp3 - 5.0*k2_prmp3*k3)*divide(1, 5) - invm1PlusEtaKK*invm1PlusEtaKK_prmp3*(2*k1**5 - 10.0*k1**3*k2 + 10.0*k1**2*k3 + 10.0*k1*k2**2 - 10.0*k1*k4 - 10.0*k2*k3)*divide(1, 5) + invm1PlusEtaKK*(2.0*k1**3*k1_prmp3 - 2.0*k1**2*k2_prmp3 - 4.0*k1*k1_prmp3*k2 + 2.0*k1*k3_prmp3 + 2.0*k1_prmp3*k3 + 2.0*k2*k2_prmp3 - 2.0*k4_prmp3) + invm1PlusEtaKK_prmp3*(0.5*k1**4 - 2.0*k1**2*k2 + 2.0*k1*k3 + 1.0*k2**2 - 2.0*k4) + 51.2*ln2_prmp3) + m1PlusEtaKK*m1PlusEtaKK_prmp3*(51.2*EMgamma - 2*a**2*(k1**3 - 3.0*k1*k2 + 3.0*k3)*divide(1, 3) + 2*eta*(-36.8333333333333 + 1.28125*sp.pi**2) - 2*invm1PlusEtaKK**2*(k1**5 - 5.0*k1**3*k2 + 5.0*k1**2*k3 + 5.0*k1*k2**2 - 5.0*k1*k4 - 5.0*k2*k3)*divide(1, 5) + 2*invm1PlusEtaKK*(0.5*k1**4 - 2.0*k1**2*k2 + 2.0*k1*k3 + 1.0*k2**2 - 2.0*k4) + 102.4*ln2 - 141.233333333333 + 8.88671875*sp.pi**2)
k5l_prmx = 25.6*m1PlusEtaKK*m1PlusEtaKK_prmx
k5l_prmp2 = 25.6*m1PlusEtaKK*m1PlusEtaKK_prmp2
k5l_prmp3 = 25.6*m1PlusEtaKK*m1PlusEtaKK_prmp3
bulk_prmx = a2*u2_prmx + invm1PlusetaKK*(invm1PlusetaKK_prmx + 2.0*u_prmx) + invm1PlusetaKK_prmx*(invm1PlusetaKK + 2.0*u)
bulk_prmp2 = a2*u2_prmp2 + invm1PlusetaKK*(invm1PlusetaKK_prmp2 + 2.0*u_prmp2) + invm1PlusetaKK_prmp2*(invm1PlusetaKK + 2.0*u)
bulk_prmp3 = a2*u2_prmp3 + invm1PlusetaKK*(invm1PlusetaKK_prmp3 + 2.0*u_prmp3) + invm1PlusetaKK_prmp3*(invm1PlusetaKK + 2.0*u)
logu_prmx = u_prmx/u
logu_prmp2 = u_prmp2/u
logu_prmp3 = u_prmp3/u
logarg_prmx = k1*u_prmx + k1_prmx*u + k2*u2_prmx + k2_prmx*u2 + k3*u3_prmx + k3_prmx*u3 + k4*u4_prmx + k4_prmx*u4 + k5*u5_prmx + k5l*logu*u5_prmx + k5l*logu_prmx*u5 + k5l_prmx*logu*u5 + k5_prmx*u5
logarg_prmp2 = k1*u_prmp2 + k1_prmp2*u + k2*u2_prmp2 + k2_prmp2*u2 + k3*u3_prmp2 + k3_prmp2*u3 + k4*u4_prmp2 + k4_prmp2*u4 + k5*u5_prmp2 + k5l*logu*u5_prmp2 + k5l*logu_prmp2*u5 + k5l_prmp2*logu*u5 + k5_prmp2*u5
logarg_prmp3 = k1*u_prmp3 + k1_prmp3*u + k2*u2_prmp3 + k2_prmp3*u2 + k3*u3_prmp3 + k3_prmp3*u3 + k4*u4_prmp3 + k4_prmp3*u4 + k5*u5_prmp3 + k5l*logu*u5_prmp3 + k5l*logu_prmp3*u5 + k5l_prmp3*logu*u5 + k5_prmp3*u5
logTerms_prmx = eta*k0_prmx + eta*logarg_prmx/(logarg + 1.0)
logTerms_prmp2 = eta*k0_prmp2 + eta*logarg_prmp2/(logarg + 1.0)
logTerms_prmp3 = eta*k0_prmp3 + eta*logarg_prmp3/(logarg + 1.0)
deltaU_prmx = bulk*logTerms_prmx + bulk_prmx*logTerms
deltaU_prmp2 = bulk*logTerms_prmp2 + bulk_prmp2*logTerms
deltaU_prmp3 = bulk*logTerms_prmp3 + bulk_prmp3*logTerms
deltaT_prmx = deltaU*r2_prmx + deltaU_prmx*r2
deltaT_prmp2 = deltaU*r2_prmp2 + deltaU_prmp2*r2
deltaT_prmp3 = deltaU*r2_prmp3 + deltaU_prmp3*r2
deltaU_u_prmx = -bulk*eta*logarg_prmx*(k1 + u*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0)**2 + bulk*eta*(k1_prmx + u*(2.0*k2_prmx + u*(3.0*k3_prmx + u*(4.0*k4_prmx + u*(5.0*k5l*logu_prmx + 5.0*k5l_prmx*logu + 5.0*k5_prmx) + u_prmx*(5.0*k5 + 5.0*k5l*logu)) + u_prmx*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu))) + u_prmx*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))) + u_prmx*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0) + bulk_prmx*eta*(k1 + u*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0) + logTerms*(2.0*a2*u_prmx + 2.0*invm1PlusetaKK_prmx) + logTerms_prmx*(2.0*a2*u + 2.0*invm1PlusetaKK)
deltaU_u_prmp2 = -bulk*eta*logarg_prmp2*(k1 + u*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0)**2 + bulk*eta*(k1_prmp2 + u*(2.0*k2_prmp2 + u*(3.0*k3_prmp2 + u*(4.0*k4_prmp2 + u*(5.0*k5l*logu_prmp2 + 5.0*k5l_prmp2*logu + 5.0*k5_prmp2) + u_prmp2*(5.0*k5 + 5.0*k5l*logu)) + u_prmp2*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu))) + u_prmp2*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))) + u_prmp2*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0) + bulk_prmp2*eta*(k1 + u*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0) + logTerms*(2.0*a2*u_prmp2 + 2.0*invm1PlusetaKK_prmp2) + logTerms_prmp2*(2.0*a2*u + 2.0*invm1PlusetaKK)
deltaU_u_prmp3 = -bulk*eta*logarg_prmp3*(k1 + u*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0)**2 + bulk*eta*(k1_prmp3 + u*(2.0*k2_prmp3 + u*(3.0*k3_prmp3 + u*(4.0*k4_prmp3 + u*(5.0*k5l*logu_prmp3 + 5.0*k5l_prmp3*logu + 5.0*k5_prmp3) + u_prmp3*(5.0*k5 + 5.0*k5l*logu)) + u_prmp3*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu))) + u_prmp3*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))) + u_prmp3*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0) + bulk_prmp3*eta*(k1 + u*(2.0*k2 + u*(3.0*k3 + u*(4.0*k4 + u*(5.0*k5 + 5.0*k5l*logu)))))/(logarg + 1.0) + logTerms*(2.0*a2*u_prmp3 + 2.0*invm1PlusetaKK_prmp3) + logTerms_prmp3*(2.0*a2*u + 2.0*invm1PlusetaKK)
deltaT_r_prmx = 2.0*deltaU*r_prmx - deltaU_u_prmx + 2.0*deltaU_prmx*r
deltaT_r_prmp2 = 2.0*deltaU*r_prmp2 - deltaU_u_prmp2 + 2.0*deltaU_prmp2*r
deltaT_r_prmp3 = 2.0*deltaU*r_prmp3 - deltaU_u_prmp3 + 2.0*deltaU_prmp3*r
Lamb_prmx = -a2*deltaT*xi2_prmx - a2*deltaT_prmx*xi2 + 2*w2*w2_prmx
Lamb_prmp2 = -a2*deltaT*xi2_prmp2 - a2*deltaT_prmp2*xi2 + 2*w2*w2_prmp2
Lamb_prmp3 = -a2*deltaT*xi2_prmp3 - a2*deltaT_prmp3*xi2 + 2*w2*w2_prmp3
invrho2xi2Lamb_prmx = -1.0*xi2_prmx/(Lamb*rho2*xi2**2) - 1.0*rho2_prmx/(Lamb*rho2**2*xi2) - 1.0*Lamb_prmx/(Lamb**2*rho2*xi2)
invrho2xi2Lamb_prmp2 = -1.0*xi2_prmp2/(Lamb*rho2*xi2**2) - 1.0*rho2_prmp2/(Lamb*rho2**2*xi2) - 1.0*Lamb_prmp2/(Lamb**2*rho2*xi2)
invrho2xi2Lamb_prmp3 = -1.0*xi2_prmp3/(Lamb*rho2*xi2**2) - 1.0*rho2_prmp3/(Lamb*rho2**2*xi2) - 1.0*Lamb_prmp3/(Lamb**2*rho2*xi2)
invrho2_prmx = Lamb*invrho2xi2Lamb*xi2_prmx + Lamb*invrho2xi2Lamb_prmx*xi2 + Lamb_prmx*invrho2xi2Lamb*xi2
invrho2_prmp2 = Lamb*invrho2xi2Lamb*xi2_prmp2 + Lamb*invrho2xi2Lamb_prmp2*xi2 + Lamb_prmp2*invrho2xi2Lamb*xi2
invrho2_prmp3 = Lamb*invrho2xi2Lamb*xi2_prmp3 + Lamb*invrho2xi2Lamb_prmp3*xi2 + Lamb_prmp3*invrho2xi2Lamb*xi2
invxi2_prmx = Lamb*invrho2xi2Lamb*rho2_prmx + Lamb*invrho2xi2Lamb_prmx*rho2 + Lamb_prmx*invrho2xi2Lamb*rho2
invxi2_prmp2 = Lamb*invrho2xi2Lamb*rho2_prmp2 + Lamb*invrho2xi2Lamb_prmp2*rho2 + Lamb_prmp2*invrho2xi2Lamb*rho2
invxi2_prmp3 = Lamb*invrho2xi2Lamb*rho2_prmp3 + Lamb*invrho2xi2Lamb_prmp3*rho2 + Lamb_prmp3*invrho2xi2Lamb*rho2
invLamb_prmx = invrho2xi2Lamb*rho2*xi2_prmx + invrho2xi2Lamb*rho2_prmx*xi2 + invrho2xi2Lamb_prmx*rho2*xi2
invLamb_prmp2 = invrho2xi2Lamb*rho2*xi2_prmp2 + invrho2xi2Lamb*rho2_prmp2*xi2 + invrho2xi2Lamb_prmp2*rho2*xi2
invLamb_prmp3 = invrho2xi2Lamb*rho2*xi2_prmp3 + invrho2xi2Lamb*rho2_prmp3*xi2 + invrho2xi2Lamb_prmp3*rho2*xi2
D_prmx = (6.0*eta*u2_prmx + eta*u3_prmx*(52.0 - 6.0*eta))/(6.0*eta*u2 + eta*u3*(52.0 - 6.0*eta) + 1)
D_prmp2 = (6.0*eta*u2_prmp2 + eta*u3_prmp2*(52.0 - 6.0*eta))/(6.0*eta*u2 + eta*u3*(52.0 - 6.0*eta) + 1)
D_prmp3 = (6.0*eta*u2_prmp3 + eta*u3_prmp3*(52.0 - 6.0*eta))/(6.0*eta*u2 + eta*u3*(52.0 - 6.0*eta) + 1)
deltaR_prmx = Dqq*deltaT_prmx + Dqq_prmx*deltaT
deltaR_prmp2 = Dqq*deltaT_prmp2 + Dqq_prmp2*deltaT
deltaR_prmp3 = Dqq*deltaT_prmp3 + Dqq_prmp3*deltaT
ww_prmx = 2.0*a*r_prmx
ww_prmp2 = 2.0*a*r_prmp2
ww_prmp3 = 2.0*a*r_prmp3
csi_prmx = -w2_prmx*sp.sqrt(deltaR*deltaT)/w2**2 + sp.sqrt(deltaR*deltaT)*(deltaR*deltaT_prmx/2 + deltaR_prmx*deltaT/2)/(deltaR*deltaT*w2)
csi_prmp2 = -w2_prmp2*sp.sqrt(deltaR*deltaT)/w2**2 + sp.sqrt(deltaR*deltaT)*(deltaR*deltaT_prmp2/2 + deltaR_prmp2*deltaT/2)/(deltaR*deltaT*w2)
csi_prmp3 = -w2_prmp3*sp.sqrt(deltaR*deltaT)/w2**2 + sp.sqrt(deltaR*deltaT)*(deltaR*deltaT_prmp3/2 + deltaR_prmp3*deltaT/2)/(deltaR*deltaT*w2)
csi1_prmx = csi_prmx*(1.0 - sp.Abs(tortoise - 1.0))
csi1_prmp2 = csi_prmp2*(1.0 - sp.Abs(tortoise - 1.0))
csi1_prmp3 = csi_prmp3*(1.0 - sp.Abs(tortoise - 1.0))
csi2_prmx = csi_prmx*(0.5 - 0.5*sp.sign(1.5 - tortoise))
csi2_prmp2 = csi_prmp2*(0.5 - 0.5*sp.sign(1.5 - tortoise))
csi2_prmp3 = csi_prmp3*(0.5 - 0.5*sp.sign(1.5 - tortoise))
prT_prmx = csi2*(nx_prmx*p1 + ny_prmx*p2 + nz_prmx*p3) + csi2_prmx*(nx*p1 + ny*p2 + nz*p3)
prT_prmp2 = csi2*(nx_prmp2*p1 + ny + ny_prmp2*p2 + nz_prmp2*p3) + csi2_prmp2*(nx*p1 + ny*p2 + nz*p3)
prT_prmp3 = csi2*(nx_prmp3*p1 + ny_prmp3*p2 + nz + nz_prmp3*p3) + csi2_prmp3*(nx*p1 + ny*p2 + nz*p3)
tmpP1_prmx = nx*prT_prmx*(-1.0 + 1.0/csi1) + nx_prmx*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmx*nx*prT/csi1**2
tmpP1_prmp2 = nx*prT_prmp2*(-1.0 + 1.0/csi1) + nx_prmp2*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmp2*nx*prT/csi1**2
tmpP1_prmp3 = nx*prT_prmp3*(-1.0 + 1.0/csi1) + nx_prmp3*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmp3*nx*prT/csi1**2
tmpP2_prmx = ny*prT_prmx*(-1.0 + 1.0/csi1) + ny_prmx*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmx*ny*prT/csi1**2
tmpP2_prmp2 = ny*prT_prmp2*(-1.0 + 1.0/csi1) + ny_prmp2*prT*(-1.0 + 1.0/csi1) + 1 - 1.0*csi1_prmp2*ny*prT/csi1**2
tmpP2_prmp3 = ny*prT_prmp3*(-1.0 + 1.0/csi1) + ny_prmp3*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmp3*ny*prT/csi1**2
tmpP3_prmx = nz*prT_prmx*(-1.0 + 1.0/csi1) + nz_prmx*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmx*nz*prT/csi1**2
tmpP3_prmp2 = nz*prT_prmp2*(-1.0 + 1.0/csi1) + nz_prmp2*prT*(-1.0 + 1.0/csi1) - 1.0*csi1_prmp2*nz*prT/csi1**2
tmpP3_prmp3 = nz*prT_prmp3*(-1.0 + 1.0/csi1) + nz_prmp3*prT*(-1.0 + 1.0/csi1) + 1 - 1.0*csi1_prmp3*nz*prT/csi1**2
pxir_prmx = r*(tmpP1*xi_x_prmx + tmpP1*xi_y_prmx + tmpP1_prmx*xi_x + tmpP1_prmx*xi_y + tmpP3*xi_z_prmx + tmpP3_prmx*xi_z) + r_prmx*(tmpP1*xi_x + tmpP1*xi_y + tmpP3*xi_z)
pxir_prmp2 = r*(tmpP1*xi_x_prmp2 + tmpP1*xi_y_prmp2 + tmpP1_prmp2*xi_x + tmpP1_prmp2*xi_y + tmpP3*xi_z_prmp2 + tmpP3_prmp2*xi_z) + r_prmp2*(tmpP1*xi_x + tmpP1*xi_y + tmpP3*xi_z)
pxir_prmp3 = r*(tmpP1*xi_x_prmp3 + tmpP1*xi_y_prmp3 + tmpP1_prmp3*xi_x + tmpP1_prmp3*xi_y + tmpP3*xi_z_prmp3 + tmpP3_prmp3*xi_z) + r_prmp3*(tmpP1*xi_x + tmpP1*xi_y + tmpP3*xi_z)
pvr_prmx = r*(tmpP1*vx_prmx + tmpP1_prmx*vx + tmpP2*vy_prmx + tmpP2_prmx*vy + tmpP3*vz_prmx + tmpP3_prmx*vz) + r_prmx*(tmpP1*vx + tmpP2*vy + tmpP3*vz)
pvr_prmp2 = r*(tmpP1*vx_prmp2 + tmpP1_prmp2*vx + tmpP2*vy_prmp2 + tmpP2_prmp2*vy + tmpP3*vz_prmp2 + tmpP3_prmp2*vz) + r_prmp2*(tmpP1*vx + tmpP2*vy + tmpP3*vz)
pvr_prmp3 = r*(tmpP1*vx_prmp3 + tmpP1_prmp3*vx + tmpP2*vy_prmp3 + tmpP2_prmp3*vy + tmpP3*vz_prmp3 + tmpP3_prmp3*vz) + r_prmp3*(tmpP1*vx + tmpP2*vy + tmpP3*vz)
pn_prmx = nx*tmpP1_prmx + nx_prmx*tmpP1 + ny*tmpP2_prmx + ny_prmx*tmpP2 + nz*tmpP3_prmx + nz_prmx*tmpP3
pn_prmp2 = nx*tmpP1_prmp2 + nx_prmp2*tmpP1 + ny*tmpP2_prmp2 + ny_prmp2*tmpP2 + nz*tmpP3_prmp2 + nz_prmp2*tmpP3
pn_prmp3 = nx*tmpP1_prmp3 + nx_prmp3*tmpP1 + ny*tmpP2_prmp3 + ny_prmp3*tmpP2 + nz*tmpP3_prmp3 + nz_prmp3*tmpP3
pr_prmx = pn_prmx
pr_prmp2 = pn_prmp2
pr_prmp3 = pn_prmp3
pf_prmx = pxir_prmx
pf_prmp2 = pxir_prmp2
pf_prmp3 = pxir_prmp3
ptheta2_prmx = 2*invxi2*pvr*pvr_prmx + invxi2_prmx*pvr**2
ptheta2_prmp2 = 2*invxi2*pvr*pvr_prmp2 + invxi2_prmp2*pvr**2
ptheta2_prmp3 = 2*invxi2*pvr*pvr_prmp3 + invxi2_prmp3*pvr**2
Hns_prmx = invLamb*pf*ww_prmx + invLamb*pf_prmx*ww + invLamb_prmx*pf*ww + sp.sqrt(deltaT*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0))*(deltaT*invLamb*rho2*(2*deltaR*invrho2*pr*pr_prmx + deltaR*invrho2_prmx*pr**2 + deltaR_prmx*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2_prmx + 2*invLamb*invxi2*pf*pf_prmx*rho2 + invLamb*invxi2_prmx*pf**2*rho2 + invLamb_prmx*invxi2*pf**2*rho2 + invrho2*ptheta2_prmx + invrho2_prmx*ptheta2 + prT**4*qq*u2_prmx + prT**4*qq_prmx*u2 + 4*prT**3*prT_prmx*qq*u2)/2 + deltaT*invLamb*rho2_prmx*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2 + deltaT*invLamb_prmx*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2 + deltaT_prmx*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2)/(deltaT*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0))
Hns_prmp2 = invLamb*pf*ww_prmp2 + invLamb*pf_prmp2*ww + invLamb_prmp2*pf*ww + sp.sqrt(deltaT*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0))*(deltaT*invLamb*rho2*(2*deltaR*invrho2*pr*pr_prmp2 + deltaR*invrho2_prmp2*pr**2 + deltaR_prmp2*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2_prmp2 + 2*invLamb*invxi2*pf*pf_prmp2*rho2 + invLamb*invxi2_prmp2*pf**2*rho2 + invLamb_prmp2*invxi2*pf**2*rho2 + invrho2*ptheta2_prmp2 + invrho2_prmp2*ptheta2 + prT**4*qq*u2_prmp2 + prT**4*qq_prmp2*u2 + 4*prT**3*prT_prmp2*qq*u2)/2 + deltaT*invLamb*rho2_prmp2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2 + deltaT*invLamb_prmp2*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2 + deltaT_prmp2*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2)/(deltaT*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0))
Hns_prmp3 = invLamb*pf*ww_prmp3 + invLamb*pf_prmp3*ww + invLamb_prmp3*pf*ww + sp.sqrt(deltaT*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0))*(deltaT*invLamb*rho2*(2*deltaR*invrho2*pr*pr_prmp3 + deltaR*invrho2_prmp3*pr**2 + deltaR_prmp3*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2_prmp3 + 2*invLamb*invxi2*pf*pf_prmp3*rho2 + invLamb*invxi2_prmp3*pf**2*rho2 + invLamb_prmp3*invxi2*pf**2*rho2 + invrho2*ptheta2_prmp3 + invrho2_prmp3*ptheta2 + prT**4*qq*u2_prmp3 + prT**4*qq_prmp3*u2 + 4*prT**3*prT_prmp3*qq*u2)/2 + deltaT*invLamb*rho2_prmp3*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2 + deltaT*invLamb_prmp3*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2 + deltaT_prmp3*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0)/2)/(deltaT*invLamb*rho2*(deltaR*invrho2*pr**2 + invLamb*invxi2*pf**2*rho2 + invrho2*ptheta2 + prT**4*qq*u2 + 1.0))
B_prmx = deltaT_prmx/(2*sp.sqrt(deltaT))
B_prmp2 = deltaT_prmp2/(2*sp.sqrt(deltaT))
B_prmp3 = deltaT_prmp3/(2*sp.sqrt(deltaT))
sqrtdeltaT_prmx = B_prmx
sqrtdeltaT_prmp2 = B_prmp2
sqrtdeltaT_prmp3 = B_prmp3
sqrtdeltaR_prmx = deltaR_prmx/(2*sp.sqrt(deltaR))
sqrtdeltaR_prmp2 = deltaR_prmp2/(2*sp.sqrt(deltaR))
sqrtdeltaR_prmp3 = deltaR_prmp3/(2*sp.sqrt(deltaR))
invdeltaTsqrtdeltaTsqrtdeltaR_prmx = -1.0*sqrtdeltaT_prmx/(deltaT*sqrtdeltaR*sqrtdeltaT**2) - 1.0*sqrtdeltaR_prmx/(deltaT*sqrtdeltaR**2*sqrtdeltaT) - 1.0*deltaT_prmx/(deltaT**2*sqrtdeltaR*sqrtdeltaT)
invdeltaTsqrtdeltaTsqrtdeltaR_prmp2 = -1.0*sqrtdeltaT_prmp2/(deltaT*sqrtdeltaR*sqrtdeltaT**2) - 1.0*sqrtdeltaR_prmp2/(deltaT*sqrtdeltaR**2*sqrtdeltaT) - 1.0*deltaT_prmp2/(deltaT**2*sqrtdeltaR*sqrtdeltaT)
invdeltaTsqrtdeltaTsqrtdeltaR_prmp3 = -1.0*sqrtdeltaT_prmp3/(deltaT*sqrtdeltaR*sqrtdeltaT**2) - 1.0*sqrtdeltaR_prmp3/(deltaT*sqrtdeltaR**2*sqrtdeltaT) - 1.0*deltaT_prmp3/(deltaT**2*sqrtdeltaR*sqrtdeltaT)
invdeltaT_prmx = invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR*sqrtdeltaT_prmx + invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR_prmx*sqrtdeltaT + invdeltaTsqrtdeltaTsqrtdeltaR_prmx*sqrtdeltaR*sqrtdeltaT
invdeltaT_prmp2 = invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR*sqrtdeltaT_prmp2 + invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR_prmp2*sqrtdeltaT + invdeltaTsqrtdeltaTsqrtdeltaR_prmp2*sqrtdeltaR*sqrtdeltaT
invdeltaT_prmp3 = invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR*sqrtdeltaT_prmp3 + invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR_prmp3*sqrtdeltaT + invdeltaTsqrtdeltaTsqrtdeltaR_prmp3*sqrtdeltaR*sqrtdeltaT
invsqrtdeltaT_prmx = deltaT*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR_prmx + deltaT*invdeltaTsqrtdeltaTsqrtdeltaR_prmx*sqrtdeltaR + deltaT_prmx*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR
invsqrtdeltaT_prmp2 = deltaT*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR_prmp2 + deltaT*invdeltaTsqrtdeltaTsqrtdeltaR_prmp2*sqrtdeltaR + deltaT_prmp2*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR
invsqrtdeltaT_prmp3 = deltaT*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR_prmp3 + deltaT*invdeltaTsqrtdeltaTsqrtdeltaR_prmp3*sqrtdeltaR + deltaT_prmp3*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaR
invsqrtdeltaR_prmx = deltaT*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaT_prmx + deltaT*invdeltaTsqrtdeltaTsqrtdeltaR_prmx*sqrtdeltaT + deltaT_prmx*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaT
invsqrtdeltaR_prmp2 = deltaT*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaT_prmp2 + deltaT*invdeltaTsqrtdeltaTsqrtdeltaR_prmp2*sqrtdeltaT + deltaT_prmp2*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaT
invsqrtdeltaR_prmp3 = deltaT*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaT_prmp3 + deltaT*invdeltaTsqrtdeltaTsqrtdeltaR_prmp3*sqrtdeltaT + deltaT_prmp3*invdeltaTsqrtdeltaTsqrtdeltaR*sqrtdeltaT
w_prmx = invLamb*ww_prmx + invLamb_prmx*ww
w_prmp2 = invLamb*ww_prmp2 + invLamb_prmp2*ww
w_prmp3 = invLamb*ww_prmp3 + invLamb_prmp3*ww
expnu_prmx = sp.sqrt(deltaT*invLamb*rho2)*(deltaT*invLamb*rho2_prmx/2 + deltaT*invLamb_prmx*rho2/2 + deltaT_prmx*invLamb*rho2/2)/(deltaT*invLamb*rho2)
expnu_prmp2 = sp.sqrt(deltaT*invLamb*rho2)*(deltaT*invLamb*rho2_prmp2/2 + deltaT*invLamb_prmp2*rho2/2 + deltaT_prmp2*invLamb*rho2/2)/(deltaT*invLamb*rho2)
expnu_prmp3 = sp.sqrt(deltaT*invLamb*rho2)*(deltaT*invLamb*rho2_prmp3/2 + deltaT*invLamb_prmp3*rho2/2 + deltaT_prmp3*invLamb*rho2/2)/(deltaT*invLamb*rho2)
expMU_prmx = rho2_prmx/(2*sp.sqrt(rho2))
expMU_prmp2 = rho2_prmp2/(2*sp.sqrt(rho2))
expMU_prmp3 = rho2_prmp3/(2*sp.sqrt(rho2))
invexpnuexpMU_prmx = -1.0*expnu_prmx/(expMU*expnu**2) - 1.0*expMU_prmx/(expMU**2*expnu)
invexpnuexpMU_prmp2 = -1.0*expnu_prmp2/(expMU*expnu**2) - 1.0*expMU_prmp2/(expMU**2*expnu)
invexpnuexpMU_prmp3 = -1.0*expnu_prmp3/(expMU*expnu**2) - 1.0*expMU_prmp3/(expMU**2*expnu)
invexpnu_prmx = expMU*invexpnuexpMU_prmx + expMU_prmx*invexpnuexpMU
invexpnu_prmp2 = expMU*invexpnuexpMU_prmp2 + expMU_prmp2*invexpnuexpMU
invexpnu_prmp3 = expMU*invexpnuexpMU_prmp3 + expMU_prmp3*invexpnuexpMU
invexpMU_prmx = expnu*invexpnuexpMU_prmx + expnu_prmx*invexpnuexpMU
invexpMU_prmp2 = expnu*invexpnuexpMU_prmp2 + expnu_prmp2*invexpnuexpMU
invexpMU_prmp3 = expnu*invexpnuexpMU_prmp3 + expnu_prmp3*invexpnuexpMU
Lamb_r_prmx = -a2*deltaT_r*xi2_prmx - a2*deltaT_r_prmx*xi2 + 4.0*r*w2_prmx + 4.0*r_prmx*w2
Lamb_r_prmp2 = -a2*deltaT_r*xi2_prmp2 - a2*deltaT_r_prmp2*xi2 + 4.0*r*w2_prmp2 + 4.0*r_prmp2*w2
Lamb_r_prmp3 = -a2*deltaT_r*xi2_prmp3 - a2*deltaT_r_prmp3*xi2 + 4.0*r*w2_prmp3 + 4.0*r_prmp3*w2
BR_prmx = invsqrtdeltaT*(-deltaT*invsqrtdeltaR_prmx + 0.5*deltaT_r_prmx - deltaT_prmx*invsqrtdeltaR) + invsqrtdeltaT_prmx*(-deltaT*invsqrtdeltaR + 0.5*deltaT_r)
BR_prmp2 = invsqrtdeltaT*(-deltaT*invsqrtdeltaR_prmp2 + 0.5*deltaT_r_prmp2 - deltaT_prmp2*invsqrtdeltaR) + invsqrtdeltaT_prmp2*(-deltaT*invsqrtdeltaR + 0.5*deltaT_r)
BR_prmp3 = invsqrtdeltaT*(-deltaT*invsqrtdeltaR_prmp3 + 0.5*deltaT_r_prmp3 - deltaT_prmp3*invsqrtdeltaR) + invsqrtdeltaT_prmp3*(-deltaT*invsqrtdeltaR + 0.5*deltaT_r)
wr_prmx = invLamb**2*(-Lamb_r*ww_prmx - Lamb_r_prmx*ww + Lamb_prmx*ww_r) + invLamb*invLamb_prmx*(2*Lamb*ww_r - 2*Lamb_r*ww)
wr_prmp2 = invLamb**2*(-Lamb_r*ww_prmp2 - Lamb_r_prmp2*ww + Lamb_prmp2*ww_r) + invLamb*invLamb_prmp2*(2*Lamb*ww_r - 2*Lamb_r*ww)
wr_prmp3 = invLamb**2*(-Lamb_r*ww_prmp3 - Lamb_r_prmp3*ww + Lamb_prmp3*ww_r) + invLamb*invLamb_prmp3*(2*Lamb*ww_r - 2*Lamb_r*ww)
nur_prmx = invLamb*invdeltaT*w2*(-2.0*deltaT*r_prmx + 0.5*deltaT_r*w2_prmx + 0.5*deltaT_r_prmx*w2 - 2.0*deltaT_prmx*r) + invLamb*invdeltaT*w2_prmx*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invLamb*invdeltaT_prmx*w2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invLamb_prmx*invdeltaT*w2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invrho2*r_prmx + invrho2_prmx*r
nur_prmp2 = invLamb*invdeltaT*w2*(-2.0*deltaT*r_prmp2 + 0.5*deltaT_r*w2_prmp2 + 0.5*deltaT_r_prmp2*w2 - 2.0*deltaT_prmp2*r) + invLamb*invdeltaT*w2_prmp2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invLamb*invdeltaT_prmp2*w2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invLamb_prmp2*invdeltaT*w2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invrho2*r_prmp2 + invrho2_prmp2*r
nur_prmp3 = invLamb*invdeltaT*w2*(-2.0*deltaT*r_prmp3 + 0.5*deltaT_r*w2_prmp3 + 0.5*deltaT_r_prmp3*w2 - 2.0*deltaT_prmp3*r) + invLamb*invdeltaT*w2_prmp3*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invLamb*invdeltaT_prmp3*w2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invLamb_prmp3*invdeltaT*w2*(-2.0*deltaT*r + 0.5*deltaT_r*w2) + invrho2*r_prmp3 + invrho2_prmp3*r
mur_prmx = invrho2*r_prmx + invrho2_prmx*r - invsqrtdeltaR_prmx
mur_prmp2 = invrho2*r_prmp2 + invrho2_prmp2*r - invsqrtdeltaR_prmp2
mur_prmp3 = invrho2*r_prmp3 + invrho2_prmp3*r - invsqrtdeltaR_prmp3
wcos_prmx = -2.0*a2*costheta*deltaT*invLamb**2*ww_prmx - 4.0*a2*costheta*deltaT*invLamb*invLamb_prmx*ww - 2.0*a2*costheta*deltaT_prmx*invLamb**2*ww - 2.0*a2*costheta_prmx*deltaT*invLamb**2*ww
wcos_prmp2 = -2.0*a2*costheta*deltaT*invLamb**2*ww_prmp2 - 4.0*a2*costheta*deltaT*invLamb*invLamb_prmp2*ww - 2.0*a2*costheta*deltaT_prmp2*invLamb**2*ww - 2.0*a2*costheta_prmp2*deltaT*invLamb**2*ww
wcos_prmp3 = -2.0*a2*costheta*deltaT*invLamb**2*ww_prmp3 - 4.0*a2*costheta*deltaT*invLamb*invLamb_prmp3*ww - 2.0*a2*costheta*deltaT_prmp3*invLamb**2*ww - 2.0*a2*costheta_prmp3*deltaT*invLamb**2*ww
nucos_prmx = a2*costheta*invLamb*invrho2*w2*(-deltaT_prmx + w2_prmx) + a2*costheta*invLamb*invrho2*w2_prmx*(-deltaT + w2) + a2*costheta*invLamb*invrho2_prmx*w2*(-deltaT + w2) + a2*costheta*invLamb_prmx*invrho2*w2*(-deltaT + w2) + a2*costheta_prmx*invLamb*invrho2*w2*(-deltaT + w2)
nucos_prmp2 = a2*costheta*invLamb*invrho2*w2*(-deltaT_prmp2 + w2_prmp2) + a2*costheta*invLamb*invrho2*w2_prmp2*(-deltaT + w2) + a2*costheta*invLamb*invrho2_prmp2*w2*(-deltaT + w2) + a2*costheta*invLamb_prmp2*invrho2*w2*(-deltaT + w2) + a2*costheta_prmp2*invLamb*invrho2*w2*(-deltaT + w2)
nucos_prmp3 = a2*costheta*invLamb*invrho2*w2*(-deltaT_prmp3 + w2_prmp3) + a2*costheta*invLamb*invrho2*w2_prmp3*(-deltaT + w2) + a2*costheta*invLamb*invrho2_prmp3*w2*(-deltaT + w2) + a2*costheta*invLamb_prmp3*invrho2*w2*(-deltaT + w2) + a2*costheta_prmp3*invLamb*invrho2*w2*(-deltaT + w2)
mucos_prmx = a2*costheta*invrho2_prmx + a2*costheta_prmx*invrho2
mucos_prmp2 = a2*costheta*invrho2_prmp2 + a2*costheta_prmp2*invrho2
mucos_prmp3 = a2*costheta*invrho2_prmp3 + a2*costheta_prmp3*invrho2
Q_prmx = 2*deltaR*invrho2*pn*pn_prmx + deltaR*invrho2_prmx*pn**2 + deltaR_prmx*invrho2*pn**2 + invLamb*invxi2*pxir**2*rho2_prmx + 2*invLamb*invxi2*pxir*pxir_prmx*rho2 + invLamb*invxi2_prmx*pxir**2*rho2 + invLamb_prmx*invxi2*pxir**2*rho2 + 2*invrho2*invxi2*pvr*pvr_prmx + invrho2*invxi2_prmx*pvr**2 + invrho2_prmx*invxi2*pvr**2
Q_prmp2 = 2*deltaR*invrho2*pn*pn_prmp2 + deltaR*invrho2_prmp2*pn**2 + deltaR_prmp2*invrho2*pn**2 + invLamb*invxi2*pxir**2*rho2_prmp2 + 2*invLamb*invxi2*pxir*pxir_prmp2*rho2 + invLamb*invxi2_prmp2*pxir**2*rho2 + invLamb_prmp2*invxi2*pxir**2*rho2 + 2*invrho2*invxi2*pvr*pvr_prmp2 + invrho2*invxi2_prmp2*pvr**2 + invrho2_prmp2*invxi2*pvr**2
Q_prmp3 = 2*deltaR*invrho2*pn*pn_prmp3 + deltaR*invrho2_prmp3*pn**2 + deltaR_prmp3*invrho2*pn**2 + invLamb*invxi2*pxir**2*rho2_prmp3 + 2*invLamb*invxi2*pxir*pxir_prmp3*rho2 + invLamb*invxi2_prmp3*pxir**2*rho2 + invLamb_prmp3*invxi2*pxir**2*rho2 + 2*invrho2*invxi2*pvr*pvr_prmp3 + invrho2*invxi2_prmp3*pvr**2 + invrho2_prmp3*invxi2*pvr**2
pn2_prmx = 2*deltaR*invrho2*pr*pr_prmx + deltaR*invrho2_prmx*pr**2 + deltaR_prmx*invrho2*pr**2
pn2_prmp2 = 2*deltaR*invrho2*pr*pr_prmp2 + deltaR*invrho2_prmp2*pr**2 + deltaR_prmp2*invrho2*pr**2
pn2_prmp3 = 2*deltaR*invrho2*pr*pr_prmp3 + deltaR*invrho2_prmp3*pr**2 + deltaR_prmp3*invrho2*pr**2
pp_prmx = Q_prmx
pp_prmp2 = Q_prmp2
pp_prmp3 = Q_prmp3
sMultiplier1_prmx = -0.0138888888888889*eta*u2*(eta*(r*(324.0*pn2_prmx - 120.0*pp_prmx + r*(-720.0*pn2*pn2_prmx + 126.0*pn2*pp_prmx + 126.0*pn2_prmx*pp + 6.0*pp*pp_prmx) + r_prmx*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2)) + r_prmx*(324.0*pn2 - 120.0*pp + r*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2))) + r*(-282.0*pn2_prmx + 206.0*pp_prmx + r*(-96.0*pn2*pp_prmx - 96.0*pn2_prmx*pp + 46.0*pp*pp_prmx) + r_prmx*(-96.0*pn2*pp + 23.0*pp**2)) + r_prmx*(-282.0*pn2 + 206.0*pp + r*(-96.0*pn2*pp + 23.0*pp**2))) - 0.0138888888888889*eta*u2_prmx*(eta*(r*(324.0*pn2 - 120.0*pp + r*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2)) + 54.0) + r*(-282.0*pn2 + 206.0*pp + r*(-96.0*pn2*pp + 23.0*pp**2)) - 706.0)
sMultiplier1_prmp2 = -0.0138888888888889*eta*u2*(eta*(r*(324.0*pn2_prmp2 - 120.0*pp_prmp2 + r*(-720.0*pn2*pn2_prmp2 + 126.0*pn2*pp_prmp2 + 126.0*pn2_prmp2*pp + 6.0*pp*pp_prmp2) + r_prmp2*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2)) + r_prmp2*(324.0*pn2 - 120.0*pp + r*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2))) + r*(-282.0*pn2_prmp2 + 206.0*pp_prmp2 + r*(-96.0*pn2*pp_prmp2 - 96.0*pn2_prmp2*pp + 46.0*pp*pp_prmp2) + r_prmp2*(-96.0*pn2*pp + 23.0*pp**2)) + r_prmp2*(-282.0*pn2 + 206.0*pp + r*(-96.0*pn2*pp + 23.0*pp**2))) - 0.0138888888888889*eta*u2_prmp2*(eta*(r*(324.0*pn2 - 120.0*pp + r*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2)) + 54.0) + r*(-282.0*pn2 + 206.0*pp + r*(-96.0*pn2*pp + 23.0*pp**2)) - 706.0)
sMultiplier1_prmp3 = -0.0138888888888889*eta*u2*(eta*(r*(324.0*pn2_prmp3 - 120.0*pp_prmp3 + r*(-720.0*pn2*pn2_prmp3 + 126.0*pn2*pp_prmp3 + 126.0*pn2_prmp3*pp + 6.0*pp*pp_prmp3) + r_prmp3*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2)) + r_prmp3*(324.0*pn2 - 120.0*pp + r*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2))) + r*(-282.0*pn2_prmp3 + 206.0*pp_prmp3 + r*(-96.0*pn2*pp_prmp3 - 96.0*pn2_prmp3*pp + 46.0*pp*pp_prmp3) + r_prmp3*(-96.0*pn2*pp + 23.0*pp**2)) + r_prmp3*(-282.0*pn2 + 206.0*pp + r*(-96.0*pn2*pp + 23.0*pp**2))) - 0.0138888888888889*eta*u2_prmp3*(eta*(r*(324.0*pn2 - 120.0*pp + r*(-360.0*pn2**2 + 126.0*pn2*pp + 3.0*pp**2)) + 54.0) + r*(-282.0*pn2 + 206.0*pp + r*(-96.0*pn2*pp + 23.0*pp**2)) - 706.0)
sMultiplier2_prmx = eta*(eta*(r*(-6.125*pn2*u2_prmx - 6.125*pn2_prmx*u2 + 1.41666666666667*pp*u2_prmx + 1.41666666666667*pp_prmx*u2 + r*(5.625*pn2**2*u2_prmx + 11.25*pn2*pn2_prmx*u2 - 1.625*pn2*pp*u2_prmx - 1.625*pn2*pp_prmx*u2 - 1.625*pn2_prmx*pp*u2) + r_prmx*(5.625*pn2**2*u2 - 1.625*pn2*pp*u2)) + r_prmx*(-6.125*pn2*u2 + 1.41666666666667*pp*u2 + r*(5.625*pn2**2*u2 - 1.625*pn2*pp*u2)) - 2.33333333333333*u2_prmx) + r*(-0.666666666666667*pn2*u2_prmx - 0.666666666666667*pn2_prmx*u2 - 3.02777777777778*pp*u2_prmx - 3.02777777777778*pp_prmx*u2 + r*(0.25*pn2*pp*u2_prmx + 0.25*pn2*pp_prmx*u2 + 0.25*pn2_prmx*pp*u2 - 0.3125*pp**2*u2_prmx - 0.625*pp*pp_prmx*u2) + r_prmx*(0.25*pn2*pp*u2 - 0.3125*pp**2*u2)) + r_prmx*(-0.666666666666667*pn2*u2 - 3.02777777777778*pp*u2 + r*(0.25*pn2*pp*u2 - 0.3125*pp**2*u2)) - 6.22222222222222*u2_prmx)
sMultiplier2_prmp2 = eta*(eta*(r*(-6.125*pn2*u2_prmp2 - 6.125*pn2_prmp2*u2 + 1.41666666666667*pp*u2_prmp2 + 1.41666666666667*pp_prmp2*u2 + r*(5.625*pn2**2*u2_prmp2 + 11.25*pn2*pn2_prmp2*u2 - 1.625*pn2*pp*u2_prmp2 - 1.625*pn2*pp_prmp2*u2 - 1.625*pn2_prmp2*pp*u2) + r_prmp2*(5.625*pn2**2*u2 - 1.625*pn2*pp*u2)) + r_prmp2*(-6.125*pn2*u2 + 1.41666666666667*pp*u2 + r*(5.625*pn2**2*u2 - 1.625*pn2*pp*u2)) - 2.33333333333333*u2_prmp2) + r*(-0.666666666666667*pn2*u2_prmp2 - 0.666666666666667*pn2_prmp2*u2 - 3.02777777777778*pp*u2_prmp2 - 3.02777777777778*pp_prmp2*u2 + r*(0.25*pn2*pp*u2_prmp2 + 0.25*pn2*pp_prmp2*u2 + 0.25*pn2_prmp2*pp*u2 - 0.3125*pp**2*u2_prmp2 - 0.625*pp*pp_prmp2*u2) + r_prmp2*(0.25*pn2*pp*u2 - 0.3125*pp**2*u2)) + r_prmp2*(-0.666666666666667*pn2*u2 - 3.02777777777778*pp*u2 + r*(0.25*pn2*pp*u2 - 0.3125*pp**2*u2)) - 6.22222222222222*u2_prmp2)
sMultiplier2_prmp3 = eta*(eta*(r*(-6.125*pn2*u2_prmp3 - 6.125*pn2_prmp3*u2 + 1.41666666666667*pp*u2_prmp3 + 1.41666666666667*pp_prmp3*u2 + r*(5.625*pn2**2*u2_prmp3 + 11.25*pn2*pn2_prmp3*u2 - 1.625*pn2*pp*u2_prmp3 - 1.625*pn2*pp_prmp3*u2 - 1.625*pn2_prmp3*pp*u2) + r_prmp3*(5.625*pn2**2*u2 - 1.625*pn2*pp*u2)) + r_prmp3*(-6.125*pn2*u2 + 1.41666666666667*pp*u2 + r*(5.625*pn2**2*u2 - 1.625*pn2*pp*u2)) - 2.33333333333333*u2_prmp3) + r*(-0.666666666666667*pn2*u2_prmp3 - 0.666666666666667*pn2_prmp3*u2 - 3.02777777777778*pp*u2_prmp3 - 3.02777777777778*pp_prmp3*u2 + r*(0.25*pn2*pp*u2_prmp3 + 0.25*pn2*pp_prmp3*u2 + 0.25*pn2_prmp3*pp*u2 - 0.3125*pp**2*u2_prmp3 - 0.625*pp*pp_prmp3*u2) + r_prmp3*(0.25*pn2*pp*u2 - 0.3125*pp**2*u2)) + r_prmp3*(-0.666666666666667*pn2*u2 - 3.02777777777778*pp*u2 + r*(0.25*pn2*pp*u2 - 0.3125*pp**2*u2)) - 6.22222222222222*u2_prmp3)
chi2_prmx = 2*chi*chi_prmx
chi2_prmp2 = 2*chi*chi_prmp2
chi2_prmp3 = 2*chi*chi_prmp3
chi3_prmx = chi*chi2_prmx + chi2*chi_prmx
chi3_prmp2 = chi*chi2_prmp2 + chi2*chi_prmp2
chi3_prmp3 = chi*chi2_prmp3 + chi2*chi_prmp3
d1v2_prmx = chi2_prmx*coeff02dSO + chi2_prmx*coeff12dSO*eta + chi2_prmx*coeff22dSO*eta2 + chi2_prmx*coeff32dSO*eta3 + chi3_prmx*coeff03dSO + chi3_prmx*coeff13dSO*eta + chi3_prmx*coeff23dSO*eta2 + chi3_prmx*coeff33dSO*eta3 + chi_prmx*coeff01dSO + chi_prmx*coeff11dSO*eta + chi_prmx*coeff21dSO*eta2 + chi_prmx*coeff31dSO*eta3
d1v2_prmp2 = chi2_prmp2*coeff02dSO + chi2_prmp2*coeff12dSO*eta + chi2_prmp2*coeff22dSO*eta2 + chi2_prmp2*coeff32dSO*eta3 + chi3_prmp2*coeff03dSO + chi3_prmp2*coeff13dSO*eta + chi3_prmp2*coeff23dSO*eta2 + chi3_prmp2*coeff33dSO*eta3 + chi_prmp2*coeff01dSO + chi_prmp2*coeff11dSO*eta + chi_prmp2*coeff21dSO*eta2 + chi_prmp2*coeff31dSO*eta3
d1v2_prmp3 = chi2_prmp3*coeff02dSO + chi2_prmp3*coeff12dSO*eta + chi2_prmp3*coeff22dSO*eta2 + chi2_prmp3*coeff32dSO*eta3 + chi3_prmp3*coeff03dSO + chi3_prmp3*coeff13dSO*eta + chi3_prmp3*coeff23dSO*eta2 + chi3_prmp3*coeff33dSO*eta3 + chi_prmp3*coeff01dSO + chi_prmp3*coeff11dSO*eta + chi_prmp3*coeff21dSO*eta2 + chi_prmp3*coeff31dSO*eta3
deltaSigmaStar_x_prmx = d1v2*eta*sKerr_x*u3_prmx + d1v2_prmx*eta*sKerr_x*u3 + 0.0833333333333333*eta*u*(sKerr_x*(r*(-36.0*pn2_prmx + 3.0*pp_prmx) + r_prmx*(-36.0*pn2 + 3.0*pp)) + sStar_x*(r*(-30.0*pn2_prmx + 4.0*pp_prmx) + r_prmx*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmx*(sKerr_x*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_x*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_x*sMultiplier2_prmx + sMultiplier1_prmx*sStar_x
deltaSigmaStar_x_prmp2 = d1v2*eta*sKerr_x*u3_prmp2 + d1v2_prmp2*eta*sKerr_x*u3 + 0.0833333333333333*eta*u*(sKerr_x*(r*(-36.0*pn2_prmp2 + 3.0*pp_prmp2) + r_prmp2*(-36.0*pn2 + 3.0*pp)) + sStar_x*(r*(-30.0*pn2_prmp2 + 4.0*pp_prmp2) + r_prmp2*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmp2*(sKerr_x*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_x*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_x*sMultiplier2_prmp2 + sMultiplier1_prmp2*sStar_x
deltaSigmaStar_x_prmp3 = d1v2*eta*sKerr_x*u3_prmp3 + d1v2_prmp3*eta*sKerr_x*u3 + 0.0833333333333333*eta*u*(sKerr_x*(r*(-36.0*pn2_prmp3 + 3.0*pp_prmp3) + r_prmp3*(-36.0*pn2 + 3.0*pp)) + sStar_x*(r*(-30.0*pn2_prmp3 + 4.0*pp_prmp3) + r_prmp3*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmp3*(sKerr_x*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_x*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_x*sMultiplier2_prmp3 + sMultiplier1_prmp3*sStar_x
deltaSigmaStar_y_prmx = d1v2*eta*sKerr_y*u3_prmx + d1v2_prmx*eta*sKerr_y*u3 + 0.0833333333333333*eta*u*(sKerr_y*(r*(-36.0*pn2_prmx + 3.0*pp_prmx) + r_prmx*(-36.0*pn2 + 3.0*pp)) + sStar_y*(r*(-30.0*pn2_prmx + 4.0*pp_prmx) + r_prmx*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmx*(sKerr_y*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_y*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_y*sMultiplier2_prmx + sMultiplier1_prmx*sStar_y
deltaSigmaStar_y_prmp2 = d1v2*eta*sKerr_y*u3_prmp2 + d1v2_prmp2*eta*sKerr_y*u3 + 0.0833333333333333*eta*u*(sKerr_y*(r*(-36.0*pn2_prmp2 + 3.0*pp_prmp2) + r_prmp2*(-36.0*pn2 + 3.0*pp)) + sStar_y*(r*(-30.0*pn2_prmp2 + 4.0*pp_prmp2) + r_prmp2*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmp2*(sKerr_y*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_y*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_y*sMultiplier2_prmp2 + sMultiplier1_prmp2*sStar_y
deltaSigmaStar_y_prmp3 = d1v2*eta*sKerr_y*u3_prmp3 + d1v2_prmp3*eta*sKerr_y*u3 + 0.0833333333333333*eta*u*(sKerr_y*(r*(-36.0*pn2_prmp3 + 3.0*pp_prmp3) + r_prmp3*(-36.0*pn2 + 3.0*pp)) + sStar_y*(r*(-30.0*pn2_prmp3 + 4.0*pp_prmp3) + r_prmp3*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmp3*(sKerr_y*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_y*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_y*sMultiplier2_prmp3 + sMultiplier1_prmp3*sStar_y
deltaSigmaStar_z_prmx = d1v2*eta*sKerr_z*u3_prmx + d1v2_prmx*eta*sKerr_z*u3 + 0.0833333333333333*eta*u*(sKerr_z*(r*(-36.0*pn2_prmx + 3.0*pp_prmx) + r_prmx*(-36.0*pn2 + 3.0*pp)) + sStar_z*(r*(-30.0*pn2_prmx + 4.0*pp_prmx) + r_prmx*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmx*(sKerr_z*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_z*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_z*sMultiplier2_prmx + sMultiplier1_prmx*sStar_z
deltaSigmaStar_z_prmp2 = d1v2*eta*sKerr_z*u3_prmp2 + d1v2_prmp2*eta*sKerr_z*u3 + 0.0833333333333333*eta*u*(sKerr_z*(r*(-36.0*pn2_prmp2 + 3.0*pp_prmp2) + r_prmp2*(-36.0*pn2 + 3.0*pp)) + sStar_z*(r*(-30.0*pn2_prmp2 + 4.0*pp_prmp2) + r_prmp2*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmp2*(sKerr_z*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_z*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_z*sMultiplier2_prmp2 + sMultiplier1_prmp2*sStar_z
deltaSigmaStar_z_prmp3 = d1v2*eta*sKerr_z*u3_prmp3 + d1v2_prmp3*eta*sKerr_z*u3 + 0.0833333333333333*eta*u*(sKerr_z*(r*(-36.0*pn2_prmp3 + 3.0*pp_prmp3) + r_prmp3*(-36.0*pn2 + 3.0*pp)) + sStar_z*(r*(-30.0*pn2_prmp3 + 4.0*pp_prmp3) + r_prmp3*(-30.0*pn2 + 4.0*pp))) + 0.0833333333333333*eta*u_prmp3*(sKerr_z*(r*(-36.0*pn2 + 3.0*pp) - 8.0) + sStar_z*(r*(-30.0*pn2 + 4.0*pp) + 14.0)) + sKerr_z*sMultiplier2_prmp3 + sMultiplier1_prmp3*sStar_z
sx_prmx = deltaSigmaStar_x_prmx
sx_prmp2 = deltaSigmaStar_x_prmp2
sx_prmp3 = deltaSigmaStar_x_prmp3
sy_prmx = deltaSigmaStar_y_prmx
sy_prmp2 = deltaSigmaStar_y_prmp2
sy_prmp3 = deltaSigmaStar_y_prmp3
sz_prmx = deltaSigmaStar_z_prmx
sz_prmp2 = deltaSigmaStar_z_prmp2
sz_prmp3 = deltaSigmaStar_z_prmp3
sxi_prmx = sx*xi_x_prmx + sx_prmx*xi_x + sy*xi_y_prmx + sy_prmx*xi_y + sz*xi_z_prmx + sz_prmx*xi_z
sxi_prmp2 = sx*xi_x_prmp2 + sx_prmp2*xi_x + sy*xi_y_prmp2 + sy_prmp2*xi_y + sz*xi_z_prmp2 + sz_prmp2*xi_z
sxi_prmp3 = sx*xi_x_prmp3 + sx_prmp3*xi_x + sy*xi_y_prmp3 + sy_prmp3*xi_y + sz*xi_z_prmp3 + sz_prmp3*xi_z
sv_prmx = sx*vx_prmx + sx_prmx*vx + sy*vy_prmx + sy_prmx*vy + sz*vz_prmx + sz_prmx*vz
sv_prmp2 = sx*vx_prmp2 + sx_prmp2*vx + sy*vy_prmp2 + sy_prmp2*vy + sz*vz_prmp2 + sz_prmp2*vz
sv_prmp3 = sx*vx_prmp3 + sx_prmp3*vx + sy*vy_prmp3 + sy_prmp3*vy + sz*vz_prmp3 + sz_prmp3*vz
sn_prmx = nx*sx_prmx + nx_prmx*sx + ny*sy_prmx + ny_prmx*sy + nz*sz_prmx + nz_prmx*sz
sn_prmp2 = nx*sx_prmp2 + nx_prmp2*sx + ny*sy_prmp2 + ny_prmp2*sy + nz*sz_prmp2 + nz_prmp2*sz
sn_prmp3 = nx*sx_prmp3 + nx_prmp3*sx + ny*sy_prmp3 + ny_prmp3*sy + nz*sz_prmp3 + nz_prmp3*sz
s3_prmx = e3_x*sx_prmx + e3_y*sy_prmx + e3_z*sz_prmx
s3_prmp2 = e3_x*sx_prmp2 + e3_y*sy_prmp2 + e3_z*sz_prmp2
s3_prmp3 = e3_x*sx_prmp3 + e3_y*sy_prmp3 + e3_z*sz_prmp3
sqrtQ_prmx = Q_prmx/(2*sp.sqrt(Q))
sqrtQ_prmp2 = Q_prmp2/(2*sp.sqrt(Q))
sqrtQ_prmp3 = Q_prmp3/(2*sp.sqrt(Q))
inv2B1psqrtQsqrtQ_prmx = -0.5*sqrtQ_prmx/(B*sqrtQ*(sqrtQ + 1.0)**2) - 0.5*sqrtQ_prmx/(B*sqrtQ**2*(sqrtQ + 1.0)) - 0.5*B_prmx/(B**2*sqrtQ*(sqrtQ + 1.0))
inv2B1psqrtQsqrtQ_prmp2 = -0.5*sqrtQ_prmp2/(B*sqrtQ*(sqrtQ + 1.0)**2) - 0.5*sqrtQ_prmp2/(B*sqrtQ**2*(sqrtQ + 1.0)) - 0.5*B_prmp2/(B**2*sqrtQ*(sqrtQ + 1.0))
inv2B1psqrtQsqrtQ_prmp3 = -0.5*sqrtQ_prmp3/(B*sqrtQ*(sqrtQ + 1.0)**2) - 0.5*sqrtQ_prmp3/(B*sqrtQ**2*(sqrtQ + 1.0)) - 0.5*B_prmp3/(B**2*sqrtQ*(sqrtQ + 1.0))
Hwr_prmx = inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv_prmx - 2*deltaR*pn*pn_prmx*sv - deltaR_prmx*pn**2*sv + expMU**2*sv*(Q_prmx + sqrtQ_prmx) + expMU**2*sv_prmx*(Q + sqrtQ) + expMU*expMU_prmx*sv*(2*Q + 2*sqrtQ) + pn*pvr*sn*sqrtdeltaR_prmx + pn*pvr*sn_prmx*sqrtdeltaR + pn*pvr_prmx*sn*sqrtdeltaR + pn_prmx*pvr*sn*sqrtdeltaR) + B**2*xi2_prmx*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) + B*B_prmx*xi2*(-2*deltaR*pn**2*sv + 2*expMU**2*sv*(Q + sqrtQ) + 2*pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi_prmx - B*expMU*expnu*pvr*pxir_prmx*sxi - B*expMU*expnu*pvr_prmx*pxir*sxi - B*expMU*expnu_prmx*pvr*pxir*sxi - B*expMU_prmx*expnu*pvr*pxir*sxi - B_prmx*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv_prmx + 2*expMU**2*expnu**2*pxir*pxir_prmx*sv + 2*expMU**2*expnu*expnu_prmx*pxir**2*sv + 2*expMU*expMU_prmx*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2*sqrtdeltaR_prmx*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2_prmx*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu_prmx*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**2*invexpMU_prmx*invexpnu*invxi2*sqrtdeltaR*(3*B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - 3*B*expMU*expnu*pvr*pxir*sxi + 3*expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ_prmx*invexpMU**3*invexpnu*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv)
Hwr_prmp2 = inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv_prmp2 - 2*deltaR*pn*pn_prmp2*sv - deltaR_prmp2*pn**2*sv + expMU**2*sv*(Q_prmp2 + sqrtQ_prmp2) + expMU**2*sv_prmp2*(Q + sqrtQ) + expMU*expMU_prmp2*sv*(2*Q + 2*sqrtQ) + pn*pvr*sn*sqrtdeltaR_prmp2 + pn*pvr*sn_prmp2*sqrtdeltaR + pn*pvr_prmp2*sn*sqrtdeltaR + pn_prmp2*pvr*sn*sqrtdeltaR) + B**2*xi2_prmp2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) + B*B_prmp2*xi2*(-2*deltaR*pn**2*sv + 2*expMU**2*sv*(Q + sqrtQ) + 2*pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi_prmp2 - B*expMU*expnu*pvr*pxir_prmp2*sxi - B*expMU*expnu*pvr_prmp2*pxir*sxi - B*expMU*expnu_prmp2*pvr*pxir*sxi - B*expMU_prmp2*expnu*pvr*pxir*sxi - B_prmp2*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv_prmp2 + 2*expMU**2*expnu**2*pxir*pxir_prmp2*sv + 2*expMU**2*expnu*expnu_prmp2*pxir**2*sv + 2*expMU*expMU_prmp2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2*sqrtdeltaR_prmp2*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2_prmp2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu_prmp2*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**2*invexpMU_prmp2*invexpnu*invxi2*sqrtdeltaR*(3*B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - 3*B*expMU*expnu*pvr*pxir*sxi + 3*expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ_prmp2*invexpMU**3*invexpnu*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv)
Hwr_prmp3 = inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv_prmp3 - 2*deltaR*pn*pn_prmp3*sv - deltaR_prmp3*pn**2*sv + expMU**2*sv*(Q_prmp3 + sqrtQ_prmp3) + expMU**2*sv_prmp3*(Q + sqrtQ) + expMU*expMU_prmp3*sv*(2*Q + 2*sqrtQ) + pn*pvr*sn*sqrtdeltaR_prmp3 + pn*pvr*sn_prmp3*sqrtdeltaR + pn*pvr_prmp3*sn*sqrtdeltaR + pn_prmp3*pvr*sn*sqrtdeltaR) + B**2*xi2_prmp3*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) + B*B_prmp3*xi2*(-2*deltaR*pn**2*sv + 2*expMU**2*sv*(Q + sqrtQ) + 2*pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi_prmp3 - B*expMU*expnu*pvr*pxir_prmp3*sxi - B*expMU*expnu*pvr_prmp3*pxir*sxi - B*expMU*expnu_prmp3*pvr*pxir*sxi - B*expMU_prmp3*expnu*pvr*pxir*sxi - B_prmp3*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv_prmp3 + 2*expMU**2*expnu**2*pxir*pxir_prmp3*sv + 2*expMU**2*expnu*expnu_prmp3*pxir**2*sv + 2*expMU*expMU_prmp3*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2*sqrtdeltaR_prmp3*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*invxi2_prmp3*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu_prmp3*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ*invexpMU**2*invexpMU_prmp3*invexpnu*invxi2*sqrtdeltaR*(3*B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - 3*B*expMU*expnu*pvr*pxir*sxi + 3*expMU**2*expnu**2*pxir**2*sv) + inv2B1psqrtQsqrtQ_prmp3*invexpMU**3*invexpnu*invxi2*sqrtdeltaR*(B**2*xi2*(-deltaR*pn**2*sv + expMU**2*sv*(Q + sqrtQ) + pn*pvr*sn*sqrtdeltaR) - B*expMU*expnu*pvr*pxir*sxi + expMU**2*expnu**2*pxir**2*sv)
Hwcos_prmx = inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*(B*pn*sqrtdeltaR*(-B*pvr*sv_prmx - B*pvr_prmx*sv - B_prmx*pvr*sv + expMU*expnu*pxir*sxi_prmx + expMU*expnu*pxir_prmx*sxi + expMU*expnu_prmx*pxir*sxi + expMU_prmx*expnu*pxir*sxi) + B*pn*sqrtdeltaR_prmx*(-B*pvr*sv + expMU*expnu*pxir*sxi) + B*pn_prmx*sqrtdeltaR*(-B*pvr*sv + expMU*expnu*pxir*sxi) + B_prmx*pn*sqrtdeltaR*(-B*pvr*sv + expMU*expnu*pxir*sxi) + sn*(B**2*(-expMU**2*xi2*(Q_prmx + sqrtQ_prmx) + expMU**2*xi2_prmx*(-Q - sqrtQ) - expMU*expMU_prmx*xi2*(2*Q + 2*sqrtQ) + 2*pvr*pvr_prmx) + B*B_prmx*(2*expMU**2*xi2*(-Q - sqrtQ) + 2*pvr**2) - 2*expMU**2*expnu**2*pxir*pxir_prmx - 2*expMU**2*expnu*expnu_prmx*pxir**2 - 2*expMU*expMU_prmx*expnu**2*pxir**2) + sn_prmx*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu_prmx*(-B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ*invexpMU**2*invexpMU_prmx*invexpnu*(-3*B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + 3*sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ_prmx*invexpMU**3*invexpnu*(-B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2))
Hwcos_prmp2 = inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*(B*pn*sqrtdeltaR*(-B*pvr*sv_prmp2 - B*pvr_prmp2*sv - B_prmp2*pvr*sv + expMU*expnu*pxir*sxi_prmp2 + expMU*expnu*pxir_prmp2*sxi + expMU*expnu_prmp2*pxir*sxi + expMU_prmp2*expnu*pxir*sxi) + B*pn*sqrtdeltaR_prmp2*(-B*pvr*sv + expMU*expnu*pxir*sxi) + B*pn_prmp2*sqrtdeltaR*(-B*pvr*sv + expMU*expnu*pxir*sxi) + B_prmp2*pn*sqrtdeltaR*(-B*pvr*sv + expMU*expnu*pxir*sxi) + sn*(B**2*(-expMU**2*xi2*(Q_prmp2 + sqrtQ_prmp2) + expMU**2*xi2_prmp2*(-Q - sqrtQ) - expMU*expMU_prmp2*xi2*(2*Q + 2*sqrtQ) + 2*pvr*pvr_prmp2) + B*B_prmp2*(2*expMU**2*xi2*(-Q - sqrtQ) + 2*pvr**2) - 2*expMU**2*expnu**2*pxir*pxir_prmp2 - 2*expMU**2*expnu*expnu_prmp2*pxir**2 - 2*expMU*expMU_prmp2*expnu**2*pxir**2) + sn_prmp2*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu_prmp2*(-B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ*invexpMU**2*invexpMU_prmp2*invexpnu*(-3*B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + 3*sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ_prmp2*invexpMU**3*invexpnu*(-B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2))
Hwcos_prmp3 = inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu*(B*pn*sqrtdeltaR*(-B*pvr*sv_prmp3 - B*pvr_prmp3*sv - B_prmp3*pvr*sv + expMU*expnu*pxir*sxi_prmp3 + expMU*expnu*pxir_prmp3*sxi + expMU*expnu_prmp3*pxir*sxi + expMU_prmp3*expnu*pxir*sxi) + B*pn*sqrtdeltaR_prmp3*(-B*pvr*sv + expMU*expnu*pxir*sxi) + B*pn_prmp3*sqrtdeltaR*(-B*pvr*sv + expMU*expnu*pxir*sxi) + B_prmp3*pn*sqrtdeltaR*(-B*pvr*sv + expMU*expnu*pxir*sxi) + sn*(B**2*(-expMU**2*xi2*(Q_prmp3 + sqrtQ_prmp3) + expMU**2*xi2_prmp3*(-Q - sqrtQ) - expMU*expMU_prmp3*xi2*(2*Q + 2*sqrtQ) + 2*pvr*pvr_prmp3) + B*B_prmp3*(2*expMU**2*xi2*(-Q - sqrtQ) + 2*pvr**2) - 2*expMU**2*expnu**2*pxir*pxir_prmp3 - 2*expMU**2*expnu*expnu_prmp3*pxir**2 - 2*expMU*expMU_prmp3*expnu**2*pxir**2) + sn_prmp3*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ*invexpMU**3*invexpnu_prmp3*(-B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ*invexpMU**2*invexpMU_prmp3*invexpnu*(-3*B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + 3*sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2)) + inv2B1psqrtQsqrtQ_prmp3*invexpMU**3*invexpnu*(-B*pn*sqrtdeltaR*(B*pvr*sv - expMU*expnu*pxir*sxi) + sn*(B**2*(expMU**2*xi2*(-Q - sqrtQ) + pvr**2) - expMU**2*expnu**2*pxir**2))
HSOL_prmx = expnu**2*invexpMU*invxi2*pxir*s3*(-B_prmx + expMU*expnu_prmx + expMU_prmx*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2*pxir*s3*sqrtQ_prmx*(B - expMU*expnu)/(deltaT*sqrtQ**2) + expnu**2*invexpMU*invxi2*pxir*s3_prmx*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2*pxir_prmx*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2_prmx*pxir*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU_prmx*invxi2*pxir*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu*expnu_prmx*invexpMU*invxi2*pxir*s3*(-2*B + 2*expMU*expnu)/(deltaT*sqrtQ) - deltaT_prmx*expnu**2*invexpMU*invxi2*pxir*s3*(-B + expMU*expnu)/(deltaT**2*sqrtQ)
HSOL_prmp2 = expnu**2*invexpMU*invxi2*pxir*s3*(-B_prmp2 + expMU*expnu_prmp2 + expMU_prmp2*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2*pxir*s3*sqrtQ_prmp2*(B - expMU*expnu)/(deltaT*sqrtQ**2) + expnu**2*invexpMU*invxi2*pxir*s3_prmp2*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2*pxir_prmp2*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2_prmp2*pxir*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU_prmp2*invxi2*pxir*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu*expnu_prmp2*invexpMU*invxi2*pxir*s3*(-2*B + 2*expMU*expnu)/(deltaT*sqrtQ) - deltaT_prmp2*expnu**2*invexpMU*invxi2*pxir*s3*(-B + expMU*expnu)/(deltaT**2*sqrtQ)
HSOL_prmp3 = expnu**2*invexpMU*invxi2*pxir*s3*(-B_prmp3 + expMU*expnu_prmp3 + expMU_prmp3*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2*pxir*s3*sqrtQ_prmp3*(B - expMU*expnu)/(deltaT*sqrtQ**2) + expnu**2*invexpMU*invxi2*pxir*s3_prmp3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2*pxir_prmp3*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU*invxi2_prmp3*pxir*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu**2*invexpMU_prmp3*invxi2*pxir*s3*(-B + expMU*expnu)/(deltaT*sqrtQ) + expnu*expnu_prmp3*invexpMU*invxi2*pxir*s3*(-2*B + 2*expMU*expnu)/(deltaT*sqrtQ) - deltaT_prmp3*expnu**2*invexpMU*invxi2*pxir*s3*(-B + expMU*expnu)/(deltaT**2*sqrtQ)
HSONL_prmx = expnu*invexpMU**2*invxi2*(-2.0*B*expMU*expnu*nucos*pxir*sn*sqrtQ_prmx*xi2 + B*expMU*expnu*nucos*pxir*sn*xi2_prmx*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos*pxir*sn_prmx*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos*pxir_prmx*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos_prmx*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu_prmx*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU_prmx*expnu*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B_prmx*expMU*expnu*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi_prmx + B*mur*pvr_prmx*sxi + B*mur_prmx*pvr*sxi + B*sxi*(-mucos*pn*xi2_prmx - mucos*pn_prmx*xi2 - mucos_prmx*pn*xi2 + sqrtQ*(mur*pvr_prmx + mur_prmx*pvr - nur*pvr_prmx - nur_prmx*pvr + pn*xi2*(-mucos_prmx + nucos_prmx) + pn*xi2_prmx*(-mucos + nucos) + pn_prmx*xi2*(-mucos + nucos)) + sqrtQ_prmx*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + B*sxi_prmx*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + B_prmx*mur*pvr*sxi + B_prmx*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + 2.0*expMU*expnu*nur*pxir*sqrtQ_prmx*sv + expMU*expnu*nur*pxir*sv_prmx*(2.0*sqrtQ + 1.0) + expMU*expnu*nur*pxir_prmx*sv*(2.0*sqrtQ + 1.0) + expMU*expnu*nur_prmx*pxir*sv*(2.0*sqrtQ + 1.0) + expMU*expnu_prmx*nur*pxir*sv*(2.0*sqrtQ + 1.0) + expMU_prmx*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) - BR*expMU*expnu*pxir*sqrtQ_prmx*sv + BR*expMU*expnu*pxir*sv_prmx*(-sqrtQ - 1.0) + BR*expMU*expnu*pxir_prmx*sv*(-sqrtQ - 1.0) + BR*expMU*expnu_prmx*pxir*sv*(-sqrtQ - 1.0) + BR*expMU_prmx*expnu*pxir*sv*(-sqrtQ - 1.0) + BR_prmx*expMU*expnu*pxir*sv*(-sqrtQ - 1.0) + B_prmx*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0))) + sqrtdeltaR_prmx*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu*invexpMU**2*invxi2*(-Q_prmx - sqrtQ_prmx)*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)**2) + expnu*invexpMU**2*invxi2_prmx*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu*invexpMU*invexpMU_prmx*invxi2*(-2*B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + 2*sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu_prmx*invexpMU**2*invxi2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) - deltaT_prmx*expnu*invexpMU**2*invxi2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT**2*(Q + sqrtQ))
HSONL_prmp2 = expnu*invexpMU**2*invxi2*(-2.0*B*expMU*expnu*nucos*pxir*sn*sqrtQ_prmp2*xi2 + B*expMU*expnu*nucos*pxir*sn*xi2_prmp2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos*pxir*sn_prmp2*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos*pxir_prmp2*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos_prmp2*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu_prmp2*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU_prmp2*expnu*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B_prmp2*expMU*expnu*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi_prmp2 + B*mur*pvr_prmp2*sxi + B*mur_prmp2*pvr*sxi + B*sxi*(-mucos*pn*xi2_prmp2 - mucos*pn_prmp2*xi2 - mucos_prmp2*pn*xi2 + sqrtQ*(mur*pvr_prmp2 + mur_prmp2*pvr - nur*pvr_prmp2 - nur_prmp2*pvr + pn*xi2*(-mucos_prmp2 + nucos_prmp2) + pn*xi2_prmp2*(-mucos + nucos) + pn_prmp2*xi2*(-mucos + nucos)) + sqrtQ_prmp2*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + B*sxi_prmp2*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + B_prmp2*mur*pvr*sxi + B_prmp2*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + 2.0*expMU*expnu*nur*pxir*sqrtQ_prmp2*sv + expMU*expnu*nur*pxir*sv_prmp2*(2.0*sqrtQ + 1.0) + expMU*expnu*nur*pxir_prmp2*sv*(2.0*sqrtQ + 1.0) + expMU*expnu*nur_prmp2*pxir*sv*(2.0*sqrtQ + 1.0) + expMU*expnu_prmp2*nur*pxir*sv*(2.0*sqrtQ + 1.0) + expMU_prmp2*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) - BR*expMU*expnu*pxir*sqrtQ_prmp2*sv + BR*expMU*expnu*pxir*sv_prmp2*(-sqrtQ - 1.0) + BR*expMU*expnu*pxir_prmp2*sv*(-sqrtQ - 1.0) + BR*expMU*expnu_prmp2*pxir*sv*(-sqrtQ - 1.0) + BR*expMU_prmp2*expnu*pxir*sv*(-sqrtQ - 1.0) + BR_prmp2*expMU*expnu*pxir*sv*(-sqrtQ - 1.0) + B_prmp2*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0))) + sqrtdeltaR_prmp2*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu*invexpMU**2*invxi2*(-Q_prmp2 - sqrtQ_prmp2)*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)**2) + expnu*invexpMU**2*invxi2_prmp2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu*invexpMU*invexpMU_prmp2*invxi2*(-2*B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + 2*sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu_prmp2*invexpMU**2*invxi2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) - deltaT_prmp2*expnu*invexpMU**2*invxi2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT**2*(Q + sqrtQ))
HSONL_prmp3 = expnu*invexpMU**2*invxi2*(-2.0*B*expMU*expnu*nucos*pxir*sn*sqrtQ_prmp3*xi2 + B*expMU*expnu*nucos*pxir*sn*xi2_prmp3*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos*pxir*sn_prmp3*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos*pxir_prmp3*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu*nucos_prmp3*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU*expnu_prmp3*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B*expMU_prmp3*expnu*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + B_prmp3*expMU*expnu*nucos*pxir*sn*xi2*(-2.0*sqrtQ - 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi_prmp3 + B*mur*pvr_prmp3*sxi + B*mur_prmp3*pvr*sxi + B*sxi*(-mucos*pn*xi2_prmp3 - mucos*pn_prmp3*xi2 - mucos_prmp3*pn*xi2 + sqrtQ*(mur*pvr_prmp3 + mur_prmp3*pvr - nur*pvr_prmp3 - nur_prmp3*pvr + pn*xi2*(-mucos_prmp3 + nucos_prmp3) + pn*xi2_prmp3*(-mucos + nucos) + pn_prmp3*xi2*(-mucos + nucos)) + sqrtQ_prmp3*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + B*sxi_prmp3*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + B_prmp3*mur*pvr*sxi + B_prmp3*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + 2.0*expMU*expnu*nur*pxir*sqrtQ_prmp3*sv + expMU*expnu*nur*pxir*sv_prmp3*(2.0*sqrtQ + 1.0) + expMU*expnu*nur*pxir_prmp3*sv*(2.0*sqrtQ + 1.0) + expMU*expnu*nur_prmp3*pxir*sv*(2.0*sqrtQ + 1.0) + expMU*expnu_prmp3*nur*pxir*sv*(2.0*sqrtQ + 1.0) + expMU_prmp3*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) - BR*expMU*expnu*pxir*sqrtQ_prmp3*sv + BR*expMU*expnu*pxir*sv_prmp3*(-sqrtQ - 1.0) + BR*expMU*expnu*pxir_prmp3*sv*(-sqrtQ - 1.0) + BR*expMU*expnu_prmp3*pxir*sv*(-sqrtQ - 1.0) + BR*expMU_prmp3*expnu*pxir*sv*(-sqrtQ - 1.0) + BR_prmp3*expMU*expnu*pxir*sv*(-sqrtQ - 1.0) + B_prmp3*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0))) + sqrtdeltaR_prmp3*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu*invexpMU**2*invxi2*(-Q_prmp3 - sqrtQ_prmp3)*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)**2) + expnu*invexpMU**2*invxi2_prmp3*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu*invexpMU*invexpMU_prmp3*invxi2*(-2*B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + 2*sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) + expnu_prmp3*invexpMU**2*invxi2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT*(Q + sqrtQ)) - deltaT_prmp3*expnu*invexpMU**2*invxi2*(-B*expMU*expnu*nucos*pxir*sn*xi2*(2.0*sqrtQ + 1.0) + sqrtdeltaR*(B*(B*mur*pvr*sxi + B*sxi*(-mucos*pn*xi2 + sqrtQ*(mur*pvr - nur*pvr + pn*xi2*(-mucos + nucos))) + expMU*expnu*nur*pxir*sv*(2.0*sqrtQ + 1.0)) + BR*expMU*expnu*pxir*sv*(-sqrtQ - 1.0)))/(deltaT**2*(Q + sqrtQ))
Hs_prmx = HSOL_prmx + HSONL_prmx + Hwcos*wcos_prmx + Hwcos_prmx*wcos + Hwr*wr_prmx + Hwr_prmx*wr + s3*w_prmx + s3_prmx*w
Hs_prmp2 = HSOL_prmp2 + HSONL_prmp2 + Hwcos*wcos_prmp2 + Hwcos_prmp2*wcos + Hwr*wr_prmp2 + Hwr_prmp2*wr + s3*w_prmp2 + s3_prmp2*w
Hs_prmp3 = HSOL_prmp3 + HSONL_prmp3 + Hwcos*wcos_prmp3 + Hwcos_prmp3*wcos + Hwr*wr_prmp3 + Hwr_prmp3*wr + s3*w_prmp3 + s3_prmp3*w
Hss_prmx = u3*(3.0*sn*sn_prmx - 1.0*sx*sx_prmx - 1.0*sy*sy_prmx - 1.0*sz*sz_prmx) + u3_prmx*(1.5*sn**2 - 0.5*sx**2 - 0.5*sy**2 - 0.5*sz**2)
Hss_prmp2 = u3*(3.0*sn*sn_prmp2 - 1.0*sx*sx_prmp2 - 1.0*sy*sy_prmp2 - 1.0*sz*sz_prmp2) + u3_prmp2*(1.5*sn**2 - 0.5*sx**2 - 0.5*sy**2 - 0.5*sz**2)
Hss_prmp3 = u3*(3.0*sn*sn_prmp3 - 1.0*sx*sx_prmp3 - 1.0*sy*sy_prmp3 - 1.0*sz*sz_prmp3) + u3_prmp3*(1.5*sn**2 - 0.5*sx**2 - 0.5*sy**2 - 0.5*sz**2)
dheffSSv2_prmx = chi2_prmx*coeff02dSS + chi2_prmx*coeff12dSS*eta + chi2_prmx*coeff22dSS*eta2 + chi2_prmx*coeff32dSS*eta3 + chi3_prmx*coeff03dSS + chi3_prmx*coeff13dSS*eta + chi3_prmx*coeff23dSS*eta2 + chi3_prmx*coeff33dSS*eta3 + chi_prmx*coeff01dSS + chi_prmx*coeff11dSS*eta + chi_prmx*coeff21dSS*eta2 + chi_prmx*coeff31dSS*eta3
dheffSSv2_prmp2 = chi2_prmp2*coeff02dSS + chi2_prmp2*coeff12dSS*eta + chi2_prmp2*coeff22dSS*eta2 + chi2_prmp2*coeff32dSS*eta3 + chi3_prmp2*coeff03dSS + chi3_prmp2*coeff13dSS*eta + chi3_prmp2*coeff23dSS*eta2 + chi3_prmp2*coeff33dSS*eta3 + chi_prmp2*coeff01dSS + chi_prmp2*coeff11dSS*eta + chi_prmp2*coeff21dSS*eta2 + chi_prmp2*coeff31dSS*eta3
dheffSSv2_prmp3 = chi2_prmp3*coeff02dSS + chi2_prmp3*coeff12dSS*eta + chi2_prmp3*coeff22dSS*eta2 + chi2_prmp3*coeff32dSS*eta3 + chi3_prmp3*coeff03dSS + chi3_prmp3*coeff13dSS*eta + chi3_prmp3*coeff23dSS*eta2 + chi3_prmp3*coeff33dSS*eta3 + chi_prmp3*coeff01dSS + chi_prmp3*coeff11dSS*eta + chi_prmp3*coeff21dSS*eta2 + chi_prmp3*coeff31dSS*eta3
H_prmx = Hns_prmx + Hs_prmx + Hss_prmx + dheffSSv2*eta*u4_prmx*(S1x**2 + S1y**2 + S1z**2 + S2x**2 + S2y**2 + S2z**2) + dheffSSv2_prmx*eta*u4*(S1x**2 + S1y**2 + S1z**2 + S2x**2 + S2y**2 + S2z**2)
H_prmp2 = Hns_prmp2 + Hs_prmp2 + Hss_prmp2 + dheffSSv2*eta*u4_prmp2*(S1x**2 + S1y**2 + S1z**2 + S2x**2 + S2y**2 + S2z**2) + dheffSSv2_prmp2*eta*u4*(S1x**2 + S1y**2 + S1z**2 + S2x**2 + S2y**2 + S2z**2)
H_prmp3 = Hns_prmp3 + Hs_prmp3 + Hss_prmp3 + dheffSSv2*eta*u4_prmp3*(S1x**2 + S1y**2 + S1z**2 + S2x**2 + S2y**2 + S2z**2) + dheffSSv2_prmp3*eta*u4*(S1x**2 + S1y**2 + S1z**2 + S2x**2 + S2y**2 + S2z**2)
Hreal_prmx = 0.707106781186548*H_prmx*eta/sp.sqrt(eta*(H - 1.0) + 0.5)
Hreal_prmp2 = 0.707106781186548*H_prmp2*eta/sp.sqrt(eta*(H - 1.0) + 0.5)
Hreal_prmp3 = 0.707106781186548*H_prmp3*eta/sp.sqrt(eta*(H - 1.0) + 0.5)
