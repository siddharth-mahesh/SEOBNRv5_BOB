import numpy as np
def v5HM_optimized_hamiltonian_first_derivatives(m1 , m2, r , prstar , pphi , chi1 , chi2 , a6 , dSO):
    tmp0 = ((r)*(r)*(r))
    tmp1 = m1 + m2
    tmp16 = ((r)*(r))
    tmp23 = (1.0/(r))
    tmp27 = ((pphi)*(pphi))
    tmp29 = ((m1)*(m1))
    tmp30 = ((m2)*(m2))
    tmp36 = ((r)*(r)*(r)*(r))
    tmp38 = ((pphi)*(pphi)*(pphi)*(pphi))
    tmp49 = np.power(r, -9.0/2.0)
    tmp50 = ((prstar)*(prstar)*(prstar)*(prstar))
    tmp52 = np.power(prstar, 6)
    tmp54 = np.power(r, -5.0/2.0)
    tmp55 = np.power(prstar, 8)
    tmp60 = ((m1)*(m1)*(m1))
    tmp61 = ((m2)*(m2)*(m2))
    tmp68 = np.log(r)
    tmp99 = ((r)*(r)*(r)*(r)*(r))
    tmp106 = 128.0*r
    tmp143 = ((prstar)*(prstar))
    tmp178 = np.power(r, -6)
    tmp198 = ((prstar)*(prstar)*(prstar))
    tmp199 = ((prstar)*(prstar)*(prstar)*(prstar)*(prstar))
    tmp200 = np.power(prstar, 7)
    tmp2 = (1.0/((tmp1)*(tmp1)))
    tmp5 = chi1*m1 + chi2*m2
    tmp10 = (1.0/(tmp0))
    tmp13 = (1.0/((tmp1)*(tmp1)*(tmp1)))
    tmp17 = (1.0/(tmp16))
    tmp18 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp19 = chi1*m1 - chi2*m2
    tmp37 = (1.0/(tmp36))
    tmp62 = np.power(tmp1, -6)
    tmp71 = ((m1)*(m1)*(m1)*(m1))*((m2)*(m2)*(m2)*(m2))/np.power(tmp1, 8)
    tmp87 = ((tmp68)*(tmp68))
    tmp104 = 8*r + 2*tmp0 + 4*tmp16 + 16.0
    tmp142 = (1.0/(tmp99))
    tmp157 = 7680*tmp99
    tmp183 = 8*r + 6*tmp16 + 8
    tmp201 = 4*tmp198
    tmp6 = ((tmp5)*(tmp5))
    tmp20 = tmp19*(m1 - m2)
    tmp24 = m1*m2*tmp2
    tmp28 = tmp17*tmp27
    tmp32 = tmp18*tmp29*tmp30
    tmp34 = tmp10*tmp27
    tmp40 = tmp5/tmp1
    tmp63 = tmp60*tmp61*tmp62
    tmp77 = 2*tmp23 + 1
    tmp138 = ((tmp19)*(tmp19))*tmp2
    tmp145 = 5787938193408*tmp87
    tmp169 = 3*tmp37
    tmp171 = 2*tmp10
    tmp173 = 4*tmp142
    tmp205 = 2*pphi*tmp17
    tmp207 = 4*((pphi)*(pphi)*(pphi))*tmp37
    tmp7 = tmp2*tmp6
    tmp15 = dSO*m1*m2*tmp13*tmp5
    tmp21 = -tmp13*((tmp5)*(tmp5)*(tmp5)) + tmp18*tmp20*tmp6
    tmp25 = (23.0/32.0)*tmp24 - 3.0/32.0
    tmp26 = -45.0/32.0*tmp24 - 15.0/32.0
    tmp31 = (109.0/192.0)*tmp18*tmp29*tmp30 - 177.0/32.0*tmp24 - 5.0/64.0
    tmp33 = -267.0/128.0*tmp24 - 1591.0/768.0*tmp32 + 59.0/256.0
    tmp35 = (75.0/128.0)*tmp24 + (345.0/256.0)*tmp32 + 105.0/256.0
    tmp41 = (11.0/32.0)*tmp24 + 3.0/32.0
    tmp42 = 15.0/32.0 - 9.0/32.0*tmp24
    tmp43 = -1.0/32.0*tmp24 + (103.0/192.0)*tmp32 + 5.0/64.0
    tmp44 = -35.0/128.0*tmp24 - 613.0/768.0*tmp32 - 59.0/256.0
    tmp45 = (75.0/256.0)*tmp18*tmp29*tmp30 - 45.0/128.0*tmp24 - 105.0/256.0
    tmp46 = tmp2*tmp20
    tmp53 = tmp24/np.power(r, 7.0/2.0)
    tmp57 = tmp23*tmp24
    tmp58 = 8*m1*m2*tmp2 - 6*tmp32
    tmp64 = (115888805356193.0/1250000000000.0)*tmp24 - 131*tmp32 + 10*tmp63
    tmp66 = -139150381847503.0/50000000000000.0*tmp24 - 27.0/5.0*tmp32 + 6*tmp60*tmp61*tmp62
    tmp69 = tmp24*(452542166996693.0/1000000000000.0 - 516952380952381.0/10000000000000.0*tmp68) + tmp32*((592.0/5.0)*tmp68 - 179613660498019.0/100000000000.0) + (150579635104141.0/250000000000.0)*tmp63
    tmp72 = -84945530542609.0/2500000000000.0*tmp24 - 447649163680617.0/5000000000000.0*tmp32 + 188*tmp60*tmp61*tmp62 - 14*tmp71
    tmp74 = (4343054718629.0/3125000000000.0)*tmp24 + (166921011824161.0/50000000000000.0)*tmp32 + (342857142857143.0/100000000000000.0)*tmp63 - 6*tmp71
    tmp88 = r*tmp24
    tmp90 = 14700*tmp24 + 42911.0
    tmp92 = r*tmp32
    tmp101 = tmp63*(-163683964822551.0/1000000.0*r - 3566651379711.0/200000.0*tmp16 - 59449372951581.0/50000.0)
    tmp102 = tmp32*(-39321600*a6*(3*r + 59.0) + (186464462028901.0/250000.0)*a6 + (122635399361987.0/1000.0)*r - 308925070376879.0/50000.0*tmp0 + (206478381132587.0/100000.0)*tmp16 - 308925070376879.0/100000.0*tmp36 + (3566651379711.0/2500.0)*tmp99 + 276057889687011.0/1000.0)
    tmp110 = tmp24*(7680*a6*(tmp104 + tmp36) + (113485217444961.0/1000000000.0)*r*(tmp104 - tmp36) + (7402203300817.0/50000000000.0)*r*(7704*r + 1926*tmp0 + 3852*tmp16 + 349*tmp36 + 36400.0) + tmp106*((33046962773603.0/2500000000.0)*r + (42646962773603.0/10000000000.0)*tmp0 + (852939255472061.0/100000000000.0)*tmp16 - 137046962773603.0/20000000000.0*tmp36 - 42153037226397.0/1250000000.0))
    tmp111 = 588*tmp24 + 1079.0
    tmp116 = tmp24*tmp68
    tmp125 = -7876452485916241.0/12500000.0*tmp24 - 98886748396767.0/500000.0*tmp32 + 580530436787913.0/100000.0
    tmp127 = -53511513369581.0/20000000.0*tmp24 - 138240*tmp32 - 52783413229329.0/10000000.0
    tmp129 = tmp24*(-31383302728516087.0/12500000.0*tmp24 - 426364516032331.0/10000000.0*tmp32 + 14515200*tmp63 + 100201376401019.0/100000.0)
    tmp130 = ((1 - 0.49694878161693501*tmp24)*(1 - 0.49694878161693501*tmp24))
    tmp137 = tmp13*tmp20*tmp5
    tmp170 = 2*tmp34
    tmp186 = -1759846072320*r - 4161798144000*tmp24 - 12148770078720.0
    tmp8 = tmp0 + tmp7*(r + 2)
    tmp22 = (1.0/4.0)*tmp17*tmp21
    tmp47 = tmp40*(tmp17*tmp31 + tmp23*tmp25 + tmp26*tmp28 + tmp33*tmp34 + tmp35*tmp37*tmp38 + 7.0/4.0) + tmp46*(tmp17*tmp43 + tmp23*tmp41 + tmp28*tmp42 + tmp34*tmp44 + tmp37*tmp38*tmp45 + 1.0/4.0)
    tmp84 = tmp17*tmp7
    tmp91 = r*tmp90
    tmp113 = 756*tmp24 + 1079.0
    tmp119 = 336*r + 756*tmp24 + 407.0
    tmp131 = (866182644304933.0/10.0)*tmp130 + 43393301259014.688*tmp24 + (3369809522332764779.0/78125.0)*tmp32 + (296393260946151.0/50.0)*tmp63 + 188440788778196.0
    tmp133 = 49152*r*((16368307925443.0/40000.0)*tmp24 + 102574080*tmp32 - 105983591868019.0/50000.0) + 879923036160*tmp0 + 283115520*tmp16*tmp90 - 1698693120*tmp24*(11592*tmp24 + 69847.0)
    tmp139 = tmp137*((45.0/8.0)*tmp24 - 5.0/16.0) + tmp138*((75.0/32.0)*m1*m2*tmp2 - 15.0/8.0*tmp32 - 15.0/32.0) + tmp7*((165.0/32.0)*tmp24 - 5*tmp32 + 25.0/32.0)
    tmp152 = -21.0/8.0*tmp137 + tmp138*((3.0/4.0)*tmp24 - 3.0/16.0) + tmp7*(3*tmp24 + 45.0/16.0)
    tmp153 = tmp137*((13.0/16.0)*tmp24 + 449.0/32.0) + tmp138*((115.0/64.0)*tmp24 + (1.0/16.0)*tmp32 - 37.0/64.0) + tmp7*(-1171.0/64.0*tmp24 - 861.0/64.0)
    tmp162 = tmp137*(117.0/32.0 - 39.0/16.0*tmp24) + tmp138*((21.0/16.0)*tmp18*tmp29*tmp30 - 81.0/64.0*tmp24 - 9.0/64.0) + tmp7*(-175.0/64.0*tmp24 - 225.0/64.0)
    tmp163 = -5.0/4.0*tmp137 + tmp138*((1.0/2.0)*tmp24 + 1.0/8.0) + (9.0/8.0)*tmp7
    tmp177 = -tmp171*tmp7
    tmp9 = (1.0/(tmp8))
    tmp48 = pphi*tmp10*tmp15 + pphi*tmp22 + pphi*tmp47
    tmp79 = tmp16 + tmp7*tmp77
    tmp85 = tmp84 + 1
    tmp95 = -879923036160*tmp16 - 253929149957443.0/10.0*tmp24 - 5041721180160*tmp32 - 283115520*tmp91 + 104186110149937.0
    tmp120 = 2048.0*m1*m2*tmp119*tmp2*tmp68 + 28*m1*m2*tmp2*(1920*a6 + 733955307463037.0/1000000000.0) - 7.0*r*((938918400156317.0/1000000000.0)*m1*m2*tmp2 - 185763092693281.0/1000000000.0*tmp32 - 245760.0) - 270820329770593.0/50000000.0*tmp32 - 3440640.0
    tmp160 = tmp77*tmp84 + 1
    tmp189 = tmp68*(2639769108480*tmp16 + (12570860486740224.0/625.0)*tmp24 + 5041721180160*tmp32 + 566231040*tmp91 - 325581594218554368.0/3125.0)
    tmp80 = (1.0/(tmp79))
    tmp86 = ((tmp85)*(tmp85)*(tmp85)*(tmp85))
    tmp115 = 240*r*(-373313530533103.0/50000000000.0*tmp24 - 3024*tmp32 + 17264.0) + 960*tmp0*tmp113 + 1920*tmp111*tmp16 + 480*tmp113*tmp36 - 388422414769507.0/10000000.0*tmp24 - 47061405915993.0/25000000.0*tmp32 + 161280*tmp99 + 13447680.0
    tmp135 = (1.0/5787938193408.0)*r*tmp131 + r*tmp87 - 1.6718906934806428e-7*tmp0*tmp127 - 1.5922768509339455e-9*tmp125*tmp16 + (3.0/314015744.0)*tmp129 + (1.0/5787938193408.0)*tmp133*tmp68
    tmp144 = ((tmp85)*(tmp85))
    tmp146 = r*tmp131 + r*tmp145 - 967680.0*tmp0*tmp127 - 9216.0*tmp125*tmp16 + 55296*tmp129 + tmp133*tmp68
    tmp161 = (1.0/(tmp160))
    tmp195 = -18432.0*r*tmp125 - 2903040.0*tmp127*tmp16 + tmp131 + tmp133*tmp23 + tmp145 + tmp189 + 11575876386816*tmp68
    tmp196 = (510774533137571.0/50.0)*r - tmp186*tmp68 + 11575876386816*tmp23*tmp68 - tmp23*tmp95 + (29035754444081779.0/5000.0)*tmp24 + (182268054644921.0/100.0)*tmp32 + (258910106287381.0/50.0)*tmp88 + 267544166400*tmp92 - 53501685054374.008
    tmp82 = -tmp77*tmp80
    tmp97 = -0.14352105046684044*r + 0.0094128916415248589*tmp16*tmp24 + 0.00048633950287942822*tmp16*tmp32 + 0.018569631763766858*tmp16 - 0.04380844244600398*tmp24 + 0.29106204142837921*tmp32 + 0.024469282648975563*tmp63 - 3.6355829351353647e-15*tmp68*tmp95 + 0.021042529325572337*tmp87 + 0.038579573843421422*tmp88 - 1.18824456940711e-6*tmp91 + 0.0066265062908739489*tmp92 + 1
    tmp136 = ((tmp135)*(tmp135))
    tmp148 = (182268054644921.0/100.0)*r*tmp32 - 197383821284628.0/5.0*r + tmp145 + (258910106287381.0/100.0)*tmp16*tmp24 + 133772083200*tmp16*tmp32 + (510774533137571.0/100.0)*tmp16 - 60249543508726.0/5.0*tmp24 + (400296247701391.0/5.0)*tmp32 + (336524885906151.0/50.0)*tmp63 - tmp68*tmp95 + (53058305272831.0/5.0)*tmp88 - 163418713120743.0/500000.0*tmp91 + 275059053208689.0
    tmp154 = (1.0/(tmp146))
    tmp98 = (1.0/((tmp97)*(tmp97)))
    tmp118 = (1.0/(1120*tmp101 + 7.0*tmp102 + 53760*tmp110 + 32768.0*tmp115*tmp116 + 67645734912*tmp32*tmp87 + (241555486248807.0/1000.0)*tmp71 + 13212057600*tmp99))
    tmp149 = (1.0/(tmp148))
    tmp155 = tmp148*tmp154
    tmp184 = tmp120*(-32768.0*tmp115*tmp57 - 32768.0*tmp116*(3840*r*tmp111 + 1920*tmp0*tmp113 + 2880*tmp113*tmp16 - 1119940591599309.0/625000000.0*tmp24 - 725760*tmp32 + 806400*tmp36 + 4143360.0) - 135291469824*tmp23*tmp32*tmp68 - 53760*tmp24*(7680*a6*(4*tmp0 + tmp183) + (113485217444961.0/1000000000.0)*r*(-4*tmp0 + tmp183) + (7402203300817.0/50000000000.0)*r*(7704*r + 1396*tmp0 + 5778*tmp16 + 7704) + 3740417.7181580449*r + 1057984.4295395112*tmp0 + tmp106*((852939255472061.0/50000000000.0)*r - 137046962773603.0/5000000000.0*tmp0 + (127940888320809.0/10000000000.0)*tmp16 + 33046962773603.0/2500000000.0) + 2115968.8590790238*tmp16 - 938918.40015631763*tmp36 + 2888096.4701310992) - 7.0*tmp32*(-117964800*a6 + (206478381132587.0/50000.0)*r - 308925070376879.0/25000.0*tmp0 - 926775211130637.0/50000.0*tmp16 + (3566651379711.0/500.0)*tmp36 + 122635399361987.0/1000.0) - 66060288000*tmp36 - 1120*tmp63*(-3566651379711.0/100000.0*r - 163683964822551.0/1000000.0))/(((1120000.0/241555486248807.0)*tmp101 + 2.8978849160932984e-11*tmp102 + (17920000.0/80518495416269.0)*tmp110 + 1.3565413275792173e-7*tmp115*tmp116 + (22548578304000.0/80518495416269.0)*tmp32*tmp87 + tmp71 + (4404019200000.0/80518495416269.0)*tmp99)*((1120000.0/241555486248807.0)*tmp101 + 2.8978849160932984e-11*tmp102 + (17920000.0/80518495416269.0)*tmp110 + 1.3565413275792173e-7*tmp115*tmp116 + (22548578304000.0/80518495416269.0)*tmp32*tmp87 + tmp71 + (4404019200000.0/80518495416269.0)*tmp99))
    tmp121 = tmp118*tmp120
    tmp179 = tmp118*(688128.0*tmp116 + 2048.0*tmp119*tmp57 - 6572428.8010942191*tmp24 + 1300341.6488529672*tmp32 + 1720320.0)
    tmp185 = tmp184*tmp36
    tmp123 = 7680*tmp121*tmp36 + tmp84
    tmp180 = tmp0*tmp121
    tmp124 = (1.0/((tmp123)*(tmp123)*(tmp123)*(tmp123)))
    tmp151 = (1.0/((tmp123)*(tmp123)))
    tmp158 = tmp10*tmp152 + tmp121*tmp155*tmp157 + tmp153*tmp37 + tmp84
    tmp164 = tmp123 + tmp142*tmp162 + tmp163*tmp37
    tmp140 = tmp124*tmp136*tmp139*tmp50*tmp98
    tmp192 = tmp146*tmp149*tmp151
    tmp159 = tmp10*tmp50*tmp64 + tmp10*tmp52*tmp72 + 0.0004427880404175718*tmp140*tmp142*tmp86 + tmp143*tmp144*tmp146*tmp149*tmp151*tmp158*tmp23 + tmp17*tmp50*tmp58 + tmp17*tmp52*tmp66 + tmp17*tmp55*tmp74 + (73721876495073.0/500000000000.0)*tmp24*tmp49*tmp50 + (29655068404873.0/20000000000000.0)*tmp24*tmp54*tmp55 + tmp28*tmp7*tmp82 + tmp28 + tmp37*tmp50*tmp69 - 113175085791863.0/10000000000000.0*tmp52*tmp53 + (121954868780449.0/1000000000000000.0)*tmp55*tmp57 + 1
    tmp166 = np.sqrt(tmp159*tmp161*tmp164)
    tmp167 = np.sqrt(2*tmp24*(tmp166 + tmp48*tmp9 - 1) + 1)
    tmp197 = tmp166/tmp159
    tmp168 = (1.0/(tmp167))
    Hreal = tmp167
    xi = tmp123*np.sqrt(r*tmp155)/tmp85
    dHreal_dr = tmp168*(tmp160*tmp197*((1.0/2.0)*tmp159*tmp161*(-5*tmp162*tmp178 - tmp163*tmp173 + tmp177 + 7680*tmp179*tmp36 + 30720*tmp180 + (2560000000.0/19449684312299195890769641083.0)*tmp185) + (1.0/2.0)*tmp159*tmp164*(tmp171*tmp7*tmp77 + 2*tmp37*tmp7)/((tmp160)*(tmp160)) + (1.0/2.0)*tmp161*tmp164*((792225600543041.0/20000000000000.0)*m1*m2*tmp2*tmp49*tmp52 - 2*tmp10*tmp50*tmp58 + 0.0004427880404175718*tmp124*tmp135*tmp139*tmp142*tmp50*tmp86*tmp98*(-6.3691074037357819e-9*r*tmp125 - 1.0031344160883857e-6*tmp127*tmp16 + (866182644304933.0/28939690967040.0)*tmp130 + (1.0/2893969096704.0)*tmp133*tmp23 + (1.0/2893969096704.0)*tmp189 + 14.994389991391477*tmp24 + (3369809522332764779.0/226091335680000000.0)*tmp32 + (98797753648717.0/48232818278400.0)*tmp63 + 4*tmp68 + 2*tmp87 + 65.114996906088265) + 0.0004427880404175718*tmp124*tmp136*tmp139*tmp142*tmp50*tmp86*(-0.074278527055067434*r + 7.2711658702707293e-15*tmp186*tmp68 - 0.084170117302289349*tmp23*tmp68 + 7.2711658702707293e-15*tmp23*tmp95 - 0.04222475734627381*tmp24 - 0.013253012581747898*tmp32 - 0.037651566566099436*tmp88 - 0.0019453580115177129*tmp92 + 0.38901962636933785)/((tmp97)*(tmp97)*(tmp97)) - 0.0022139402020878588*tmp140*tmp178*tmp86 + tmp143*tmp144*tmp146*tmp149*tmp151*tmp23*(tmp121*tmp154*tmp157*tmp196 + 38400*tmp121*tmp155*tmp36 - 5.0/21810044616348348186624.0*tmp121*tmp148*tmp195*tmp99/tmp136 - tmp152*tmp169 - tmp153*tmp173 + tmp155*tmp157*tmp179 + (2560000000.0/19449684312299195890769641083.0)*tmp155*tmp184*tmp99 + tmp177) + tmp143*tmp144*tmp151*tmp158*(-tmp146*tmp149*tmp17 - 1.3217463278247474e-29*tmp146*tmp196*tmp23*tmp98 + tmp149*tmp195*tmp23) - 4*tmp143*tmp158*tmp192*tmp37*tmp7*tmp85 - tmp169*tmp52*tmp72 - tmp17*tmp2*tmp27*tmp6*tmp77*(-2*r + 2*tmp17*tmp2*tmp6)/((tmp79)*(tmp79)) - 121954868780449.0/1000000000000000.0*tmp17*tmp24*tmp55 - tmp170*tmp7*tmp82 - tmp170 - tmp171*tmp52*tmp66 - tmp171*tmp55*tmp74 - tmp173*tmp50*tmp69 + 2*tmp2*tmp27*tmp37*tmp6*tmp80 - 3*tmp37*tmp50*tmp64 + tmp37*tmp50*((592.0/5.0)*tmp23*tmp32 - 516952380952381.0/10000000000000.0*tmp57) - 29655068404873.0/8000000000000.0*tmp53*tmp55 + tmp143*tmp144*tmp146*tmp149*tmp158*tmp23*(4*tmp10*tmp2*tmp6 - 15360*tmp179*tmp36 - 61440*tmp180 - 5120000000.0/19449684312299195890769641083.0*tmp185)/((tmp123)*(tmp123)*(tmp123)) + 0.0004427880404175718*tmp136*tmp139*tmp142*tmp50*tmp86*tmp98*(8*tmp10*tmp2*tmp6 - 30720*tmp179*tmp36 - 122880*tmp180 - 10240000000.0/19449684312299195890769641083.0*tmp185)/((tmp123)*(tmp123)*(tmp123)*(tmp123)*(tmp123)) - 0.0035423043233405744*tmp140*tmp7*((tmp85)*(tmp85)*(tmp85))/np.power(r, 8) - 663496888455657.0/1000000000000.0*tmp24*tmp50/np.power(r, 11.0/2.0)))/tmp164 + tmp48*(-3*tmp16 - tmp7)/((tmp8)*(tmp8)) + tmp9*(-1.0/2.0*pphi*tmp10*tmp21 - pphi*tmp15*tmp169 + pphi*(tmp40*(-tmp169*tmp27*tmp33 - tmp17*tmp25 - tmp170*tmp26 - tmp171*tmp31 - tmp173*tmp35*tmp38) + tmp46*(-tmp169*tmp27*tmp44 - tmp17*tmp41 - tmp170*tmp42 - tmp171*tmp43 - tmp173*tmp38*tmp45))))
    dHreal_dprstar = (1.0/2.0)*tmp168*tmp197*(2*prstar*tmp144*tmp158*tmp192*tmp23 + 6*tmp10*tmp199*tmp72 + tmp10*tmp201*tmp64 + 0.0017711521616702872*tmp124*tmp136*tmp139*tmp142*tmp198*tmp86*tmp98 + 6*tmp17*tmp199*tmp66 + 8*tmp17*tmp200*tmp74 + tmp17*tmp201*tmp58 + (73721876495073.0/125000000000.0)*tmp198*tmp24*tmp49 - 339525257375589.0/5000000000000.0*tmp199*tmp53 + (29655068404873.0/2500000000000.0)*tmp200*tmp24*tmp54 + (121954868780449.0/125000000000000.0)*tmp200*tmp57 + tmp201*tmp37*tmp69)
    dHreal_dpphi = tmp168*((1.0/2.0)*tmp197*(2*pphi*tmp82*tmp84 + tmp205) + tmp9*(pphi*(tmp40*(pphi*tmp171*tmp33 + tmp205*tmp26 + tmp207*tmp35) + tmp46*(pphi*tmp171*tmp44 + tmp205*tmp42 + tmp207*tmp45)) + tmp10*tmp15 + tmp22 + tmp47))
    return np.array([dHreal_dr, 0., dHreal_dprstar, dHreal_dpphi]) , Hreal , xi
