import numpy as np
def v5HM_optimized_hamiltonian_circular_derivatives(m1 , m2, r , prstar , pphi , chi1 , chi2 , a6 , dSO):
    tmp0 = ((r)*(r)*(r))
    tmp1 = m1 + m2
    tmp16 = ((r)*(r))
    tmp23 = (1.0/(r))
    tmp27 = ((pphi)*(pphi))
    tmp29 = ((m1)*(m1))
    tmp30 = ((m2)*(m2))
    tmp36 = ((r)*(r)*(r)*(r))
    tmp38 = ((pphi)*(pphi)*(pphi)*(pphi))
    tmp53 = ((r)*(r)*(r)*(r)*(r))
    tmp57 = np.log(r)
    tmp59 = ((m1)*(m1)*(m1))
    tmp60 = ((m2)*(m2)*(m2))
    tmp67 = 128.0*r
    tmp2 = (1.0/((tmp1)*(tmp1)))
    tmp5 = chi1*m1 + chi2*m2
    tmp10 = (1.0/(tmp0))
    tmp13 = (1.0/((tmp1)*(tmp1)*(tmp1)))
    tmp17 = (1.0/(tmp16))
    tmp18 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp19 = chi1*m1 - chi2*m2
    tmp37 = (1.0/(tmp36))
    tmp54 = (1.0/(tmp53))
    tmp56 = ((m1)*(m1)*(m1)*(m1))*((m2)*(m2)*(m2)*(m2))/np.power(tmp1, 8)
    tmp61 = np.power(tmp1, -6)
    tmp65 = 8*r + 2*tmp0 + 4*tmp16 + 16.0
    tmp85 = 2*tmp23 + 1
    tmp108 = 8*r + 6*tmp16 + 8
    tmp6 = ((tmp5)*(tmp5))
    tmp20 = tmp19*(m1 - m2)
    tmp24 = m1*m2*tmp2
    tmp28 = tmp17*tmp27
    tmp32 = tmp18*tmp29*tmp30
    tmp34 = tmp10*tmp27
    tmp40 = tmp5/tmp1
    tmp50 = ((tmp19)*(tmp19))*tmp2
    tmp62 = tmp59*tmp60*tmp61*(-163683964822551.0/1000000.0*r - 3566651379711.0/200000.0*tmp16 - 59449372951581.0/50000.0)
    tmp99 = 2*tmp10
    tmp111 = 2*pphi*tmp17
    tmp113 = 4*((pphi)*(pphi)*(pphi))*tmp37
    tmp7 = tmp2*tmp6
    tmp15 = dSO*m1*m2*tmp13*tmp5
    tmp21 = -tmp13*((tmp5)*(tmp5)*(tmp5)) + tmp18*tmp20*tmp6
    tmp25 = (23.0/32.0)*tmp24 - 3.0/32.0
    tmp26 = -45.0/32.0*tmp24 - 15.0/32.0
    tmp31 = (109.0/192.0)*tmp18*tmp29*tmp30 - 177.0/32.0*tmp24 - 5.0/64.0
    tmp33 = -267.0/128.0*tmp24 - 1591.0/768.0*tmp32 + 59.0/256.0
    tmp35 = (75.0/128.0)*tmp24 + (345.0/256.0)*tmp32 + 105.0/256.0
    tmp41 = (11.0/32.0)*tmp24 + 3.0/32.0
    tmp42 = 15.0/32.0 - 9.0/32.0*tmp24
    tmp43 = -1.0/32.0*tmp24 + (103.0/192.0)*tmp32 + 5.0/64.0
    tmp44 = -35.0/128.0*tmp24 - 613.0/768.0*tmp32 - 59.0/256.0
    tmp45 = (75.0/256.0)*tmp18*tmp29*tmp30 - 45.0/128.0*tmp24 - 105.0/256.0
    tmp46 = tmp2*tmp20
    tmp51 = tmp13*tmp20*tmp5
    tmp58 = tmp32*((tmp57)*(tmp57))
    tmp63 = tmp32*(-39321600*a6*(3*r + 59.0) + (186464462028901.0/250000.0)*a6 + (122635399361987.0/1000.0)*r - 308925070376879.0/50000.0*tmp0 + (206478381132587.0/100000.0)*tmp16 - 308925070376879.0/100000.0*tmp36 + (3566651379711.0/2500.0)*tmp53 + 276057889687011.0/1000.0)
    tmp71 = tmp24*(7680*a6*(tmp36 + tmp65) + (113485217444961.0/1000000000.0)*r*(-tmp36 + tmp65) + (7402203300817.0/50000000000.0)*r*(7704*r + 1926*tmp0 + 3852*tmp16 + 349*tmp36 + 36400.0) + tmp67*((33046962773603.0/2500000000.0)*r + (42646962773603.0/10000000000.0)*tmp0 + (852939255472061.0/100000000000.0)*tmp16 - 137046962773603.0/20000000000.0*tmp36 - 42153037226397.0/1250000000.0))
    tmp72 = 588*tmp24 + 1079.0
    tmp77 = tmp24*tmp57
    tmp98 = 2*tmp34
    tmp101 = 3*tmp27*tmp37
    tmp103 = 4*tmp38*tmp54
    tmp8 = tmp0 + tmp7*(r + 2)
    tmp22 = (1.0/4.0)*tmp17*tmp21
    tmp47 = tmp40*(tmp17*tmp31 + tmp23*tmp25 + tmp26*tmp28 + tmp33*tmp34 + tmp35*tmp37*tmp38 + 7.0/4.0) + tmp46*(tmp17*tmp43 + tmp23*tmp41 + tmp28*tmp42 + tmp34*tmp44 + tmp37*tmp38*tmp45 + 1.0/4.0)
    tmp52 = tmp50*((1.0/2.0)*tmp24 + 1.0/8.0) - 5.0/4.0*tmp51 + (9.0/8.0)*tmp7
    tmp55 = tmp50*((21.0/16.0)*tmp18*tmp29*tmp30 - 81.0/64.0*tmp24 - 9.0/64.0) + tmp51*(117.0/32.0 - 39.0/16.0*tmp24) + tmp7*(-175.0/64.0*tmp24 - 225.0/64.0)
    tmp74 = 756*tmp24 + 1079.0
    tmp80 = 336*r + 756*tmp24 + 407.0
    tmp86 = tmp7*tmp85
    tmp9 = (1.0/(tmp8))
    tmp48 = pphi*tmp10*tmp15 + pphi*tmp22 + pphi*tmp47
    tmp81 = 2048.0*m1*m2*tmp2*tmp57*tmp80 + 28*m1*m2*tmp2*(1920*a6 + 733955307463037.0/1000000000.0) - 7.0*r*((938918400156317.0/1000000000.0)*m1*m2*tmp2 - 185763092693281.0/1000000000.0*tmp32 - 245760.0) - 270820329770593.0/50000000.0*tmp32 - 3440640.0
    tmp87 = tmp17*tmp86 + 1
    tmp76 = 240*r*(-373313530533103.0/50000000000.0*tmp24 - 3024*tmp32 + 17264.0) + 960*tmp0*tmp74 + 1920*tmp16*tmp72 - 388422414769507.0/10000000.0*tmp24 - 47061405915993.0/25000000.0*tmp32 + 480*tmp36*tmp74 + 161280*tmp53 + 13447680.0
    tmp88 = (1.0/(tmp87))
    tmp90 = (1.0/(tmp16 + tmp86))
    tmp92 = -tmp85*tmp90
    tmp79 = (1.0/(13212057600*tmp53 + (241555486248807.0/1000.0)*tmp56 + 67645734912*tmp58 + 1120*tmp62 + 7.0*tmp63 + 53760*tmp71 + 32768.0*tmp76*tmp77))
    tmp94 = tmp28*tmp7*tmp92 + tmp28 + 1
    tmp84 = tmp17*tmp7 + 7680*tmp36*tmp79*tmp81 + tmp37*tmp52 + tmp54*tmp55
    tmp96 = np.sqrt(tmp84*tmp88*tmp94)
    tmp97 = (1.0/np.sqrt(2*tmp24*(tmp48*tmp9 + tmp96 - 1) + 1))
    tmp109 = tmp96/tmp94
    dHreal_dr_circ = tmp97*(tmp109*tmp87*((1.0/2.0)*tmp84*tmp88*(2*tmp27*tmp37*tmp7*tmp90 - tmp28*tmp7*tmp85*(-2*r + 2*tmp17*tmp2*tmp6)/((tmp16 + tmp86)*(tmp16 + tmp86)) - tmp7*tmp92*tmp98 - tmp98) + (1.0/2.0)*tmp84*tmp94*(2*tmp37*tmp7 + tmp86*tmp99)/((tmp87)*(tmp87)) + (1.0/2.0)*tmp88*tmp94*(30720*tmp0*tmp79*tmp81 + 7680*tmp36*tmp79*(2048.0*tmp23*tmp24*tmp80 - 6572428.8010942191*tmp24 + 1300341.6488529672*tmp32 + 688128.0*tmp77 + 1720320.0) + (2560000000.0/19449684312299195890769641083.0)*tmp36*tmp81*(-32768.0*tmp23*tmp24*tmp76 - 135291469824*tmp23*tmp32*tmp57 - 53760*tmp24*(7680*a6*(4*tmp0 + tmp108) + (113485217444961.0/1000000000.0)*r*(-4*tmp0 + tmp108) + (7402203300817.0/50000000000.0)*r*(7704*r + 1396*tmp0 + 5778*tmp16 + 7704) + 3740417.7181580449*r + 1057984.4295395112*tmp0 + 2115968.8590790238*tmp16 - 938918.40015631763*tmp36 + tmp67*((852939255472061.0/50000000000.0)*r - 137046962773603.0/5000000000.0*tmp0 + (127940888320809.0/10000000000.0)*tmp16 + 33046962773603.0/2500000000.0) + 2888096.4701310992) - 7.0*tmp32*(-117964800*a6 + (206478381132587.0/50000.0)*r - 308925070376879.0/25000.0*tmp0 - 926775211130637.0/50000.0*tmp16 + (3566651379711.0/500.0)*tmp36 + 122635399361987.0/1000.0) - 66060288000*tmp36 - 1120*tmp59*tmp60*tmp61*(-3566651379711.0/100000.0*r - 163683964822551.0/1000000.0) - 32768.0*tmp77*(3840*r*tmp72 + 1920*tmp0*tmp74 + 2880*tmp16*tmp74 - 1119940591599309.0/625000000.0*tmp24 - 725760*tmp32 + 806400*tmp36 + 4143360.0))/(((4404019200000.0/80518495416269.0)*tmp53 + tmp56 + (22548578304000.0/80518495416269.0)*tmp58 + (1120000.0/241555486248807.0)*tmp62 + 2.8978849160932984e-11*tmp63 + (17920000.0/80518495416269.0)*tmp71 + 1.3565413275792173e-7*tmp76*tmp77)*((4404019200000.0/80518495416269.0)*tmp53 + tmp56 + (22548578304000.0/80518495416269.0)*tmp58 + (1120000.0/241555486248807.0)*tmp62 + 2.8978849160932984e-11*tmp63 + (17920000.0/80518495416269.0)*tmp71 + 1.3565413275792173e-7*tmp76*tmp77)) - 4*tmp52*tmp54 - tmp7*tmp99 - 5*tmp55/np.power(r, 6)))/tmp84 + tmp48*(-3*tmp16 - tmp7)/((tmp8)*(tmp8)) + tmp9*(-1.0/2.0*pphi*tmp10*tmp21 - 3*pphi*tmp15*tmp37 + pphi*(tmp40*(-tmp101*tmp33 - tmp103*tmp35 - tmp17*tmp25 - tmp26*tmp98 - tmp31*tmp99) + tmp46*(-tmp101*tmp44 - tmp103*tmp45 - tmp17*tmp41 - tmp42*tmp98 - tmp43*tmp99))))
    dHreal_dpphi_circ = tmp97*((1.0/2.0)*tmp109*(2*pphi*tmp17*tmp7*tmp92 + tmp111) + tmp9*(pphi*(tmp40*(pphi*tmp33*tmp99 + tmp111*tmp26 + tmp113*tmp35) + tmp46*(pphi*tmp44*tmp99 + tmp111*tmp42 + tmp113*tmp45)) + tmp10*tmp15 + tmp22 + tmp47))
    return np.array([dHreal_dr, dHreal_dpphi])
