import numpy as np
def v5HM_unoptimized_dH_dr(m1, m2, r, phi, prstar, pphi, chi1, chi2,verbose = False):
    u = 1/r
    M = m1+m2
    delta = (m1-m2)/M
    eta = m1*m2/(M**2)
    a6 = 41.7877875-3021.93382*eta+33414.4394*eta**2-169019.14*eta**3+329523.262*eta**4
    gam = (np.divide(1,4)+(pphi**2/r**2)*(np.divide(15,32)-np.divide(9,32)*eta)+(1/r)*(np.divide(11,32)*eta+np.divide(3,32))+(pphi**4/r**4)*(np.divide(75,256)*eta**2-np.divide(45,128)*eta-np.divide(105,256))+(pphi**2/r**3)*(-np.divide(613,768)*eta**2-np.divide(35,128)*eta-np.divide(59,256))+(1/r**2)*(np.divide(103,192)*eta**2-np.divide(1,32)*eta+np.divide(5,64)))
    gap = (np.divide(7,4)+(pphi**2/r**2)*(-np.divide(45,32)*eta-np.divide(15,32))+(1/r)*(np.divide(23,32)*eta-np.divide(3,32))+(pphi**4/r**4)*(np.divide(345,256)*eta**2+np.divide(75,128)*eta+np.divide(105,256))+(pphi**2/r**3)*(-np.divide(1591,768)*eta**2-np.divide(267,128)*eta+np.divide(59,256))+(1/r**2)*(np.divide(109,192)*eta**2-np.divide(177,32)*eta-np.divide(5,64)))
    am = (m1*chi1-m2*chi2)/M
    ap = (m1*chi1+m2*chi2)/M
    Qnosterm3 = (prstar**8)*(u*eta*(-np.divide(35772,175)+np.divide(21668992,45)*np.log(2)+np.divide(6591861,350)*np.log(3)-np.divide(27734375,126)*np.log(5))+u**2*(-6*eta**4+np.divide(24,7)*eta**3+eta**2*(np.divide(870976,525)+np.divide(703189497728,33075)*np.log(2)+np.divide(332067403089,39200)*np.log(3)-np.divide(13841287201,4320)*np.log(7)-np.divide(468490234375,42336)*np.log(5))+eta*(-np.divide(2222547,2450)-np.divide(1347019456,525)*np.log(2)+np.divide(278690984375,169344)*np.log(5)+np.divide(13841287201,17280)*np.log(7)-np.divide(346536085761,156800)*np.log(3)))+np.divide(5994461,12700800)*np.pi*eta*u**(np.divide(5,2)))
    Qnosterm2 = (prstar**6)*(u**2*(6*eta**3-np.divide(27,5)*eta**2+eta*(-np.divide(827,3)-np.divide(2358912,25)*np.log(2)+np.divide(1399437,50)*np.log(3)+np.divide(390625,18)*np.log(5)))+u**3*(-14*eta**4+188*eta**3+eta**2*(np.divide(154229,75)-np.divide(4998308864,1575)*np.log(2)+np.divide(26171875,18)*np.log(5)-np.divide(45409167,350)*np.log(3))+eta*(-np.divide(860317,1050)+np.divide(305146624,945)*np.log(2)+np.divide(35643726,175)*np.log(3)-np.divide(52468750,189)*np.log(5)))-np.divide(2723471,756000)*np.pi*eta*u**(np.divide(7,2)))
    Qnosterm1 = (prstar**4)*(2*(4-3*eta)*eta*u**2+u**3*(10*eta**3-131*eta**2+eta*(-np.divide(4348,15)+np.divide(496256,45)*np.log(2)-np.divide(33048,5)*np.log(3)))+u**4*((792-np.divide(615,32)*np.pi**2)*eta**3+eta**2*(-np.divide(592,5)*np.log(u)+np.divide(31633,512)*np.pi**2-np.divide(1184,5)*np.euler_gamma+np.divide(45683,105)+np.divide(33693536,105)*np.log(2)-np.divide(6396489,70)*np.log(3)-np.divide(9765625,126)*np.log(5))+eta*(np.divide(5428,105)*np.log(u)+np.divide(1249177,1050)-np.divide(93031,1536)*np.pi**2+np.divide(10856,105)*np.euler_gamma-np.divide(4396376,105)*np.log(2)+np.divide(9765625,504)*np.log(5)-np.divide(601911,280)*np.log(3)))+np.divide(88703,1890)*np.pi*eta*u**(np.divide(9,2)))
    Qnos = Qnosterm1+Qnosterm2+Qnosterm3
    d5 = 0
    Dnons = r*(6730497718123.02*eta**3+22295347200.0*eta**2*d5+133772083200.0*eta**2*r**2+1822680546449.21*eta**2*r+80059249540278.2*eta**2+22295347200.0*eta*d5*r-193226342400.0*eta*d5+2589101062873.81*eta*r**2+10611661054566.2*eta*r-12049908701745.2*eta+5107745331375.71*r**2-326837426.241486*r*(14700.0*eta+42911.0)-39476764256925.6*r-(-5041721180160.0*eta**2-25392914995744.3*eta-879923036160.0*r**2-283115520.0*r*(14700.0*eta+42911.0)+104186110149937.0)*np.log(r)+5787938193408.0*np.log(r)**2+275059053208689.0)/(55296.0*eta*(14515200.0*eta**3-42636451.6032331*eta**2-7680.0*eta*(315.0*d5+890888.810272497)+4331361844.61149*eta+1002013764.01019)-967680.0*r**3*(-138240.0*eta**2-2675575.66847905*eta-5278341.3229329)-9216.0*r**2*(-197773496.793534*eta**2-7680.0*eta*(315.0*d5+405152.309729121)+2481453539.84635*eta+5805304367.87913)+r*(5927865218923.02*eta**3+70778880.0*eta**2*(315.0*d5+2561145.80918574)-138141470005001.0*eta**2-4718592.0*eta*(40950.0*d5+86207832.4415642)+450172889755120.0*eta+86618264430493.3*(1-0.496948781616935*eta)**2+188440788778196.0)+5787938193408.0*r*np.log(r)**2+(-1698693120.0*eta*(11592.0*eta+69847.0)+879923036160.0*r**3+283115520.0*r**2*(14700.0*eta+42911.0)+49152.0*r*(102574080.0*eta**2+409207698.136075*eta-2119671837.36038))*np.log(r))
    Anons = 7680.0*r**4*(-5416406.59541186*eta**2+28.0*eta*(1920.0*a6+733955.307463037)+2048.0*eta*(756.0*eta+336.0*r+407.0)*np.log(r)-7.0*r*(-185763.092693281*eta**2+938918.400156317*eta-245760.0)-3440640.0)/(241555486248.807*eta**4+1120.0*eta**3*(-17833256.898555*r**2-163683964.822551*r-1188987459.03162)+7.0*eta**2*(-39321600.0*a6*(3.0*r+59.0)+745857848.115604*a6+1426660551.8844*r**5-3089250703.76879*r**4-6178501407.53758*r**3+2064783811.32587*r**2+122635399361.987*r+276057889687.011)+67645734912.0*eta**2*np.log(r)**2+53760.0*eta*(7680.0*a6*(r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+128.0*r*(-6852.34813868015*r**4+4264.6962773603*r**3+8529.39255472061*r**2+13218.7851094412*r-33722.4297811176)+113485.217444961*r*(-r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+148.04406601634*r*(349.0*r**4+1926.0*r**3+3852.0*r**2+7704.0*r+36400.0))+32768.0*eta*(-1882456.23663972*eta**2-38842241.4769507*eta+161280.0*r**5+480.0*r**4*(756.0*eta+1079.0)+960.0*r**3*(756.0*eta+1079.0)+1920.0*r**2*(588.0*eta+1079.0)+240.0*r*(-3024.0*eta**2-7466.27061066206*eta+17264.0)+13447680.0)*np.log(r)+13212057600.0*r**5)
    xi = np.sqrt(Dnons)*(Anons+ap**2*u*u)/(1+ap**2*u*u)
    pr = prstar/xi
    QalignSS = ((pr**4)/(r**3))*(ap**2*(-5*eta*eta+eta*np.divide(165,32)+np.divide(25,32))+delta*ap*am*(eta*np.divide(45,8)-np.divide(5,16))+am**2*(-eta*eta*np.divide(15,8)+eta*np.divide(75,32)-np.divide(15,32)))
    BnpalignSS = ((1/r**3)*(ap**2*(3*eta+np.divide(45,16))-delta*ap*am*np.divide(21,8)+am**2*(eta*np.divide(3,4)-np.divide(3,16)))+(1/r**4)*(ap**2*(-eta*np.divide(1171,64)-np.divide(861,64))+delta*ap*am*(eta*np.divide(13,16)+np.divide(449,32))+am**2*(eta*eta*np.divide(1,16)+eta*np.divide(115,64)-np.divide(37,64))))
    AalignSS = ((1/r**4)*(ap**2*np.divide(9,8)-delta*ap*am*np.divide(5,4)+am**2*(eta*np.divide(1,2)+np.divide(1,8)))+(1/r**5)*(ap**2*(-eta*np.divide(175,64)-np.divide(225,64))+delta*ap*am*(-eta*np.divide(39,16)+np.divide(117,32))+am**2*(eta*eta*np.divide(21,16)-eta*np.divide(81,64)-np.divide(9,64))))
    Qalign = Qnos+QalignSS
    Balignnp = -1+ap**2*u*u+Anons*Dnons+BnpalignSS
    Bkerreqnp = -(1+2/r)/(r**2+ap**2*(1+2/r))
    Aalign = (ap**2*u*u+Anons+AalignSS)/(1+ap**2*(1+2/r)/(r**2))
    Galigna3 = pphi*(delta*am*ap**2-ap**3)/(4*r**2)
    dSO = -7.71251231383957*am**3-17.2294679794015*am**2*ap-238.430383378296*am**2*eta+69.5461667822545*am**2-10.5225438990315*am*ap**2+362.767393298729*am*ap*eta-85.8036338010274*am*ap-1254.66845939312*am*eta**2+472.431937787377*am*eta-39.742317057316*am-7.58458103577458*ap**3-42.7601129678844*ap**2*eta+18.1783435552183*ap**2-201.905934468847*ap*eta**2-90.5790079104259*ap*eta+49.6299175121658*ap+478.546231305475*eta**3+679.521769948995*eta**2-177.334831768076*eta-37.6897780220529
    SOcalib = eta*dSO*ap*pphi*(u**3)
    Heven = np.sqrt(Aalign*(1+pphi*pphi/r**2+(1+Balignnp)*pr*pr+Bkerreqnp*pphi*pphi*ap**2/r**2+Qalign))
    Hodd = (pphi*(gap*ap+delta*gam*am)+SOcalib+Galigna3)/(r**3+ap**2*(r+2))
    Heff = Hodd+Heven
    Hreal = np.sqrt(1+2*eta*(Heff-1))
    
    u_prmr = -1/r**2
    gam_prmr = -pphi**4*(75*eta**2/64 - 45*eta/32 - 105/64)/r**5 + pphi**2*(9*eta/16 - 15/16)/r**3 - pphi**2*(-613*eta**2/256 - 105*eta/128 - 177/256)/r**4 - (11*eta/32 + 3/32)/r**2 - (103*eta**2/96 - eta/16 + 5/32)/r**3
    gap_prmr = -pphi**4*(345*eta**2/64 + 75*eta/32 + 105/64)/r**5 - pphi**2*(-45*eta/16 - 15/16)/r**3 - pphi**2*(-1591*eta**2/256 - 801*eta/128 + 177/256)/r**4 - (23*eta/32 - 3/32)/r**2 - (109*eta**2/96 - 177*eta/16 - 5/32)/r**3
    Qnosterm3_prmr = prstar**8*(5994461*np.pi*eta*u**(3/2)*u_prmr/5080320 + eta*u_prmr*(-27734375*np.log(5)/126 - 35772/175 + 6591861*np.log(3)/350 + 21668992*np.log(2)/45) + u*u_prmr*(-12*eta**4 + 48*eta**3/7 + 2*eta**2*(-468490234375*np.log(5)/42336 - 13841287201*np.log(7)/4320 + 870976/525 + 332067403089*np.log(3)/39200 + 703189497728*np.log(2)/33075) + 2*eta*(-346536085761*np.log(3)/156800 - 1347019456*np.log(2)/525 - 2222547/2450 + 13841287201*np.log(7)/17280 + 278690984375*np.log(5)/169344)))
    Qnosterm2_prmr = prstar**6*(-2723471*np.pi*eta*u**(5/2)*u_prmr/216000 + u**2*u_prmr*(-42*eta**4 + 564*eta**3 + 3*eta**2*(-4998308864*np.log(2)/1575 - 45409167*np.log(3)/350 + 154229/75 + 26171875*np.log(5)/18) + 3*eta*(-52468750*np.log(5)/189 - 860317/1050 + 35643726*np.log(3)/175 + 305146624*np.log(2)/945)) + u*u_prmr*(12*eta**3 - 54*eta**2/5 + 2*eta*(-2358912*np.log(2)/25 - 827/3 + 1399437*np.log(3)/50 + 390625*np.log(5)/18)))
    Qnosterm1_prmr = prstar**4*(88703*np.pi*eta*u**(7/2)*u_prmr/420 + eta*u*u_prmr*(16 - 12*eta) + u**4*(-592*eta**2*u_prmr/(5*u) + 5428*eta*u_prmr/(105*u)) + u**3*u_prmr*(4*eta**3*(792 - 615*np.pi**2/32) + 4*eta**2*(-592*np.log(u)/5 - 9765625*np.log(5)/126 - 6396489*np.log(3)/70 - 1184*np.euler_gamma/5 + 45683/105 + 31633*np.pi**2/512 + 33693536*np.log(2)/105) + 4*eta*(5428*np.log(u)/105 - 4396376*np.log(2)/105 - 601911*np.log(3)/280 - 93031*np.pi**2/1536 + 10856*np.euler_gamma/105 + 1249177/1050 + 9765625*np.log(5)/504)) + u**2*u_prmr*(30*eta**3 - 393*eta**2 + 3*eta*(-33048*np.log(3)/5 - 4348/15 + 496256*np.log(2)/45)))
    Qnos_prmr = Qnosterm1_prmr + Qnosterm2_prmr + Qnosterm3_prmr
    Dnons_prmr = r*(22295347200.0*d5*eta + 267544166400.0*eta**2*r + 1822680546449.21*eta**2 + 5178202125747.62*eta*r + 5807150888816.36*eta + 10215490662751.4*r + (4161798144000.0*eta + 1759846072320.0*r + 12148770078720.0)*np.log(r) - 53501685054374.0 + (5041721180160.0*eta**2 + 25392914995744.3*eta + 879923036160.0*r**2 + r*(4161798144000.0*eta + 12148770078720.0) - 104186110149937.0)/r + 11575876386816.0*np.log(r)/r)/(eta*(802632499200.0*eta**3 - 2357625227852.38*eta**2 + 55296.0*eta*(-2419200.0*d5 - 6842026062.89278) + 239506984559637.0*eta + 55407353094707.5) + r**3*(133772083200.0*eta**2 + 2589101062873.81*eta + 5107745331375.71) - r**2*(-1822680546449.21*eta**2 + 9216.0*eta*(-2419200.0*d5 - 3111569738.71965) + 22869075823224.0*eta + 53501685054374.1) + r*(5927865218923.02*eta**3 + eta**2*(22295347200.0*d5 + 181275031890860.0) - 138141470005001.0*eta**2 - eta*(193226342400.0*d5 + 406779588496105.0) + 450172889755120.0*eta + 86618264430493.3*(1 - 0.496948781616935*eta)**2 + 188440788778196.0) + 5787938193408.0*r*np.log(r)**2 + (eta*(-19691250647040.0*eta - 118648618352640.0) + 879923036160.0*r**3 + r**2*(4161798144000.0*eta + 12148770078720.0) + r*(5041721180160.0*eta**2 + 20113376778784.4*eta - 104186110149937.0))*np.log(r)) + r*(-1.7694999344523e-13*eta**3 - 2.98505426338587e-26*eta**2*(22295347200.0*d5 + 181275031890860.0) + 4.123597839888195e-12*eta**2 + 2.98505426338587e-26*eta*(193226342400.0*d5 + 406779588496105.0) - 1.343790503824258e-11*eta + 2.98505426338587e-26*r**2*(-401316249600.0*eta**2 - 7767303188621.42*eta - 15323235994127.1) + 2.98505426338587e-26*r*(-3645361092898.42*eta**2 + 18432.0*eta*(-2419200.0*d5 - 3111569738.71965) + 45738151646447.9*eta + 107003370108748.0) - 2.58560219525329e-12*(1 - 0.496948781616935*eta)**2 - 2.98505426338587e-26*(5041721180160.0*eta**2 + 20113376778784.4*eta + 2639769108480.0*r**2 + r*(8323596288000.0*eta + 24297540157440.0) - 104186110149937.0)*np.log(r) - 1.72773095804465e-13*np.log(r)**2 - 3.45546191608929e-13*np.log(r) - 5.625059799381501e-12 - 2.98505426338587e-26*(eta*(-19691250647040.0*eta - 118648618352640.0) + 879923036160.0*r**3 + r**2*(4161798144000.0*eta + 12148770078720.0) + r*(5041721180160.0*eta**2 + 20113376778784.4*eta - 104186110149937.0))/r)*(22295347200.0*d5*eta**2 + 22295347200.0*d5*eta*r - 193226342400.0*d5*eta + 6730497718123.02*eta**3 + 133772083200.0*eta**2*r**2 + 1822680546449.21*eta**2*r + 80059249540278.2*eta**2 + 2589101062873.81*eta*r**2 + 10611661054566.2*eta*r - 12049908701745.2*eta + 5107745331375.71*r**2 + r*(-4804510165749.84*eta - 14024920797448.4) - 39476764256925.6*r - (-5041721180160.0*eta**2 - 25392914995744.3*eta - 879923036160.0*r**2 + r*(-4161798144000.0*eta - 12148770078720.0) + 104186110149937.0)*np.log(r) + 5787938193408.0*np.log(r)**2 + 275059053208689.0)/(eta*(0.138673301680058*eta**3 - 0.407334209362761*eta**2 + 9.55366110560367e-9*eta*(-2419200.0*d5 - 6842026062.89278) + 41.3803631891606*eta + 9.57289992450369) + r**3*(0.0231122169466764*eta**2 + 0.447327005983337*eta + 0.882480973482581) - r**2*(-0.314910160672604*eta**2 + 1.59227685093395e-9*eta*(-2419200.0*d5 - 3111569738.71965) + 3.95116102816545*eta + 9.24365175759969) + r*(1.02417562538494*eta**3 + 1.72773095804465e-13*eta**2*(22295347200.0*d5 + 181275031890860.0) - 23.86712943174367*eta**2 - 1.72773095804465e-13*eta*(193226342400.0*d5 + 406779588496105.0) + 77.77776381023421*eta + 14.9653056988661*(1 - 0.496948781616935*eta)**2 + 32.55749845304421) + r*np.log(r)**2 + (1.72773095804465e-13*eta*(-19691250647040.0*eta - 118648618352640.0) + 0.152027027027027*r**3 + 1.72773095804465e-13*r**2*(4161798144000.0*eta + 12148770078720.0) + 1.72773095804465e-13*r*(5041721180160.0*eta**2 + 20113376778784.4*eta - 104186110149937.0))*np.log(r))**2 + (22295347200.0*d5*eta**2 + 22295347200.0*d5*eta*r - 193226342400.0*d5*eta + 6730497718123.02*eta**3 + 133772083200.0*eta**2*r**2 + 1822680546449.21*eta**2*r + 80059249540278.2*eta**2 + 2589101062873.81*eta*r**2 + 10611661054566.2*eta*r - 12049908701745.2*eta + 5107745331375.71*r**2 + r*(-4804510165749.84*eta - 14024920797448.4) - 39476764256925.6*r - (-5041721180160.0*eta**2 - 25392914995744.3*eta - 879923036160.0*r**2 + r*(-4161798144000.0*eta - 12148770078720.0) + 104186110149937.0)*np.log(r) + 5787938193408.0*np.log(r)**2 + 275059053208689.0)/(eta*(802632499200.0*eta**3 - 2357625227852.38*eta**2 + 55296.0*eta*(-2419200.0*d5 - 6842026062.89278) + 239506984559637.0*eta + 55407353094707.5) + r**3*(133772083200.0*eta**2 + 2589101062873.81*eta + 5107745331375.71) - r**2*(-1822680546449.21*eta**2 + 9216.0*eta*(-2419200.0*d5 - 3111569738.71965) + 22869075823224.0*eta + 53501685054374.1) + r*(5927865218923.02*eta**3 + eta**2*(22295347200.0*d5 + 181275031890860.0) - 138141470005001.0*eta**2 - eta*(193226342400.0*d5 + 406779588496105.0) + 450172889755120.0*eta + 86618264430493.3*(1 - 0.496948781616935*eta)**2 + 188440788778196.0) + 5787938193408.0*r*np.log(r)**2 + (eta*(-19691250647040.0*eta - 118648618352640.0) + 879923036160.0*r**3 + r**2*(4161798144000.0*eta + 12148770078720.0) + r*(5041721180160.0*eta**2 + 20113376778784.4*eta - 104186110149937.0))*np.log(r))
    Anons_prmr = r**4*(-7.12916500937039e-13*eta**2 + 1.31621673590926e-19*eta*(53760.0*a6 + 20550748.608965) + 1.31621673590926e-19*eta*(1548288.0*eta + 688128.0*r + 833536.0)*np.log(r) - 1.31621673590926e-19*r*(-1300341.64885297*eta**2 + 6572428.80109422*eta - 1720320.0) - 4.52862795023884e-13)*(eta**3*(39946495452.7632*r + 183326040601.257) - eta**2*(-825753600.0*a6 + 49933119315.954*r**4 - 86499019705.5264*r**3 - 129748529558.289*r**2 + 28906973358.5622*r + 858447795533.909) - 135291469824.0*eta**2*np.log(r)/r - eta*(-23781703680.0*eta**2 - 58717141288.8417*eta + 26424115200.0*r**4 + r**3*(47563407360.0*eta + 67884810240.0) + r**2*(71345111040.0*eta + 101827215360.0) + r*(73987522560.0*eta + 135769620480.0) + 135769620480.0)*np.log(r) - eta*(a6*(1651507200.0*r**3 + 2477260800.0*r**2 + 3303014400.0*r + 3303014400.0) - 50476253192.4036*r**4 + 56877242932.0441*r**3 + 113754485864.088*r**2 + r*(-188611704798.948*r**3 + 88039707598.4219*r**2 + 117386276797.896*r + 90962161597.8954) + r*(-24403861159.3644*r**3 + 36605791739.0466*r**2 + 48807722318.7288*r + 48807722318.7288) + r*(11110553188.6977*r**3 + 45986229458.6641*r**2 + 61314972611.552*r + 61314972611.552) + 201084856528.176*r + 155264066234.249) - eta*(-61684325962.2103*eta**2 - 1272782568716.72*eta + 5284823040.0*r**5 + r**4*(11890851840.0*eta + 16971202560.0) + r**3*(23781703680.0*eta + 33942405120.0) + r**2*(36993761280.0*eta + 67884810240.0) + r*(-23781703680.0*eta**2 - 58717141288.8419*eta + 135769620480.0) + 440653578240.0)/r - 66060288000.0*r**4)/(eta**4 + eta**3*(-0.0826859618738229*r**2 - 0.758939668264987*r - 5.51287811672293) + eta**2*(2.8978849160933e-11*a6*(-117964800.0*r - 2319974400.0) + 0.0216141020760402*a6 + 0.0413429809369115*r**5 - 0.0895229301648219*r**4 - 0.179045860329644*r**3 + 0.0598350586183487*r**2 + 3.5538327399018*r + 7.99983994492537) + 0.280042221199329*eta**2*np.log(r)**2 + eta*(2.22557561555965e-7*a6*(7680.0*r**4 + 15360.0*r**3 + 30720.0*r**2 + 61440.0*r + 122880.0) + 2.22557561555965e-7*r*(-877100.561751059*r**4 + 545881.123502118*r**3 + 1091762.24700424*r**2 + 1692004.49400847*r - 4316471.01198305) + 2.22557561555965e-7*r*(-113485.217444961*r**4 + 226970.434889922*r**3 + 453940.869779844*r**2 + 907881.739559688*r + 1815763.47911938) + 2.22557561555965e-7*r*(51667.3790397027*r**4 + 285132.871147471*r**3 + 570265.742294942*r**2 + 1140531.48458988*r + 5388804.00299478)) + eta*(-0.255362968236103*eta**2 - 5.26911058192953*eta + 0.0218782985311977*r**5 + 1.35654132757922e-7*r**4*(362880.0*eta + 517920.0) + 1.35654132757922e-7*r**3*(725760.0*eta + 1035840.0) + 1.35654132757922e-7*r**2*(1128960.0*eta + 2071680.0) + 1.35654132757922e-7*r*(-725760.0*eta**2 - 1791904.94655889*eta + 4143360.0) + 1.82423336800605)*np.log(r) + 0.054695746327994*r**5)**2 + r**4*(9986623863.19081*eta**2 + 5284823040.0*eta*np.log(r) - 50476253192.4036*eta + 7680.0*eta*(1548288.0*eta + 688128.0*r + 833536.0)/r + 13212057600.0)/(241555486248.807*eta**4 + eta**3*(-19973247726.3816*r**2 - 183326040601.257*r - 1331665954115.41) + eta**2*(7.0*a6*(-117964800.0*r - 2319974400.0) + 5221004936.80923*a6 + 9986623863.1908*r**5 - 21624754926.3815*r**4 - 43249509852.7631*r**3 + 14453486679.2811*r**2 + 858447795533.909*r + 1932405227809.08) + 67645734912.0*eta**2*np.log(r)**2 + eta*(53760.0*a6*(7680.0*r**4 + 15360.0*r**3 + 30720.0*r**2 + 61440.0*r + 122880.0) + 53760.0*r*(-877100.561751059*r**4 + 545881.123502118*r**3 + 1091762.24700424*r**2 + 1692004.49400847*r - 4316471.01198305) + 53760.0*r*(-113485.217444961*r**4 + 226970.434889922*r**3 + 453940.869779844*r**2 + 907881.739559688*r + 1815763.47911938) + 53760.0*r*(51667.3790397027*r**4 + 285132.871147471*r**3 + 570265.742294942*r**2 + 1140531.48458988*r + 5388804.00299478)) + eta*(-61684325962.2103*eta**2 - 1272782568716.72*eta + 5284823040.0*r**5 + 32768.0*r**4*(362880.0*eta + 517920.0) + 32768.0*r**3*(725760.0*eta + 1035840.0) + 32768.0*r**2*(1128960.0*eta + 2071680.0) + 32768.0*r*(-725760.0*eta**2 - 1791904.94655889*eta + 4143360.0) + 440653578240.0)*np.log(r) + 13212057600.0*r**5) + r**3*(-166392010611.052*eta**2 + 30720.0*eta*(53760.0*a6 + 20550748.608965) + 30720.0*eta*(1548288.0*eta + 688128.0*r + 833536.0)*np.log(r) - 30720.0*r*(-1300341.64885297*eta**2 + 6572428.80109422*eta - 1720320.0) - 105696460800.0)/(241555486248.807*eta**4 + eta**3*(-19973247726.3816*r**2 - 183326040601.257*r - 1331665954115.41) + eta**2*(7.0*a6*(-117964800.0*r - 2319974400.0) + 5221004936.80923*a6 + 9986623863.1908*r**5 - 21624754926.3815*r**4 - 43249509852.7631*r**3 + 14453486679.2811*r**2 + 858447795533.909*r + 1932405227809.08) + 67645734912.0*eta**2*np.log(r)**2 + eta*(53760.0*a6*(7680.0*r**4 + 15360.0*r**3 + 30720.0*r**2 + 61440.0*r + 122880.0) + 53760.0*r*(-877100.561751059*r**4 + 545881.123502118*r**3 + 1091762.24700424*r**2 + 1692004.49400847*r - 4316471.01198305) + 53760.0*r*(-113485.217444961*r**4 + 226970.434889922*r**3 + 453940.869779844*r**2 + 907881.739559688*r + 1815763.47911938) + 53760.0*r*(51667.3790397027*r**4 + 285132.871147471*r**3 + 570265.742294942*r**2 + 1140531.48458988*r + 5388804.00299478)) + eta*(-61684325962.2103*eta**2 - 1272782568716.72*eta + 5284823040.0*r**5 + 32768.0*r**4*(362880.0*eta + 517920.0) + 32768.0*r**3*(725760.0*eta + 1035840.0) + 32768.0*r**2*(1128960.0*eta + 2071680.0) + 32768.0*r*(-725760.0*eta**2 - 1791904.94655889*eta + 4143360.0) + 440653578240.0)*np.log(r) + 13212057600.0*r**5)
    xi_prmr = -2*np.sqrt(Dnons)*ap**2*u*u_prmr*(Anons + ap**2*u**2)/(ap**2*u**2 + 1)**2 + np.sqrt(Dnons)*(Anons_prmr + 2*ap**2*u*u_prmr)/(ap**2*u**2 + 1) + Dnons_prmr*(Anons + ap**2*u**2)/(np.sqrt(Dnons)*(2*ap**2*u**2 + 2))
    pr_prmr = -prstar*xi_prmr/xi**2
    QalignSS_prmr = pr**4*(-3*am**2*(-15*eta**2/8 + 75*eta/32 - 15/32) - 3*am*ap*delta*(45*eta/8 - 5/16) - 3*ap**2*(-5*eta**2 + 165*eta/32 + 25/32))/r**4 + pr**3*pr_prmr*(4*am**2*(-15*eta**2/8 + 75*eta/32 - 15/32) + 4*am*ap*delta*(45*eta/8 - 5/16) + 4*ap**2*(-5*eta**2 + 165*eta/32 + 25/32))/r**3
    BnpalignSS_prmr = -(3*am**2*(3*eta/4 - 3/16) - 63*am*ap*delta/8 + 3*ap**2*(3*eta + 45/16))/r**4 + (-4*am**2*(eta**2/16 + 115*eta/64 - 37/64) - 4*am*ap*delta*(13*eta/16 + 449/32) - 4*ap**2*(-1171*eta/64 - 861/64))/r**5
    AalignSS_prmr = (-4*am**2*(eta/2 + 1/8) + 5*am*ap*delta - 9*ap**2/2)/r**5 - (5*am**2*(21*eta**2/16 - 81*eta/64 - 9/64) + 5*am*ap*delta*(117/32 - 39*eta/16) + 5*ap**2*(-175*eta/64 - 225/64))/r**6
    Qalign_prmr = QalignSS_prmr + Qnos_prmr
    Balignnp_prmr = Anons*Dnons_prmr + Anons_prmr*Dnons + BnpalignSS_prmr + 2*ap**2*u*u_prmr
    Bkerreqnp_prmr = (-1 - 2/r)*(2*ap**2/r**2 - 2*r)/(ap**2*(1 + 2/r) + r**2)**2 + 2/(r**2*(ap**2*(1 + 2/r) + r**2))
    Aalign_prmr = (ap**2*(2 + 4/r)/r**3 + 2*ap**2/r**4)*(AalignSS + Anons + ap**2*u**2)/(ap**2*(1 + 2/r)/r**2 + 1)**2 + (AalignSS_prmr + Anons_prmr + 2*ap**2*u*u_prmr)/(ap**2*(1 + 2/r)/r**2 + 1)
    Galigna3_prmr = pphi*(-am*ap**2*delta + ap**3)/(2*r**3)
    SOcalib_prmr = 3*ap*dSO*eta*pphi*u**2*u_prmr
    Heven_prmr = np.sqrt(Aalign*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))*(Aalign*(Balignnp_prmr*pr**2 - 2*Bkerreqnp*ap**2*pphi**2/r**3 + Bkerreqnp_prmr*ap**2*pphi**2/r**2 + Qalign_prmr - 2*pphi**2/r**3 + pr*pr_prmr*(2*Balignnp + 2))/2 + Aalign_prmr*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1)/2)/(Aalign*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))
    Hodd_prmr = (-ap**2 - 3*r**2)*(Galigna3 + SOcalib + pphi*(am*delta*gam + ap*gap))/(ap**2*(r + 2) + r**3)**2 + (Galigna3_prmr + SOcalib_prmr + pphi*(am*delta*gam_prmr + ap*gap_prmr))/(ap**2*(r + 2) + r**3)
    Heff_prmr = Heven_prmr + Hodd_prmr
    Hreal_prmr = Heff_prmr*eta/np.sqrt(eta*(2*Heff - 2) + 1)
    if not verbose:
        return Hreal_prmr
    else:
        return Hreal,xi,Aalign,Balignnp,Bkerreqnp,Qalign,Heven,Hodd,QalignSS,Qnos,Galigna3,gam,gap,SOcalib,u,eta,ap,am,r,phi,prstar,pphi,chi1,chi2,m1,m2
def v5HM_unoptimized_dH_dprstar(m1, m2, r, phi, prstar, pphi, chi1, chi2,verbose = False):
    u = 1/r
    M = m1+m2
    delta = (m1-m2)/M
    eta = m1*m2/(M**2)
    a6 = 41.7877875-3021.93382*eta+33414.4394*eta**2-169019.14*eta**3+329523.262*eta**4
    gam = (np.divide(1,4)+(pphi**2/r**2)*(np.divide(15,32)-np.divide(9,32)*eta)+(1/r)*(np.divide(11,32)*eta+np.divide(3,32))+(pphi**4/r**4)*(np.divide(75,256)*eta**2-np.divide(45,128)*eta-np.divide(105,256))+(pphi**2/r**3)*(-np.divide(613,768)*eta**2-np.divide(35,128)*eta-np.divide(59,256))+(1/r**2)*(np.divide(103,192)*eta**2-np.divide(1,32)*eta+np.divide(5,64)))
    gap = (np.divide(7,4)+(pphi**2/r**2)*(-np.divide(45,32)*eta-np.divide(15,32))+(1/r)*(np.divide(23,32)*eta-np.divide(3,32))+(pphi**4/r**4)*(np.divide(345,256)*eta**2+np.divide(75,128)*eta+np.divide(105,256))+(pphi**2/r**3)*(-np.divide(1591,768)*eta**2-np.divide(267,128)*eta+np.divide(59,256))+(1/r**2)*(np.divide(109,192)*eta**2-np.divide(177,32)*eta-np.divide(5,64)))
    am = (m1*chi1-m2*chi2)/M
    ap = (m1*chi1+m2*chi2)/M
    Qnosterm3 = (prstar**8)*(u*eta*(-np.divide(35772,175)+np.divide(21668992,45)*np.log(2)+np.divide(6591861,350)*np.log(3)-np.divide(27734375,126)*np.log(5))+u**2*(-6*eta**4+np.divide(24,7)*eta**3+eta**2*(np.divide(870976,525)+np.divide(703189497728,33075)*np.log(2)+np.divide(332067403089,39200)*np.log(3)-np.divide(13841287201,4320)*np.log(7)-np.divide(468490234375,42336)*np.log(5))+eta*(-np.divide(2222547,2450)-np.divide(1347019456,525)*np.log(2)+np.divide(278690984375,169344)*np.log(5)+np.divide(13841287201,17280)*np.log(7)-np.divide(346536085761,156800)*np.log(3)))+np.divide(5994461,12700800)*np.pi*eta*u**(np.divide(5,2)))
    Qnosterm2 = (prstar**6)*(u**2*(6*eta**3-np.divide(27,5)*eta**2+eta*(-np.divide(827,3)-np.divide(2358912,25)*np.log(2)+np.divide(1399437,50)*np.log(3)+np.divide(390625,18)*np.log(5)))+u**3*(-14*eta**4+188*eta**3+eta**2*(np.divide(154229,75)-np.divide(4998308864,1575)*np.log(2)+np.divide(26171875,18)*np.log(5)-np.divide(45409167,350)*np.log(3))+eta*(-np.divide(860317,1050)+np.divide(305146624,945)*np.log(2)+np.divide(35643726,175)*np.log(3)-np.divide(52468750,189)*np.log(5)))-np.divide(2723471,756000)*np.pi*eta*u**(np.divide(7,2)))
    Qnosterm1 = (prstar**4)*(2*(4-3*eta)*eta*u**2+u**3*(10*eta**3-131*eta**2+eta*(-np.divide(4348,15)+np.divide(496256,45)*np.log(2)-np.divide(33048,5)*np.log(3)))+u**4*((792-np.divide(615,32)*np.pi**2)*eta**3+eta**2*(-np.divide(592,5)*np.log(u)+np.divide(31633,512)*np.pi**2-np.divide(1184,5)*np.euler_gamma+np.divide(45683,105)+np.divide(33693536,105)*np.log(2)-np.divide(6396489,70)*np.log(3)-np.divide(9765625,126)*np.log(5))+eta*(np.divide(5428,105)*np.log(u)+np.divide(1249177,1050)-np.divide(93031,1536)*np.pi**2+np.divide(10856,105)*np.euler_gamma-np.divide(4396376,105)*np.log(2)+np.divide(9765625,504)*np.log(5)-np.divide(601911,280)*np.log(3)))+np.divide(88703,1890)*np.pi*eta*u**(np.divide(9,2)))
    Qnos = Qnosterm1+Qnosterm2+Qnosterm3
    d5 = 0
    Dnons = r*(6730497718123.02*eta**3+22295347200.0*eta**2*d5+133772083200.0*eta**2*r**2+1822680546449.21*eta**2*r+80059249540278.2*eta**2+22295347200.0*eta*d5*r-193226342400.0*eta*d5+2589101062873.81*eta*r**2+10611661054566.2*eta*r-12049908701745.2*eta+5107745331375.71*r**2-326837426.241486*r*(14700.0*eta+42911.0)-39476764256925.6*r-(-5041721180160.0*eta**2-25392914995744.3*eta-879923036160.0*r**2-283115520.0*r*(14700.0*eta+42911.0)+104186110149937.0)*np.log(r)+5787938193408.0*np.log(r)**2+275059053208689.0)/(55296.0*eta*(14515200.0*eta**3-42636451.6032331*eta**2-7680.0*eta*(315.0*d5+890888.810272497)+4331361844.61149*eta+1002013764.01019)-967680.0*r**3*(-138240.0*eta**2-2675575.66847905*eta-5278341.3229329)-9216.0*r**2*(-197773496.793534*eta**2-7680.0*eta*(315.0*d5+405152.309729121)+2481453539.84635*eta+5805304367.87913)+r*(5927865218923.02*eta**3+70778880.0*eta**2*(315.0*d5+2561145.80918574)-138141470005001.0*eta**2-4718592.0*eta*(40950.0*d5+86207832.4415642)+450172889755120.0*eta+86618264430493.3*(1-0.496948781616935*eta)**2+188440788778196.0)+5787938193408.0*r*np.log(r)**2+(-1698693120.0*eta*(11592.0*eta+69847.0)+879923036160.0*r**3+283115520.0*r**2*(14700.0*eta+42911.0)+49152.0*r*(102574080.0*eta**2+409207698.136075*eta-2119671837.36038))*np.log(r))
    Anons = 7680.0*r**4*(-5416406.59541186*eta**2+28.0*eta*(1920.0*a6+733955.307463037)+2048.0*eta*(756.0*eta+336.0*r+407.0)*np.log(r)-7.0*r*(-185763.092693281*eta**2+938918.400156317*eta-245760.0)-3440640.0)/(241555486248.807*eta**4+1120.0*eta**3*(-17833256.898555*r**2-163683964.822551*r-1188987459.03162)+7.0*eta**2*(-39321600.0*a6*(3.0*r+59.0)+745857848.115604*a6+1426660551.8844*r**5-3089250703.76879*r**4-6178501407.53758*r**3+2064783811.32587*r**2+122635399361.987*r+276057889687.011)+67645734912.0*eta**2*np.log(r)**2+53760.0*eta*(7680.0*a6*(r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+128.0*r*(-6852.34813868015*r**4+4264.6962773603*r**3+8529.39255472061*r**2+13218.7851094412*r-33722.4297811176)+113485.217444961*r*(-r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+148.04406601634*r*(349.0*r**4+1926.0*r**3+3852.0*r**2+7704.0*r+36400.0))+32768.0*eta*(-1882456.23663972*eta**2-38842241.4769507*eta+161280.0*r**5+480.0*r**4*(756.0*eta+1079.0)+960.0*r**3*(756.0*eta+1079.0)+1920.0*r**2*(588.0*eta+1079.0)+240.0*r*(-3024.0*eta**2-7466.27061066206*eta+17264.0)+13447680.0)*np.log(r)+13212057600.0*r**5)
    xi = np.sqrt(Dnons)*(Anons+ap**2*u*u)/(1+ap**2*u*u)
    pr = prstar/xi
    QalignSS = ((pr**4)/(r**3))*(ap**2*(-5*eta*eta+eta*np.divide(165,32)+np.divide(25,32))+delta*ap*am*(eta*np.divide(45,8)-np.divide(5,16))+am**2*(-eta*eta*np.divide(15,8)+eta*np.divide(75,32)-np.divide(15,32)))
    BnpalignSS = ((1/r**3)*(ap**2*(3*eta+np.divide(45,16))-delta*ap*am*np.divide(21,8)+am**2*(eta*np.divide(3,4)-np.divide(3,16)))+(1/r**4)*(ap**2*(-eta*np.divide(1171,64)-np.divide(861,64))+delta*ap*am*(eta*np.divide(13,16)+np.divide(449,32))+am**2*(eta*eta*np.divide(1,16)+eta*np.divide(115,64)-np.divide(37,64))))
    AalignSS = ((1/r**4)*(ap**2*np.divide(9,8)-delta*ap*am*np.divide(5,4)+am**2*(eta*np.divide(1,2)+np.divide(1,8)))+(1/r**5)*(ap**2*(-eta*np.divide(175,64)-np.divide(225,64))+delta*ap*am*(-eta*np.divide(39,16)+np.divide(117,32))+am**2*(eta*eta*np.divide(21,16)-eta*np.divide(81,64)-np.divide(9,64))))
    Qalign = Qnos+QalignSS
    Balignnp = -1+ap**2*u*u+Anons*Dnons+BnpalignSS
    Bkerreqnp = -(1+2/r)/(r**2+ap**2*(1+2/r))
    Aalign = (ap**2*u*u+Anons+AalignSS)/(1+ap**2*(1+2/r)/(r**2))
    Galigna3 = pphi*(delta*am*ap**2-ap**3)/(4*r**2)
    dSO = -7.71251231383957*am**3-17.2294679794015*am**2*ap-238.430383378296*am**2*eta+69.5461667822545*am**2-10.5225438990315*am*ap**2+362.767393298729*am*ap*eta-85.8036338010274*am*ap-1254.66845939312*am*eta**2+472.431937787377*am*eta-39.742317057316*am-7.58458103577458*ap**3-42.7601129678844*ap**2*eta+18.1783435552183*ap**2-201.905934468847*ap*eta**2-90.5790079104259*ap*eta+49.6299175121658*ap+478.546231305475*eta**3+679.521769948995*eta**2-177.334831768076*eta-37.6897780220529
    SOcalib = eta*dSO*ap*pphi*(u**3)
    Heven = np.sqrt(Aalign*(1+pphi*pphi/r**2+(1+Balignnp)*pr*pr+Bkerreqnp*pphi*pphi*ap**2/r**2+Qalign))
    Hodd = (pphi*(gap*ap+delta*gam*am)+SOcalib+Galigna3)/(r**3+ap**2*(r+2))
    Heff = Hodd+Heven
    Hreal = np.sqrt(1+2*eta*(Heff-1))
    
    Qnosterm3_prmprstar = prstar**7*(5994461*np.pi*eta*u**(5/2)/1587600 + 8*eta*u*(-27734375*np.log(5)/126 - 35772/175 + 6591861*np.log(3)/350 + 21668992*np.log(2)/45) + 8*u**2*(-6*eta**4 + 24*eta**3/7 + eta**2*(-468490234375*np.log(5)/42336 - 13841287201*np.log(7)/4320 + 870976/525 + 332067403089*np.log(3)/39200 + 703189497728*np.log(2)/33075) + eta*(-346536085761*np.log(3)/156800 - 1347019456*np.log(2)/525 - 2222547/2450 + 13841287201*np.log(7)/17280 + 278690984375*np.log(5)/169344)))
    Qnosterm2_prmprstar = prstar**5*(-2723471*np.pi*eta*u**(7/2)/126000 + 6*u**3*(-14*eta**4 + 188*eta**3 + eta**2*(-4998308864*np.log(2)/1575 - 45409167*np.log(3)/350 + 154229/75 + 26171875*np.log(5)/18) + eta*(-52468750*np.log(5)/189 - 860317/1050 + 35643726*np.log(3)/175 + 305146624*np.log(2)/945)) + 6*u**2*(6*eta**3 - 27*eta**2/5 + eta*(-2358912*np.log(2)/25 - 827/3 + 1399437*np.log(3)/50 + 390625*np.log(5)/18)))
    Qnosterm1_prmprstar = prstar**3*(177406*np.pi*eta*u**(9/2)/945 + 4*eta*u**2*(8 - 6*eta) + 4*u**4*(eta**3*(792 - 615*np.pi**2/32) + eta**2*(-592*np.log(u)/5 - 9765625*np.log(5)/126 - 6396489*np.log(3)/70 - 1184*np.euler_gamma/5 + 45683/105 + 31633*np.pi**2/512 + 33693536*np.log(2)/105) + eta*(5428*np.log(u)/105 - 4396376*np.log(2)/105 - 601911*np.log(3)/280 - 93031*np.pi**2/1536 + 10856*np.euler_gamma/105 + 1249177/1050 + 9765625*np.log(5)/504)) + 4*u**3*(10*eta**3 - 131*eta**2 + eta*(-33048*np.log(3)/5 - 4348/15 + 496256*np.log(2)/45)))
    Qnos_prmprstar = Qnosterm1_prmprstar + Qnosterm2_prmprstar + Qnosterm3_prmprstar
    pr_prmprstar = 1/xi
    QalignSS_prmprstar = pr**3*pr_prmprstar*(4*am**2*(-15*eta**2/8 + 75*eta/32 - 15/32) + 4*am*ap*delta*(45*eta/8 - 5/16) + 4*ap**2*(-5*eta**2 + 165*eta/32 + 25/32))/r**3
    Qalign_prmprstar = QalignSS_prmprstar + Qnos_prmprstar
    Heven_prmprstar = np.sqrt(Aalign*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))*(Qalign_prmprstar + pr*pr_prmprstar*(2*Balignnp + 2))/(2*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))
    Heff_prmprstar = Heven_prmprstar
    Hreal_prmprstar = Heff_prmprstar*eta/np.sqrt(eta*(2*Heff - 2) + 1)
    if not verbose:
        return Hreal_prmprstar
    else:
        return Hreal,xi,Aalign,Balignnp,Bkerreqnp,Qalign,Heven,Hodd,QalignSS,Qnos,Galigna3,gam,gap,SOcalib,u,eta,ap,am,r,phi,prstar,pphi,chi1,chi2,m1,m2
def v5HM_unoptimized_dH_dpphi(m1, m2, r, phi, prstar, pphi, chi1, chi2,verbose = False):
    u = 1/r
    M = m1+m2
    delta = (m1-m2)/M
    eta = m1*m2/(M**2)
    a6 = 41.7877875-3021.93382*eta+33414.4394*eta**2-169019.14*eta**3+329523.262*eta**4
    gam = (np.divide(1,4)+(pphi**2/r**2)*(np.divide(15,32)-np.divide(9,32)*eta)+(1/r)*(np.divide(11,32)*eta+np.divide(3,32))+(pphi**4/r**4)*(np.divide(75,256)*eta**2-np.divide(45,128)*eta-np.divide(105,256))+(pphi**2/r**3)*(-np.divide(613,768)*eta**2-np.divide(35,128)*eta-np.divide(59,256))+(1/r**2)*(np.divide(103,192)*eta**2-np.divide(1,32)*eta+np.divide(5,64)))
    gap = (np.divide(7,4)+(pphi**2/r**2)*(-np.divide(45,32)*eta-np.divide(15,32))+(1/r)*(np.divide(23,32)*eta-np.divide(3,32))+(pphi**4/r**4)*(np.divide(345,256)*eta**2+np.divide(75,128)*eta+np.divide(105,256))+(pphi**2/r**3)*(-np.divide(1591,768)*eta**2-np.divide(267,128)*eta+np.divide(59,256))+(1/r**2)*(np.divide(109,192)*eta**2-np.divide(177,32)*eta-np.divide(5,64)))
    am = (m1*chi1-m2*chi2)/M
    ap = (m1*chi1+m2*chi2)/M
    Qnosterm3 = (prstar**8)*(u*eta*(-np.divide(35772,175)+np.divide(21668992,45)*np.log(2)+np.divide(6591861,350)*np.log(3)-np.divide(27734375,126)*np.log(5))+u**2*(-6*eta**4+np.divide(24,7)*eta**3+eta**2*(np.divide(870976,525)+np.divide(703189497728,33075)*np.log(2)+np.divide(332067403089,39200)*np.log(3)-np.divide(13841287201,4320)*np.log(7)-np.divide(468490234375,42336)*np.log(5))+eta*(-np.divide(2222547,2450)-np.divide(1347019456,525)*np.log(2)+np.divide(278690984375,169344)*np.log(5)+np.divide(13841287201,17280)*np.log(7)-np.divide(346536085761,156800)*np.log(3)))+np.divide(5994461,12700800)*np.pi*eta*u**(np.divide(5,2)))
    Qnosterm2 = (prstar**6)*(u**2*(6*eta**3-np.divide(27,5)*eta**2+eta*(-np.divide(827,3)-np.divide(2358912,25)*np.log(2)+np.divide(1399437,50)*np.log(3)+np.divide(390625,18)*np.log(5)))+u**3*(-14*eta**4+188*eta**3+eta**2*(np.divide(154229,75)-np.divide(4998308864,1575)*np.log(2)+np.divide(26171875,18)*np.log(5)-np.divide(45409167,350)*np.log(3))+eta*(-np.divide(860317,1050)+np.divide(305146624,945)*np.log(2)+np.divide(35643726,175)*np.log(3)-np.divide(52468750,189)*np.log(5)))-np.divide(2723471,756000)*np.pi*eta*u**(np.divide(7,2)))
    Qnosterm1 = (prstar**4)*(2*(4-3*eta)*eta*u**2+u**3*(10*eta**3-131*eta**2+eta*(-np.divide(4348,15)+np.divide(496256,45)*np.log(2)-np.divide(33048,5)*np.log(3)))+u**4*((792-np.divide(615,32)*np.pi**2)*eta**3+eta**2*(-np.divide(592,5)*np.log(u)+np.divide(31633,512)*np.pi**2-np.divide(1184,5)*np.euler_gamma+np.divide(45683,105)+np.divide(33693536,105)*np.log(2)-np.divide(6396489,70)*np.log(3)-np.divide(9765625,126)*np.log(5))+eta*(np.divide(5428,105)*np.log(u)+np.divide(1249177,1050)-np.divide(93031,1536)*np.pi**2+np.divide(10856,105)*np.euler_gamma-np.divide(4396376,105)*np.log(2)+np.divide(9765625,504)*np.log(5)-np.divide(601911,280)*np.log(3)))+np.divide(88703,1890)*np.pi*eta*u**(np.divide(9,2)))
    Qnos = Qnosterm1+Qnosterm2+Qnosterm3
    d5 = 0
    Dnons = r*(6730497718123.02*eta**3+22295347200.0*eta**2*d5+133772083200.0*eta**2*r**2+1822680546449.21*eta**2*r+80059249540278.2*eta**2+22295347200.0*eta*d5*r-193226342400.0*eta*d5+2589101062873.81*eta*r**2+10611661054566.2*eta*r-12049908701745.2*eta+5107745331375.71*r**2-326837426.241486*r*(14700.0*eta+42911.0)-39476764256925.6*r-(-5041721180160.0*eta**2-25392914995744.3*eta-879923036160.0*r**2-283115520.0*r*(14700.0*eta+42911.0)+104186110149937.0)*np.log(r)+5787938193408.0*np.log(r)**2+275059053208689.0)/(55296.0*eta*(14515200.0*eta**3-42636451.6032331*eta**2-7680.0*eta*(315.0*d5+890888.810272497)+4331361844.61149*eta+1002013764.01019)-967680.0*r**3*(-138240.0*eta**2-2675575.66847905*eta-5278341.3229329)-9216.0*r**2*(-197773496.793534*eta**2-7680.0*eta*(315.0*d5+405152.309729121)+2481453539.84635*eta+5805304367.87913)+r*(5927865218923.02*eta**3+70778880.0*eta**2*(315.0*d5+2561145.80918574)-138141470005001.0*eta**2-4718592.0*eta*(40950.0*d5+86207832.4415642)+450172889755120.0*eta+86618264430493.3*(1-0.496948781616935*eta)**2+188440788778196.0)+5787938193408.0*r*np.log(r)**2+(-1698693120.0*eta*(11592.0*eta+69847.0)+879923036160.0*r**3+283115520.0*r**2*(14700.0*eta+42911.0)+49152.0*r*(102574080.0*eta**2+409207698.136075*eta-2119671837.36038))*np.log(r))
    Anons = 7680.0*r**4*(-5416406.59541186*eta**2+28.0*eta*(1920.0*a6+733955.307463037)+2048.0*eta*(756.0*eta+336.0*r+407.0)*np.log(r)-7.0*r*(-185763.092693281*eta**2+938918.400156317*eta-245760.0)-3440640.0)/(241555486248.807*eta**4+1120.0*eta**3*(-17833256.898555*r**2-163683964.822551*r-1188987459.03162)+7.0*eta**2*(-39321600.0*a6*(3.0*r+59.0)+745857848.115604*a6+1426660551.8844*r**5-3089250703.76879*r**4-6178501407.53758*r**3+2064783811.32587*r**2+122635399361.987*r+276057889687.011)+67645734912.0*eta**2*np.log(r)**2+53760.0*eta*(7680.0*a6*(r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+128.0*r*(-6852.34813868015*r**4+4264.6962773603*r**3+8529.39255472061*r**2+13218.7851094412*r-33722.4297811176)+113485.217444961*r*(-r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+148.04406601634*r*(349.0*r**4+1926.0*r**3+3852.0*r**2+7704.0*r+36400.0))+32768.0*eta*(-1882456.23663972*eta**2-38842241.4769507*eta+161280.0*r**5+480.0*r**4*(756.0*eta+1079.0)+960.0*r**3*(756.0*eta+1079.0)+1920.0*r**2*(588.0*eta+1079.0)+240.0*r*(-3024.0*eta**2-7466.27061066206*eta+17264.0)+13447680.0)*np.log(r)+13212057600.0*r**5)
    xi = np.sqrt(Dnons)*(Anons+ap**2*u*u)/(1+ap**2*u*u)
    pr = prstar/xi
    QalignSS = ((pr**4)/(r**3))*(ap**2*(-5*eta*eta+eta*np.divide(165,32)+np.divide(25,32))+delta*ap*am*(eta*np.divide(45,8)-np.divide(5,16))+am**2*(-eta*eta*np.divide(15,8)+eta*np.divide(75,32)-np.divide(15,32)))
    BnpalignSS = ((1/r**3)*(ap**2*(3*eta+np.divide(45,16))-delta*ap*am*np.divide(21,8)+am**2*(eta*np.divide(3,4)-np.divide(3,16)))+(1/r**4)*(ap**2*(-eta*np.divide(1171,64)-np.divide(861,64))+delta*ap*am*(eta*np.divide(13,16)+np.divide(449,32))+am**2*(eta*eta*np.divide(1,16)+eta*np.divide(115,64)-np.divide(37,64))))
    AalignSS = ((1/r**4)*(ap**2*np.divide(9,8)-delta*ap*am*np.divide(5,4)+am**2*(eta*np.divide(1,2)+np.divide(1,8)))+(1/r**5)*(ap**2*(-eta*np.divide(175,64)-np.divide(225,64))+delta*ap*am*(-eta*np.divide(39,16)+np.divide(117,32))+am**2*(eta*eta*np.divide(21,16)-eta*np.divide(81,64)-np.divide(9,64))))
    Qalign = Qnos+QalignSS
    Balignnp = -1+ap**2*u*u+Anons*Dnons+BnpalignSS
    Bkerreqnp = -(1+2/r)/(r**2+ap**2*(1+2/r))
    Aalign = (ap**2*u*u+Anons+AalignSS)/(1+ap**2*(1+2/r)/(r**2))
    Galigna3 = pphi*(delta*am*ap**2-ap**3)/(4*r**2)
    dSO = -7.71251231383957*am**3-17.2294679794015*am**2*ap-238.430383378296*am**2*eta+69.5461667822545*am**2-10.5225438990315*am*ap**2+362.767393298729*am*ap*eta-85.8036338010274*am*ap-1254.66845939312*am*eta**2+472.431937787377*am*eta-39.742317057316*am-7.58458103577458*ap**3-42.7601129678844*ap**2*eta+18.1783435552183*ap**2-201.905934468847*ap*eta**2-90.5790079104259*ap*eta+49.6299175121658*ap+478.546231305475*eta**3+679.521769948995*eta**2-177.334831768076*eta-37.6897780220529
    SOcalib = eta*dSO*ap*pphi*(u**3)
    Heven = np.sqrt(Aalign*(1+pphi*pphi/r**2+(1+Balignnp)*pr*pr+Bkerreqnp*pphi*pphi*ap**2/r**2+Qalign))
    Hodd = (pphi*(gap*ap+delta*gam*am)+SOcalib+Galigna3)/(r**3+ap**2*(r+2))
    Heff = Hodd+Heven
    Hreal = np.sqrt(1+2*eta*(Heff-1))
    
    gam_prmpphi = pphi**3*(75*eta**2/64 - 45*eta/32 - 105/64)/r**4 + pphi*(15/16 - 9*eta/16)/r**2 + pphi*(-613*eta**2/384 - 35*eta/64 - 59/128)/r**3
    gap_prmpphi = pphi**3*(345*eta**2/64 + 75*eta/32 + 105/64)/r**4 + pphi*(-45*eta/16 - 15/16)/r**2 + pphi*(-1591*eta**2/384 - 267*eta/64 + 59/128)/r**3
    Galigna3_prmpphi = (am*ap**2*delta - ap**3)/(4*r**2)
    SOcalib_prmpphi = ap*dSO*eta*u**3
    Heven_prmpphi = np.sqrt(Aalign*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))*(2*Bkerreqnp*ap**2*pphi/r**2 + 2*pphi/r**2)/(2*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))
    Hodd_prmpphi = (Galigna3_prmpphi + SOcalib_prmpphi + am*delta*gam + ap*gap + pphi*(am*delta*gam_prmpphi + ap*gap_prmpphi))/(ap**2*(r + 2) + r**3)
    Heff_prmpphi = Heven_prmpphi + Hodd_prmpphi
    Hreal_prmpphi = Heff_prmpphi*eta/np.sqrt(eta*(2*Heff - 2) + 1)
    if not verbose:
        return Hreal_prmpphi
    else:
        return Hreal,xi,Aalign,Balignnp,Bkerreqnp,Qalign,Heven,Hodd,QalignSS,Qnos,Galigna3,gam,gap,SOcalib,u,eta,ap,am,r,phi,prstar,pphi,chi1,chi2,m1,m2
def v5HM_unoptimized_omega_circ(m1, m2, r, pphi, chi1, chi2,verbose = False):
    u = 1/r
    
    M = m1+m2
    
    delta = (m1-m2)/M
    
    eta = m1*m2/(M**2)
    
    a6 = 41.7877875-3021.93382*eta+33414.4394*eta**2-169019.14*eta**3+329523.262*eta**4
    
    gam = (np.divide(1,4)+(pphi**2/r**2)*(np.divide(15,32)-np.divide(9,32)*eta)+(1/r)*(np.divide(11,32)*eta+np.divide(3,32))+(pphi**4/r**4)*(np.divide(75,256)*eta**2-np.divide(45,128)*eta-np.divide(105,256))+(pphi**2/r**3)*(-np.divide(613,768)*eta**2-np.divide(35,128)*eta-np.divide(59,256))+(1/r**2)*(np.divide(103,192)*eta**2-np.divide(1,32)*eta+np.divide(5,64)))
    
    gap = (np.divide(7,4)+(pphi**2/r**2)*(-np.divide(45,32)*eta-np.divide(15,32))+(1/r)*(np.divide(23,32)*eta-np.divide(3,32))+(pphi**4/r**4)*(np.divide(345,256)*eta**2+np.divide(75,128)*eta+np.divide(105,256))+(pphi**2/r**3)*(-np.divide(1591,768)*eta**2-np.divide(267,128)*eta+np.divide(59,256))+(1/r**2)*(np.divide(109,192)*eta**2-np.divide(177,32)*eta-np.divide(5,64)))
    
    am = (m1*chi1-m2*chi2)/M
    
    ap = (m1*chi1+m2*chi2)/M
    
    Qnosterm3 = (0**8)*(u*eta*(-np.divide(35772,175)+np.divide(21668992,45)*np.log(2)+np.divide(6591861,350)*np.log(3)-np.divide(27734375,126)*np.log(5))+u**2*(-6*eta**4+np.divide(24,7)*eta**3+eta**2*(np.divide(870976,525)+np.divide(703189497728,33075)*np.log(2)+np.divide(332067403089,39200)*np.log(3)-np.divide(13841287201,4320)*np.log(7)-np.divide(468490234375,42336)*np.log(5))+eta*(-np.divide(2222547,2450)-np.divide(1347019456,525)*np.log(2)+np.divide(278690984375,169344)*np.log(5)+np.divide(13841287201,17280)*np.log(7)-np.divide(346536085761,156800)*np.log(3)))+np.divide(5994461,12700800)*np.pi*eta*u**(np.divide(5,2)))
    
    Qnosterm2 = (0**6)*(u**2*(6*eta**3-np.divide(27,5)*eta**2+eta*(-np.divide(827,3)-np.divide(2358912,25)*np.log(2)+np.divide(1399437,50)*np.log(3)+np.divide(390625,18)*np.log(5)))+u**3*(-14*eta**4+188*eta**3+eta**2*(np.divide(154229,75)-np.divide(4998308864,1575)*np.log(2)+np.divide(26171875,18)*np.log(5)-np.divide(45409167,350)*np.log(3))+eta*(-np.divide(860317,1050)+np.divide(305146624,945)*np.log(2)+np.divide(35643726,175)*np.log(3)-np.divide(52468750,189)*np.log(5)))-np.divide(2723471,756000)*np.pi*eta*u**(np.divide(7,2)))
    
    Qnosterm1 = (0**4)*(2*(4-3*eta)*eta*u**2+u**3*(10*eta**3-131*eta**2+eta*(-np.divide(4348,15)+np.divide(496256,45)*np.log(2)-np.divide(33048,5)*np.log(3)))+u**4*((792-np.divide(615,32)*np.pi**2)*eta**3+eta**2*(-np.divide(592,5)*np.log(u)+np.divide(31633,512)*np.pi**2-np.divide(1184,5)*np.euler_gamma+np.divide(45683,105)+np.divide(33693536,105)*np.log(2)-np.divide(6396489,70)*np.log(3)-np.divide(9765625,126)*np.log(5))+eta*(np.divide(5428,105)*np.log(u)+np.divide(1249177,1050)-np.divide(93031,1536)*np.pi**2+np.divide(10856,105)*np.euler_gamma-np.divide(4396376,105)*np.log(2)+np.divide(9765625,504)*np.log(5)-np.divide(601911,280)*np.log(3)))+np.divide(88703,1890)*np.pi*eta*u**(np.divide(9,2)))
    
    Qnos = Qnosterm1+Qnosterm2+Qnosterm3
    
    d5 = 0
    
    Dnons = r*(6730497718123.02*eta**3+22295347200.0*eta**2*d5+133772083200.0*eta**2*r**2+1822680546449.21*eta**2*r+80059249540278.2*eta**2+22295347200.0*eta*d5*r-193226342400.0*eta*d5+2589101062873.81*eta*r**2+10611661054566.2*eta*r-12049908701745.2*eta+5107745331375.71*r**2-326837426.241486*r*(14700.0*eta+42911.0)-39476764256925.6*r-(-5041721180160.0*eta**2-25392914995744.3*eta-879923036160.0*r**2-283115520.0*r*(14700.0*eta+42911.0)+104186110149937.0)*np.log(r)+5787938193408.0*np.log(r)**2+275059053208689.0)/(55296.0*eta*(14515200.0*eta**3-42636451.6032331*eta**2-7680.0*eta*(315.0*d5+890888.810272497)+4331361844.61149*eta+1002013764.01019)-967680.0*r**3*(-138240.0*eta**2-2675575.66847905*eta-5278341.3229329)-9216.0*r**2*(-197773496.793534*eta**2-7680.0*eta*(315.0*d5+405152.309729121)+2481453539.84635*eta+5805304367.87913)+r*(5927865218923.02*eta**3+70778880.0*eta**2*(315.0*d5+2561145.80918574)-138141470005001.0*eta**2-4718592.0*eta*(40950.0*d5+86207832.4415642)+450172889755120.0*eta+86618264430493.3*(1-0.496948781616935*eta)**2+188440788778196.0)+5787938193408.0*r*np.log(r)**2+(-1698693120.0*eta*(11592.0*eta+69847.0)+879923036160.0*r**3+283115520.0*r**2*(14700.0*eta+42911.0)+49152.0*r*(102574080.0*eta**2+409207698.136075*eta-2119671837.36038))*np.log(r))
    
    Anons = 7680.0*r**4*(-5416406.59541186*eta**2+28.0*eta*(1920.0*a6+733955.307463037)+2048.0*eta*(756.0*eta+336.0*r+407.0)*np.log(r)-7.0*r*(-185763.092693281*eta**2+938918.400156317*eta-245760.0)-3440640.0)/(241555486248.807*eta**4+1120.0*eta**3*(-17833256.898555*r**2-163683964.822551*r-1188987459.03162)+7.0*eta**2*(-39321600.0*a6*(3.0*r+59.0)+745857848.115604*a6+1426660551.8844*r**5-3089250703.76879*r**4-6178501407.53758*r**3+2064783811.32587*r**2+122635399361.987*r+276057889687.011)+67645734912.0*eta**2*np.log(r)**2+53760.0*eta*(7680.0*a6*(r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+128.0*r*(-6852.34813868015*r**4+4264.6962773603*r**3+8529.39255472061*r**2+13218.7851094412*r-33722.4297811176)+113485.217444961*r*(-r**4+2.0*r**3+4.0*r**2+8.0*r+16.0)+148.04406601634*r*(349.0*r**4+1926.0*r**3+3852.0*r**2+7704.0*r+36400.0))+32768.0*eta*(-1882456.23663972*eta**2-38842241.4769507*eta+161280.0*r**5+480.0*r**4*(756.0*eta+1079.0)+960.0*r**3*(756.0*eta+1079.0)+1920.0*r**2*(588.0*eta+1079.0)+240.0*r*(-3024.0*eta**2-7466.27061066206*eta+17264.0)+13447680.0)*np.log(r)+13212057600.0*r**5)
    
    xi = np.sqrt(Dnons)*(Anons+ap**2*u*u)/(1+ap**2*u*u)
    
    pr = 0/xi
    
    QalignSS = ((pr**4)/(r**3))*(ap**2*(-5*eta*eta+eta*np.divide(165,32)+np.divide(25,32))+delta*ap*am*(eta*np.divide(45,8)-np.divide(5,16))+am**2*(-eta*eta*np.divide(15,8)+eta*np.divide(75,32)-np.divide(15,32)))
    
    BnpalignSS = ((1/r**3)*(ap**2*(3*eta+np.divide(45,16))-delta*ap*am*np.divide(21,8)+am**2*(eta*np.divide(3,4)-np.divide(3,16)))+(1/r**4)*(ap**2*(-eta*np.divide(1171,64)-np.divide(861,64))+delta*ap*am*(eta*np.divide(13,16)+np.divide(449,32))+am**2*(eta*eta*np.divide(1,16)+eta*np.divide(115,64)-np.divide(37,64))))
    
    AalignSS = ((1/r**4)*(ap**2*np.divide(9,8)-delta*ap*am*np.divide(5,4)+am**2*(eta*np.divide(1,2)+np.divide(1,8)))+(1/r**5)*(ap**2*(-eta*np.divide(175,64)-np.divide(225,64))+delta*ap*am*(-eta*np.divide(39,16)+np.divide(117,32))+am**2*(eta*eta*np.divide(21,16)-eta*np.divide(81,64)-np.divide(9,64))))
    
    Qalign = Qnos+QalignSS
    
    Balignnp = -1+ap**2*u*u+Anons*Dnons+BnpalignSS
    
    Bkerreqnp = -(1+2/r)/(r**2+ap**2*(1+2/r))
    
    Aalign = (ap**2*u*u+Anons+AalignSS)/(1+ap**2*(1+2/r)/(r**2))
    
    Galigna3 = pphi*(delta*am*ap**2-ap**3)/(4*r**2)
    
    dSO = -7.71251231383957*am**3-17.2294679794015*am**2*ap-238.430383378296*am**2*eta+69.5461667822545*am**2-10.5225438990315*am*ap**2+362.767393298729*am*ap*eta-85.8036338010274*am*ap-1254.66845939312*am*eta**2+472.431937787377*am*eta-39.742317057316*am-7.58458103577458*ap**3-42.7601129678844*ap**2*eta+18.1783435552183*ap**2-201.905934468847*ap*eta**2-90.5790079104259*ap*eta+49.6299175121658*ap+478.546231305475*eta**3+679.521769948995*eta**2-177.334831768076*eta-37.6897780220529
    
    SOcalib = eta*dSO*ap*pphi*(u**3)
    
    Heven = np.sqrt(Aalign*(1+pphi*pphi/r**2+(1+Balignnp)*pr*pr+Bkerreqnp*pphi*pphi*ap**2/r**2+Qalign))
    
    Hodd = (pphi*(gap*ap+delta*gam*am)+SOcalib+Galigna3)/(r**3+ap**2*(r+2))
    
    Heff = Hodd+Heven
    
    Hreal = np.sqrt(1+2*eta*(Heff-1))
    
    
    gam_prmpphi_preq0 = pphi**3*(75*eta**2/64 - 45*eta/32 - 105/64)/r**4 + pphi*(15/16 - 9*eta/16)/r**2 + pphi*(-613*eta**2/384 - 35*eta/64 - 59/128)/r**3
    gap_prmpphi_preq0 = pphi**3*(345*eta**2/64 + 75*eta/32 + 105/64)/r**4 + pphi*(-45*eta/16 - 15/16)/r**2 + pphi*(-1591*eta**2/384 - 267*eta/64 + 59/128)/r**3
    Galigna3_prmpphi_preq0 = (am*ap**2*delta - ap**3)/(4*r**2)
    SOcalib_prmpphi_preq0 = ap*dSO*eta*u**3
    Heven_prmpphi_preq0 = np.sqrt(Aalign*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))*(2*Bkerreqnp*ap**2*pphi/r**2 + 2*pphi/r**2)/(2*(Bkerreqnp*ap**2*pphi**2/r**2 + Qalign + pphi**2/r**2 + pr**2*(Balignnp + 1) + 1))
    Hodd_prmpphi_preq0 = (Galigna3_prmpphi_preq0 + SOcalib_prmpphi_preq0 + am*delta*gam + ap*gap + pphi*(am*delta*gam_prmpphi_preq0 + ap*gap_prmpphi_preq0))/(ap**2*(r + 2) + r**3)
    Heff_prmpphi_preq0 = Heven_prmpphi_preq0 + Hodd_prmpphi_preq0
    Hreal_prmpphi_preq0 = Heff_prmpphi_preq0*eta/np.sqrt(eta*(2*Heff - 2) + 1)
    if not verbose:
        return Hreal_prmpphi_preq0
    else:
        return Hreal,xi,Aalign,Balignnp,Bkerreqnp,Qalign,Heven,Hodd,QalignSS,Qnos,Galigna3,gam,gap,SOcalib,u,eta,ap,am,r,phi,pphi,chi1,chi2,m1,m2
def v5HM_unoptimized_dH_dr_circ(m1, m2, r, pphi, chi1, chi2,verbose = False):
