import numpy as np
def v5HM_BOB_optimized_conservative_initial_conditions(u, params):
    m1, m2, chi1, chi2, a6, dSO, Omega = params[0], params[1], params[2], params[3], params[4], params[5], params[6]
    r, pphi = u[0], u[1]
    eta = m1*m2/((m1 + m2)*(m1 + m2))
    tmp0 = ((r)*(r)*(r))
    tmp1 = m1 + m2
    tmp10 = ((r)*(r)*(r)*(r))
    tmp17 = m1 - m2
    tmp23 = ((r)*(r))
    tmp28 = ((pphi)*(pphi))
    tmp30 = ((m1)*(m1))
    tmp31 = ((m2)*(m2))
    tmp35 = ((r)*(r)*(r)*(r)*(r))
    tmp37 = ((pphi)*(pphi)*(pphi)*(pphi))
    tmp47 = (1.0/(r))
    tmp67 = np.log(r)
    tmp69 = a6*(3.0*r + 59.0)
    tmp70 = ((m1)*(m1)*(m1))
    tmp71 = ((m2)*(m2)*(m2))
    tmp74 = 8.0*r
    tmp93 = 53760.0*r
    tmp94 = 907881.73955968802*r
    tmp96 = 1140531.4845898801*r
    tmp104 = 53760.0*a6 + 20550748.608964998
    tmp106 = 2.22557561555965e-7*r
    tmp2 = (1.0/((tmp1)*(tmp1)))
    tmp5 = chi1*m1 + chi2*m2
    tmp11 = (1.0/(tmp10))
    tmp13 = (1.0/((tmp1)*(tmp1)*(tmp1)))
    tmp16 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp18 = chi1*m1 - chi2*m2
    tmp21 = (1.0/(tmp0))
    tmp24 = (1.0/(tmp23))
    tmp36 = (1.0/(tmp35))
    tmp52 = 2*tmp47 + 1
    tmp72 = np.power(tmp1, -6)
    tmp75 = 2.0*tmp0 + 4.0*tmp23 + tmp74 + 16.0
    tmp79 = ((m1)*(m1)*(m1)*(m1))*((m2)*(m2)*(m2)*(m2))/np.power(tmp1, 8)
    tmp92 = 1692004.4940084701*r + 545881.12350211805*tmp0 - 877100.56175105902*tmp10 + 1091762.2470042401*tmp23 - 4316471.01198305
    tmp95 = 226970.43488992201*tmp0 - 113485.217444961*tmp10 + 453940.86977984401*tmp23 + tmp94 + 1815763.47911938
    tmp97 = 285132.87114747101*tmp0 + 51667.379039702697*tmp10 + 570265.74229494203*tmp23 + tmp96 + 5388804.0029947804
    tmp6 = ((tmp5)*(tmp5))
    tmp19 = tmp17*tmp18
    tmp22 = pphi*tmp21
    tmp25 = m1*m2*tmp2
    tmp29 = tmp21*tmp28
    tmp32 = tmp16*tmp30*tmp31
    tmp39 = tmp5/tmp1
    tmp45 = pphi*tmp24
    tmp48 = tmp24*tmp28
    tmp62 = ((tmp18)*(tmp18))*tmp2
    tmp73 = tmp70*tmp71*tmp72
    tmp76 = a6*(tmp10 + tmp75)
    tmp108 = ((pphi)*(pphi)*(pphi))*tmp11
    tmp7 = tmp2*tmp6
    tmp15 = dSO*m1*m2*tmp13*tmp5
    tmp20 = -tmp13*((tmp5)*(tmp5)*(tmp5)) + tmp16*tmp19*tmp6
    tmp27 = -45.0/16.0*tmp25 - 0.9375
    tmp34 = (75.0/32.0)*tmp25 + (345.0/64.0)*tmp32 + 1.640625
    tmp41 = (9.0/16.0)*tmp25 - 0.9375
    tmp44 = tmp19*tmp2
    tmp63 = tmp13*tmp19*tmp5
    tmp66 = -21.0/16.0*tmp16*tmp30*tmp31 + (81.0/64.0)*tmp25
    tmp68 = 756.0*tmp25
    tmp78 = tmp25*tmp67
    tmp80 = tmp32*((tmp67)*(tmp67))
    tmp90 = 688128.0*r + 1548288.0*tmp25 + 833536.0
    tmp98 = tmp23*(1128960.0*tmp25 + 2071680.0)
    tmp99 = tmp0*(725760.0*tmp25 + 1035840.0)
    tmp100 = tmp10*(362880.0*tmp25 + 517920.0)
    tmp101 = r*(-1791904.9465588899*tmp25 - 725760.0*tmp32 + 4143360.0)
    tmp105 = r*(6572428.80109422*m1*m2*tmp2 - 1300341.64885297*tmp32 - 1720320.0)
    tmp8 = tmp0 + tmp7*(r + 2)
    tmp43 = (75.0/64.0)*tmp16*tmp30*tmp31 - 45.0/32.0*tmp25 - 1.640625
    tmp50 = tmp39*(tmp11*tmp37*((75.0/128.0)*tmp25 + (345.0/256.0)*tmp32 + 105.0/256.0) + tmp24*((109.0/192.0)*tmp16*tmp30*tmp31 - 177.0/32.0*tmp25 - 5.0/64.0) + tmp29*(-267.0/128.0*tmp25 - 1591.0/768.0*tmp32 + 59.0/256.0) + tmp47*((23.0/32.0)*tmp25 - 3.0/32.0) + tmp48*(-45.0/32.0*tmp25 - 15.0/32.0) + 7.0/4.0) + tmp44*(tmp11*tmp37*((75.0/256.0)*tmp16*tmp30*tmp31 - 45.0/128.0*tmp25 - 105.0/256.0) + tmp24*(-1.0/32.0*tmp25 + (103.0/192.0)*tmp32 + 5.0/64.0) + tmp29*(-35.0/128.0*tmp25 - 613.0/768.0*tmp32 - 59.0/256.0) + tmp47*((11.0/32.0)*tmp25 + 3.0/32.0) + tmp48*(15.0/32.0 - 9.0/32.0*tmp25) + 1.0/4.0)
    tmp77 = tmp68 + 1079.0
    tmp81 = 13212057600.0*tmp35 + 241555486248.80701*tmp79 + 67645734912.0*tmp80
    tmp102 = 32768.0*tmp100 + 32768.0*tmp101 - 1272782568716.72*tmp25 - 61684325962.210297*tmp32 + 5284823040.0*tmp35 + 32768.0*tmp98 + 32768.0*tmp99 + 440653578240.0
    tmp9 = (1.0/(tmp8))
    tmp51 = pphi*tmp50 + tmp15*tmp22 + (1.0/4.0)*tmp20*tmp45
    tmp54 = tmp24*tmp52*tmp7 + 1
    tmp55 = tmp23 + tmp52*tmp7
    tmp82 = 7680.0*tmp10*(2048.0*m1*m2*tmp2*tmp67*(336.0*r + tmp68 + 407.0) + 28.0*m1*m2*tmp2*(1920.0*a6 + 733955.30746303697) - 7.0*r*(938918.40015631705*m1*m2*tmp2 - 185763.09269328101*tmp32 - 245760.0) - 5416406.5954118604*tmp32 - 3440640.0)/(53760.0*tmp25*(113485.217444961*r*(-tmp10 + tmp75) + 148.04406601634*r*(7704.0*r + 1926.0*tmp0 + 349.0*tmp10 + 3852.0*tmp23 + 36400.0) + 128.0*r*(13218.7851094412*r + 4264.6962773603*tmp0 - 6852.3481386801504*tmp10 + 8529.3925547206109*tmp23 - 33722.4297811176) + 7680.0*tmp76) + 7.0*tmp32*(745857848.11560404*a6 + 122635399361.987*r - 6178501407.5375795*tmp0 - 3089250703.7687898*tmp10 + 2064783811.32587*tmp23 + 1426660551.8843999*tmp35 - 39321600.0*tmp69 + 276057889687.01099) + 1120.0*tmp73*(-163683964.82255101*r - 17833256.898554999*tmp23 - 1188987459.03162) + 32768.0*tmp78*(240.0*r*(-7466.2706106620599*tmp25 - 3024.0*tmp32 + 17264.0) + 960.0*tmp0*tmp77 + 480.0*tmp10*tmp77 + 1920.0*tmp23*(588.0*tmp25 + 1079.0) - 38842241.476950698*tmp25 - 1882456.2366397199*tmp32 + 161280.0*tmp35 + 13447680.0) + tmp81) + tmp11*(tmp62*((1.0/2.0)*tmp25 + 1.0/8.0) - 5.0/4.0*tmp63 + (9.0/8.0)*tmp7) + tmp24*tmp7 + tmp36*(tmp62*(-tmp66 - 9.0/64.0) + tmp63*(117.0/32.0 - 39.0/16.0*tmp25) + tmp7*(-175.0/64.0*tmp25 - 225.0/64.0))
    tmp103 = (1.0/(tmp102*tmp78 + tmp25*(412876800.0*tmp76 + tmp92*tmp93 + tmp93*tmp95 + tmp93*tmp97) + tmp32*(5221004936.8092299*a6 + 858447795533.90906*r - 43249509852.7631*tmp0 - 21624754926.3815*tmp10 + 14453486679.281099*tmp23 + 9986623863.1907997*tmp35 - 275251200.0*tmp69 + 1932405227809.0801) + tmp73*(-183326040601.25699*r - 19973247726.381599*tmp23 - 1331665954115.4099) + tmp81))
    tmp56 = (1.0/(tmp55))
    tmp83 = (1.0/(tmp54))
    tmp58 = -tmp52*tmp56
    tmp59 = tmp48*tmp58*tmp7 + tmp48 + 1
    tmp85 = np.sqrt(tmp59*tmp82*tmp83)
    tmp107 = tmp25/np.sqrt(tmp25*(2*tmp51*tmp9 + 2*tmp85 - 2) + 1)
    Hreal_prmr = tmp107*(tmp51*(-3*tmp23 - tmp7)/((tmp8)*(tmp8)) + tmp54*tmp85*((1.0/2.0)*tmp59*(tmp83*(tmp0*tmp103*(30720.0*m1*m2*tmp104*tmp2 + 30720.0*m1*m2*tmp2*tmp67*tmp90 - 30720.0*tmp105 - 166392010611.052*tmp32 - 105696460800.0) + tmp10*tmp103*(7680.0*tmp25*tmp47*tmp90 - 50476253192.403603*tmp25 + 9986623863.1907902*tmp32 + 5284823040.0*tmp78 + 13212057600.0) + tmp10*(1.3162167359092599e-19*m1*m2*tmp104*tmp2 + 1.3162167359092599e-19*m1*m2*tmp2*tmp67*tmp90 - 1.3162167359092599e-19*tmp105 - 7.1291650093703898e-13*tmp32 - 4.5286279502388399e-13)*(-66060288000.0*tmp10 - tmp102*tmp25*tmp47 - tmp25*(412876800.0*a6*(4*tmp0 + 6.0*tmp23 + tmp74 + 8.0) + 201084856528.177*r + 56877242932.044098*tmp0 - 50476253192.403603*tmp10 + 113754485864.088*tmp23 + tmp93*(2183524.4940084699*r - 3508402.2470042398*tmp0 + 1637643.37050636*tmp23 + 1692004.4940084701) + tmp93*(-453940.86977984401*tmp0 + 680911.30466976599*tmp23 + tmp94 + 907881.73955968802) + tmp93*(206669.51615881099*tmp0 + 855398.613442412*tmp23 + tmp96 + 1140531.4845898801) + 155264066234.24799) - 135291469824.0*tmp32*tmp47*tmp67 - tmp32*(-825753600.0*a6 + 28906973358.562199*r - 86499019705.526398*tmp0 + 49933119315.954002*tmp10 - 129748529558.289*tmp23 + 858447795533.90906) + tmp70*tmp71*tmp72*(39946495452.763199*r + 183326040601.25699) - tmp78*(32768.0*r*(2257920.0*tmp25 + 4143360.0) + 32768.0*tmp0*(1451520.0*tmp25 + 2071680.0) + 26424115200.0*tmp10 + 32768.0*tmp23*(2177280.0*tmp25 + 3107520.0) - 58717141288.841904*tmp25 - 23781703680.0*tmp32 + 135769620480.0))/((tmp25*(tmp106*tmp92 + tmp106*tmp95 + tmp106*tmp97 + 0.00170924207274981*tmp76) + tmp32*(0.021614102076040202*a6 + 3.5538327399018002*r - 0.17904586032964401*tmp0 - 0.089522930164821907*tmp10 + 0.059835058618348702*tmp23 + 0.041342980936911501*tmp35 - 0.0011394947151665399*tmp69 + 7.9998399449253697) + 0.054695746327994003*tmp35 + tmp73*(-0.75893966826498704*r - 0.082685961873822905*tmp23 - 5.5128781167229297) + tmp78*(1.3565413275792199e-7*tmp100 + 1.3565413275792199e-7*tmp101 - 5.2691105819295299*tmp25 - 0.25536296823610299*tmp32 + 0.021878298531197701*tmp35 + 1.3565413275792199e-7*tmp98 + 1.3565413275792199e-7*tmp99 + 1.8242333680060501) + tmp79 + 0.28004222119932898*tmp80)*(tmp25*(tmp106*tmp92 + tmp106*tmp95 + tmp106*tmp97 + 0.00170924207274981*tmp76) + tmp32*(0.021614102076040202*a6 + 3.5538327399018002*r - 0.17904586032964401*tmp0 - 0.089522930164821907*tmp10 + 0.059835058618348702*tmp23 + 0.041342980936911501*tmp35 - 0.0011394947151665399*tmp69 + 7.9998399449253697) + 0.054695746327994003*tmp35 + tmp73*(-0.75893966826498704*r - 0.082685961873822905*tmp23 - 5.5128781167229297) + tmp78*(1.3565413275792199e-7*tmp100 + 1.3565413275792199e-7*tmp101 - 5.2691105819295299*tmp25 - 0.25536296823610299*tmp32 + 0.021878298531197701*tmp35 + 1.3565413275792199e-7*tmp98 + 1.3565413275792199e-7*tmp99 + 1.8242333680060501) + tmp79 + 0.28004222119932898*tmp80)) - 2*tmp21*tmp7 + tmp36*(5*tmp13*tmp17*tmp18*tmp5 - 4*tmp62*((1.0/2.0)*tmp25 + 0.125) - 9.0/2.0*tmp7) - (5*tmp62*(-tmp66 - 0.140625) + 5*tmp63*(3.65625 - 39.0/16.0*tmp25) + 5*tmp7*(-175.0/64.0*tmp25 - 3.515625))/np.power(r, 6)) + tmp82*(2*tmp11*tmp7 + tmp21*tmp7*(4*tmp47 + 2))/((tmp54)*(tmp54))) + (1.0/2.0)*tmp82*tmp83*(tmp2*tmp24*tmp28*tmp6*(2*tmp24*tmp56 - tmp52*(-2*r + 2*tmp2*tmp24*tmp6)/((tmp55)*(tmp55))) - 2*tmp29*tmp58*tmp7 - 2*tmp29))/(tmp59*tmp82) + tmp9*(-3*pphi*tmp11*tmp15 + pphi*(tmp39*(-tmp11*tmp28*(-801.0/128.0*tmp25 - 1591.0/256.0*tmp32 + 0.69140625) - tmp21*((109.0/96.0)*tmp16*tmp30*tmp31 - 177.0/16.0*tmp25 - 0.15625) - tmp24*((23.0/32.0)*tmp25 - 0.09375) - tmp27*tmp29 - tmp34*tmp36*tmp37) + tmp44*(-tmp11*tmp28*(-105.0/128.0*tmp25 - 613.0/256.0*tmp32 - 0.69140625) + tmp21*tmp28*tmp41 - tmp21*(-1.0/16.0*tmp25 + (103.0/96.0)*tmp32 + 0.15625) - tmp24*((11.0/32.0)*tmp25 + 0.09375) - tmp36*tmp37*tmp43)) - 1.0/2.0*tmp20*tmp22))
    Hreal_prmpphi = tmp107*(tmp85*(2*pphi*tmp24*tmp58*tmp7 + 2*pphi*tmp24)/(2*tmp48*tmp58*tmp7 + 2*tmp48 + 2) + tmp9*(pphi*(tmp39*(tmp108*tmp34 + tmp22*(-267.0/64.0*tmp25 - 1591.0/384.0*tmp32 + 0.4609375) + tmp27*tmp45) + tmp44*(tmp108*tmp43 + tmp22*(-35.0/64.0*tmp25 - 613.0/384.0*tmp32 - 0.4609375) - tmp41*tmp45)) + tmp15*tmp21 + (1.0/4.0)*tmp20*tmp24 + tmp50))
    return np.array([Hreal_prmr, Omega - Hreal_prmpphi/eta])
