import numpy as np
from scipy.special import gamma,factorial
import numpy as np
def v5HM_optimized_flux_verbose(m1,m2,r,phi,prstar,pphi,chi1,chi2,Hreal,Omega,Omega_circ):
    tmp0 = np.power(Omega, 4.0/3.0)
    tmp1 = m1 + m2
    tmp5 = ((m1)*(m1))
    tmp6 = ((m2)*(m2))
    tmp9 = ((m1)*(m1)*(m1))
    tmp10 = ((m2)*(m2)*(m2))
    tmp13 = np.power(Omega, 2.0/3.0)
    tmp16 = ((m1)*(m1)*(m1)*(m1)*(m1))
    tmp18 = ((m2)*(m2)*(m2)*(m2)*(m2))
    tmp21 = ((Omega)*(Omega))
    tmp26 = np.pi*Hreal*Omega
    tmp32 = m1 - m2
    tmp120 = ((m2)*(m2)*(m2)*(m2))
    tmp121 = ((m1)*(m1)*(m1)*(m1))
    tmp157 = np.power(Omega, 9)
    tmp158 = np.cbrt(Omega)
    tmp190 = np.power(Omega, 8.0/3.0)
    tmp191 = np.power(Omega, 10.0/3.0)
    tmp192 = np.power(Omega, 5.0/3.0)
    tmp204 = ((np.pi)*(np.pi))
    tmp7 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp11 = np.power(tmp1, -6)
    tmp17 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp23 = ((Hreal)*(Hreal))*tmp21
    tmp33 = (1.0/(tmp1))
    tmp129 = np.power(tmp1, -8)
    tmp134 = np.power(tmp1, -7)
    tmp167 = (1.0/2.0)*chi1 - 1.0/2.0*chi2
    tmp169 = (1.0/2.0)*chi1 + (1.0/2.0)*chi2
    tmp172 = (1.0/((tmp1)*(tmp1)*(tmp1)))
    tmp189 = np.log(8*tmp158)
    tmp237 = tmp16*tmp18/np.power(tmp1, 10)
    tmp248 = np.log(2*tmp158)
    tmp249 = np.log(6*tmp158)
    tmp250 = np.log(10*tmp158)
    tmp3 = (1.0/((tmp1)*(tmp1)))
    tmp8 = tmp5*tmp6*tmp7
    tmp12 = tmp10*tmp11*tmp9
    tmp19 = ((tmp16*tmp17 + tmp17*tmp18)*(tmp16*tmp17 + tmp17*tmp18))/np.power(Omega_circ, 8)
    tmp24 = 16*tmp23
    tmp28 = np.exp(4*tmp26)
    tmp34 = tmp32*tmp33
    tmp44 = 64*tmp23
    tmp47 = np.exp(8*tmp26)
    tmp52 = ((np.power(m1, 6)*tmp11 - np.power(m2, 6)*tmp11)*(np.power(m1, 6)*tmp11 - np.power(m2, 6)*tmp11))/np.power(Omega_circ, 28.0/3.0)
    tmp55 = 4*tmp23
    tmp61 = np.exp(2*tmp26)
    tmp67 = 36*tmp23
    tmp71 = np.exp(6*tmp26)
    tmp77 = 100*tmp23
    tmp80 = np.exp(10*tmp26)
    tmp98 = np.exp(12*tmp26)
    tmp99 = 144*tmp23
    tmp115 = np.exp(14*tmp26)
    tmp116 = 196*tmp23
    tmp130 = tmp120*tmp121*tmp129
    tmp135 = ((np.power(m1, 7)*tmp134 + np.power(m2, 7)*tmp134)*(np.power(m1, 7)*tmp134 + np.power(m2, 7)*tmp134))/np.power(Omega_circ, 32.0/3.0)
    tmp143 = np.power(Omega, 59.0/3.0)*((np.power(m1, 8)*tmp129 - np.power(m2, 8)*tmp129)*(np.power(m1, 8)*tmp129 - np.power(m2, 8)*tmp129))/np.power(Omega_circ, 12)
    tmp155 = np.exp(16*tmp26)
    tmp156 = 256*tmp23
    tmp160 = np.log(4*tmp158)
    tmp173 = ((tmp10*tmp172 + tmp172*tmp9)*(tmp10*tmp172 + tmp172*tmp9))/np.power(Omega_circ, 16.0/3.0)
    tmp197 = ((tmp167)*(tmp167))
    tmp199 = ((tmp169)*(tmp169))
    tmp200 = tmp167*tmp169
    tmp205 = ((tmp169)*(tmp169)*(tmp169))
    tmp206 = ((tmp167)*(tmp167)*(tmp167))
    tmp211 = Omega*tmp167
    tmp4 = m1*m2*tmp3
    tmp20 = np.power(Omega, 41.0/3.0)*tmp19
    tmp29 = tmp28*(tmp24 + 1)*(tmp24 + 4)/(tmp28 - np.exp(-4*tmp26))
    tmp30 = ((np.pi)*(np.pi)*(np.pi))*Hreal*tmp8
    tmp35 = tmp34 - 1.0e-14
    tmp48 = tmp47*(tmp44 + 1)*(tmp44 + 4)*(tmp44 + 9)*(tmp44 + 16)/(tmp47 - np.exp(-8*tmp26))
    tmp53 = np.power(Omega, 47.0/3.0)*tmp52
    tmp62 = tmp61*(tmp55 + 1)*(tmp55 + 4)/(tmp61 - np.exp(-2*tmp26))
    tmp72 = tmp71*(tmp67 + 1)*(tmp67 + 4)*(tmp67 + 9)/(tmp71 - np.exp(-6*tmp26))
    tmp81 = tmp80*(tmp77 + 1)*(tmp77 + 4)*(tmp77 + 9)*(tmp77 + 16)*(tmp77 + 25)/(tmp80 - np.exp(-10*tmp26))
    tmp85 = np.power(Omega, 13)*tmp19
    tmp100 = tmp98*(tmp99 + 1)*(tmp99 + 4)*(tmp99 + 9)*(tmp99 + 16)*(tmp99 + 25)*(tmp99 + 36)/(tmp98 - np.exp(-12*tmp26))
    tmp117 = tmp115*(tmp116 + 1)*(tmp116 + 4)*(tmp116 + 9)*(tmp116 + 16)*(tmp116 + 25)*(tmp116 + 36)*(tmp116 + 49)/(tmp115 - np.exp(-14*tmp26))
    tmp136 = np.power(Omega, 53.0/3.0)*tmp135
    tmp150 = np.power(Omega, 17)*tmp135
    tmp168 = tmp167*tmp34
    tmp208 = tmp169*tmp197
    tmp210 = (887.0/44.0)*m1*m2*tmp3 - 3143.0/132.0*tmp8
    tmp246 = tmp167*((8797.0/1008.0)*m1*m2*tmp3 - 703.0/112.0*tmp8 - 81.0/16.0)
    tmp14 = tmp13/(-68250*tmp4 + 68250*tmp8 + 13650)
    tmp31 = ((pphi)*(pphi))*tmp30
    tmp36 = np.absolute(tmp35)
    tmp41 = (tmp24 + 9)*(tmp24 + 25)
    tmp50 = tmp13/(-576*tmp4 + 432*tmp8 + 144)
    tmp73 = tmp72*(tmp67 + 16)
    tmp83 = tmp13/(-420*tmp4 + 420*tmp8 + 84)
    tmp87 = tmp30*((1 + (1.0/2.0)*((tmp1)*(tmp1))*(((Hreal)*(Hreal)) - 1)/(m1*m2))*(1 + (1.0/2.0)*((tmp1)*(tmp1))*(((Hreal)*(Hreal)) - 1)/(m1*m2)))
    tmp102 = tmp13/(-2856*tmp4 + 2142*tmp8 + 714)
    tmp105 = tmp62*(tmp55 + 9)
    tmp118 = tmp13/(780*tmp4 - 390)
    tmp122 = (1.0/(tmp35))
    tmp131 = tmp13/(104958*tmp12 + 104958*tmp4 - 209916*tmp8 - 14994)
    tmp139 = tmp13*(-29351*tmp12 + 6104*tmp130 - 16185*tmp4 + 37828*tmp8 + 2144)/(11662*tmp12 + 11662*tmp4 - 23324*tmp8 - 1666) + 1
    tmp141 = tmp13/(72960*tmp12 + 109440*tmp4 - 182400*tmp8 - 18240)
    tmp146 = tmp13*(-34598*tmp12 + 6056*tmp130 - 28055*tmp4 + 54642*tmp8 + 4350)/(14592*tmp12 + 21888*tmp4 - 36480*tmp8 - 3648) + 1
    tmp148 = tmp13/(19152*tmp12 + 19152*tmp4 - 38304*tmp8 - 2736)
    tmp152 = tmp13*(-13055*tmp12 + 2653*tmp130 - 7498*tmp4 + 17269*tmp8 + 1002)/(6384*tmp12 + 6384*tmp4 - 12768*tmp8 - 912) + 1
    tmp161 = 3*tmp4
    tmp174 = tmp173*(tmp24 + 9)
    tmp181 = 2*tmp4
    tmp185 = (5.0/2.0)*tmp4
    tmp202 = (1.0/2.0)*tmp199 + tmp200*tmp34
    tmp212 = -18*tmp4 + (137.0/6.0)*tmp8 + 3
    tmp222 = 6*tmp4
    tmp227 = (19.0/2.0)*tmp4 - 2
    tmp228 = 3 - 12*tmp4
    tmp229 = -593.0/60.0*tmp4 + (407.0/30.0)*tmp8 + 2.0/3.0
    tmp230 = -tmp4 + 44*tmp5*tmp6*tmp7 - 7.0/2.0
    tmp241 = (131.0/84.0)*tmp4 + 61.0/12.0
    tmp242 = (21.0/2.0)*tmp4 - 6
    tmp243 = -1636.0/21.0*tmp4 + (9487.0/504.0)*tmp8 + 4163.0/126.0
    tmp15 = -7187914.0/15526875.0*tmp0 + tmp14*(21980*tmp12 + 84679*tmp4 - 104930*tmp8 - 15828) + 1
    tmp37 = ((tmp35 + tmp36)*(tmp35 + tmp36))/((tmp35)*(tmp35))
    tmp43 = -16213384.0/15526875.0*tmp0 + tmp14*(33320*tmp12 + 96019*tmp4 - 127610*tmp8 - 17448) + 1
    tmp51 = tmp50*(124*tmp12 + 694*tmp4 - 670*tmp8 - 161) + 1
    tmp66 = tmp50*(156*tmp12 + 742*tmp4 - 750*tmp8 - 169) + 1
    tmp76 = tmp50*(220*tmp12 + 838*tmp4 - 910*tmp8 - 185) + 1
    tmp84 = -817991.0/3298680.0*tmp0 + tmp83*(49*tmp12 + 378*tmp4 - 413*tmp8 - 74) + 1
    tmp92 = -476887.0/659736.0*tmp0 + tmp83*(133*tmp12 + 462*tmp4 - 581*tmp8 - 86) + 1
    tmp96 = -1025435.0/659736.0*tmp0 + tmp83*(273*tmp12 + 602*tmp4 - 861*tmp8 - 106) + 1
    tmp103 = tmp102*(228*tmp12 + 2518*tmp4 - 2083*tmp8 - 618) + 1
    tmp106 = tmp105*(tmp55 + 16)*(tmp55 + 25)
    tmp108 = tmp102*(420*tmp12 + 2806*tmp4 - 2563*tmp8 - 666) + 1
    tmp110 = tmp73*(tmp67 + 25)
    tmp111 = tmp102*(804*tmp12 + 3382*tmp4 - 3523*tmp8 - 762) + 1
    tmp113 = tmp102*(1380*tmp12 + 4246*tmp4 - 4963*tmp8 - 906) + 1
    tmp119 = -31877.0/304200.0*tmp0 + tmp118*(-626*tmp4 + 8*tmp8 + 319) + 1
    tmp128 = -410833.0/709800.0*tmp0 + tmp118*(-850*tmp4 + 176*tmp8 + 375) + 1
    tmp132 = tmp131*(-190239*tmp12 + 32760*tmp130 - 123489*tmp4 + 273924*tmp8 + 16832) + 1
    tmp137 = tmp131*(-217959*tmp12 + 41076*tmp130 - 131805*tmp4 + 298872*tmp8 + 17756) + 1
    tmp142 = tmp141*(-138430*tmp12 + 21640*tmp130 - 126451*tmp4 + 236922*tmp8 + 20022) + 1
    tmp145 = tmp141*(-149950*tmp12 + 24520*tmp130 - 131059*tmp4 + 249018*tmp8 + 20598) + 1
    tmp147 = tmp141*(-207550*tmp12 + 38920*tmp130 - 154099*tmp4 + 309498*tmp8 + 23478) + 1
    tmp149 = tmp148*(-22845*tmp12 + 3063*tmp130 - 17598*tmp4 + 37119*tmp8 + 2462) + 1
    tmp151 = tmp148*(-28965*tmp12 + 4899*tmp130 - 19434*tmp4 + 42627*tmp8 + 2666) + 1
    tmp153 = tmp148*(-53445*tmp12 + 12243*tmp130 - 26778*tmp4 + 64659*tmp8 + 3482) + 1
    tmp162 = tmp161 - 1
    tmp223 = (1.0/(tmp222 - 3))
    tmp244 = tmp206*(3.0/4.0 - tmp161)
    tmp245 = tmp199*(9.0/4.0 - tmp222)
    tmp38 = tmp31*tmp37
    tmp64 = tmp31*tmp62*(tmp55 + 9)*(tmp55 + 16)
    tmp75 = tmp31*tmp73*(tmp67 + 25)*(tmp67 + 36)
    tmp88 = tmp37*tmp87
    tmp124 = tmp122*((1.0/2.0)*tmp32*tmp33 - 1.0/2.0*tmp36 - 5.0e-15)
    tmp163 = (1.0/(tmp162))
    tmp175 = tmp122*((1.0/2.0)*tmp34 + (1.0/2.0)*tmp36 - 5.0e-15)
    tmp183 = -1/(tmp181 - 1)
        EulerGamma = 0.57721566490153286
tmp209 = np.power(Omega, 7.0/3.0)*(tmp168*tmp199*(tmp181 + 1) + tmp168*((50140.0/3969.0)*tmp4 + (97865.0/63504.0)*tmp8 + 18733.0/15876.0) + tmp169*((50803.0/63504.0)*tmp12 + (74749.0/5292.0)*tmp4 - 245717.0/63504.0*tmp8 + 18733.0/15876.0) + tmp205*(tmp4 + 1.0/3.0) + tmp206*tmp34*(1.0/3.0 - 4.0/3.0*tmp4) + tmp208*(-tmp162 - 4*tmp8)) + Omega*(-0.33333333333333331*chi1 - 0.33333333333333331*chi2 + 0.66666666666666663*m1*m2*tmp169*tmp3 - 0.66666666666666663*tmp168) + tmp0*(tmp197*(1.0/2.0 - tmp181) + tmp202 - 33025.0/21168.0*tmp4 + (19583.0/42336.0)*tmp8 - 20555.0/10584.0) + tmp13*((55.0/84.0)*tmp4 - 43.0/42.0) + tmp190*((9202.0/2205.0)*tmp160 - 387216563023.0/160190110080.0 + (9202.0/2205.0)*EulerGamma) + tmp191*((439877.0/55566.0)*tmp160 - 16094530514677.0/533967033600.0 + (439877.0/55566.0)*EulerGamma) + tmp192*(tmp168*(-19.0/42.0*tmp4 - 34.0/21.0) + tmp169*((49.0/18.0)*tmp4 + (209.0/126.0)*tmp8 - 34.0/21.0)) + tmp21*((10620745.0/39118464.0)*tmp12 - 428.0/105.0*tmp160 + tmp197*(-457.0/504.0*tmp4 - 27.0/14.0*tmp8 + 89.0/252.0) + tmp199*(-1817.0/504.0*tmp4 + (10.0/9.0)*tmp8 + 89.0/252.0) + tmp200*tmp34*(89.0/126.0 - 781.0/252.0*tmp4) + (41.0/192.0)*tmp204*tmp4 - 48993925.0/9779616.0*tmp4 - 6292061.0/3259872.0*tmp8 - 428.0/105.0*EulerGamma + 1556919113.0/122245200.0) + tmp4*(21.199999999999999*tmp190 - 411*tmp191) + 1
    tmp217 = (1.0/(tmp181 - 1))
    tmp49 = tmp38*tmp48*(tmp44 + 25)
    tmp65 = tmp64*(tmp55 + 25)*(tmp55 + 36)
    tmp82 = tmp38*tmp81*(tmp77 + 36)
    tmp107 = np.power(Omega, 15)*tmp52*tmp88
    tmp125 = ((-tmp120*tmp7 + tmp121*tmp7 - 1.0/2.0*tmp124)*(-tmp120*tmp7 + tmp121*tmp7 - 1.0/2.0*tmp124))/np.power(Omega_circ, 20.0/3.0)
    tmp176 = (1.0/(tmp124 + tmp175*tmp34))
    tmp179 = ((-tmp124 + tmp3*tmp5 - tmp3*tmp6)*(-tmp124 + tmp3*tmp5 - tmp3*tmp6))/((Omega_circ)*(Omega_circ)*(Omega_circ)*(Omega_circ))
    tmp194 = (1.0/((tmp162)*(tmp162)))
    tmp219 = tmp217*tmp8
    tmp233 = -1/tmp162
    tmp234 = -1/((tmp162)*(tmp162)*(tmp162))
    tmp42 = tmp29*tmp38*tmp41*(tmp24 + 16)
    tmp90 = tmp29*tmp88*(tmp24 + 16)
    tmp95 = tmp48*tmp88*(tmp44 + 25)*(tmp44 + 36)
    tmp126 = np.power(Omega, 11)*tmp125
        EulerGamma = 0.57721566490153286
tmp171 = Omega*tmp163*(tmp168*(2.0/3.0 - 7.0/5.0*tmp4) + tmp169*(-59.0/15.0*tmp4 + (26.0/5.0)*tmp8 + 2.0/3.0)) + tmp0*((4108813.0/4404400.0)*m1*m2*tmp3 - 3628549.0/377520.0*tmp12 - 1204847.0/1006720.0*tmp130 + (21506941.0/5662800.0)*tmp5*tmp6*tmp7 - 3190529.0/8808800.0)/((tmp162)*(tmp162)) + tmp13*tmp163*(-353.0/132.0*tmp4 + (19.0/88.0)*tmp8 + 191.0/220.0) + tmp21*(-3142.0/3465.0*tmp160 - 3142.0/3465.0*EulerGamma + 848238724511.0/219761942400.0) + 1
    tmp177 = tmp167*tmp176
    tmp180 = np.power(Omega, 7)*tmp179*tmp87
    tmp186 = tmp158*tmp183*tmp185
    tmp188 = np.power(Omega, 35.0/3.0)*tmp125
    tmp196 = tmp169*tmp194
    tmp220 = 30*m1*m2*tmp217*tmp3 - 5*tmp217 - 40*tmp219
    tmp91 = tmp41*tmp90*(tmp24 + 36)
    tmp178 = Omega*(tmp169*((13.0/2.0)*tmp4 - 2) + tmp177*((11.0/2.0)*tmp4 - 2))
    tmp187 = tmp186*(tmp169 - tmp177)
        EulerGamma = 0.57721566490153286
tmp203 = Omega*tmp163*(tmp168*(2.0/3.0 - 13.0/5.0*tmp4) + tmp169*(-41.0/15.0*tmp4 + (14.0/5.0)*tmp8 + 2.0/3.0)) + tmp0*(-801565.0/37752.0*tmp12*tmp194 + (3976393.0/1006720.0)*tmp130*tmp194 - tmp181*tmp197 + (32485357.0/4404400.0)*tmp194*tmp4 - 1401149.0/1415700.0*tmp194*tmp8 - 14210377.0/8808800.0*tmp194 + (1.0/2.0)*tmp197 + tmp202) + tmp13*tmp163*(-587.0/132.0*tmp4 + (175.0/88.0)*tmp8 + 269.0/220.0) + tmp190*((845198.0/190575.0)*tmp189 - 172066910136202271.0/19426955708160000.0 + (845198.0/190575.0)*EulerGamma) + tmp191*((22324502267.0/3815311500.0)*tmp189 - 17154485653213713419357.0/568432724020761600000.0 + (22324502267.0/3815311500.0)*EulerGamma) + tmp192*(tmp168*tmp194*((597.0/440.0)*tmp12 + (10679.0/1650.0)*tmp4 - 1933.0/220.0*tmp8 - 69.0/55.0) + tmp196*((8539.0/440.0)*tmp12 + (591.0/44.0)*tmp130 + (16571.0/1650.0)*tmp4 - 2673.0/100.0*tmp8 - 69.0/55.0)) + tmp21*(-12568.0/3465.0*tmp189 - 12568.0/3465.0*EulerGamma + 16600939332793.0/1098809712000.0) + tmp4*((78.0/5.0)*tmp190 - 216*tmp191 - 89.0/25.0*tmp21) + 1
    tmp215 = tmp169*tmp177
        EulerGamma = 0.57721566490153286
tmp238 = Omega*((320.0/81.0)*tmp12*tmp205*tmp234 + tmp168*tmp233*((13.0/9.0)*tmp4 + 2.0/9.0) + tmp196*((607.0/81.0)*tmp12 - 1478.0/405.0*tmp4 + (503.0/81.0)*tmp8 + 2.0/9.0)) + tmp0*(tmp168*tmp196*(-88.0/27.0*tmp4 - 50.0/27.0*tmp8 + 2.0/3.0) + tmp194*((1610009.0/320760.0)*m1*m2*tmp3 - 508474.0/40095.0*tmp12 + (77141.0/40095.0)*tmp120*tmp121*tmp129 - 945121.0/320760.0*tmp8 - 180566.0/200475.0) + tmp197*tmp233*(-tmp161 + 4*tmp8 + 1.0/3.0) + tmp199*tmp234*(-1997.0/243.0*tmp12 - 2452.0/243.0*tmp130 - 43.0/27.0*tmp4 + (1435.0/243.0)*tmp5*tmp6*tmp7 + 1.0/3.0)) + tmp13*(-16.0/9.0*tmp194*tmp199*tmp8 + tmp233*((223.0/54.0)*m1*m2*tmp3 - 32.0/27.0*tmp8 - 164.0/135.0)) + 4*tmp158*tmp169*tmp4/(3 - 9*tmp4) + tmp190*((17056.0/8505.0)*tmp160 - 10607269449358.0/3072140846775.0 + (17056.0/8505.0)*EulerGamma) + tmp191*((18778864.0/12629925.0)*tmp160 - 1312549797426453052.0/176264081083715625.0 + (18778864.0/12629925.0)*EulerGamma) + tmp192*(tmp168*tmp194*((889673.0/106920.0)*tmp12 + (376177.0/35640.0)*tmp4 - 75737.0/5346.0*tmp8 - 2788.0/1215.0) + tmp168*tmp199*tmp234*((608.0/81.0)*tmp12 - 16.0/9.0*tmp4 + (736.0/81.0)*tmp8) + tmp169*tmp234*((20471053.0/962280.0)*m1*m2*tmp3 + (101706029.0/962280.0)*tmp10*tmp11*tmp9 - 40204523.0/962280.0*tmp130 - 1184225.0/96228.0*tmp237 - 14103833.0/192456.0*tmp8 - 2788.0/1215.0) + tmp194*tmp208*(-32.0/3.0*tmp12 - 8.0/9.0*tmp4 + 8*tmp5*tmp6*tmp7) + tmp205*(-40232.0/2187.0*tmp12 + (43528.0/2187.0)*tmp130 + (96176.0/2187.0)*tmp237 - 8.0/9.0*tmp4 + (376.0/81.0)*tmp8)/((tmp162)*(tmp162)*(tmp162)*(tmp162))) + tmp21*(-104.0/63.0*tmp160 - 104.0/63.0*EulerGamma + 5849948554.0/940355325.0) + tmp4*(-13.0/2.0*tmp190 + 98*tmp191 + (333.0/1000.0)*tmp21) + 1
    tmp216 = Omega*tmp183*(tmp169*(-667.0/44.0*tmp4 - 529.0/132.0*tmp8) + tmp177*tmp210) + tmp0*tmp183*(tmp197*(-37.0/3.0*tmp4 + 12*tmp8 + 3.0/2.0) + tmp199*((1.0/3.0)*tmp4 + (35.0/6.0)*tmp8 + 3.0/2.0) + tmp212*tmp215) + tmp158*tmp183*((5.0/2.0)*m1*m2*tmp169*tmp3 - tmp177*tmp185)
    tmp226 = Omega*(tmp169*(-10*tmp217*tmp4 + 10*tmp217*tmp8 + 10*tmp223) + tmp177*(-70*tmp223*tmp4 + 110*tmp223*tmp8 + 10*tmp223)) + tmp0*(tmp197*(15*m1*m2*tmp217*tmp3 - 20*tmp219 - 5/(4*tmp4 - 2)) + (5.0/2.0)*tmp199 + tmp215*tmp220)
    tmp232 = Omega*(tmp169*(tmp185 - 2) + tmp177*tmp227) + tmp0*(tmp197*(3.0/2.0 - tmp222) + (3.0/2.0)*tmp199 + tmp215*tmp228) + tmp192*(tmp169*((11.0/20.0)*tmp4 + (241.0/30.0)*tmp8 + 2.0/3.0) + tmp177*tmp229) + tmp21*(tmp197*((11.0/2.0)*m1*m2*tmp3 - 12*tmp8 - 7.0/4.0) + tmp199*(-27.0/2.0*tmp4 + 6*tmp5*tmp6*tmp7 - 7.0/4.0) + tmp215*tmp230)
    tmp247 = Omega*(tmp169*((79.0/84.0)*tmp4 + 61.0/12.0) + tmp177*tmp241) + tmp0*(tmp197*(-tmp181 - 3) + tmp199*((1.0/2.0)*tmp4 - 3) + tmp215*tmp242) + tmp158*(-3.0/4.0*chi1 - 3.0/4.0*chi2 - 3.0/2.0*tmp177) + tmp192*(tmp169*((1709.0/1008.0)*tmp4 + (613.0/1008.0)*tmp8 - 81.0/16.0) + tmp176*tmp244 + tmp176*tmp246 + tmp177*tmp245 + (3.0/4.0)*tmp205 + tmp208*(9.0/4.0 - tmp161)) + tmp21*(tmp197*(-9287.0/1008.0*tmp4 + (5.0/7.0)*tmp8 + 4163.0/252.0) + tmp199*(-2633.0/1008.0*tmp4 + (139.0/72.0)*tmp8 + 4163.0/252.0) + tmp215*tmp243)
    flux = -1.0/8.0*Omega*((959412031562833670717182083.0/13351440429687500000000000000.0)*np.power(Omega, 29.0/3.0)*tmp174*np.power(tmp238, 6)*tmp29*tmp38 + (477464829275686064616544614241.0/1054687500000000000000000000000.0)*np.power(Omega, 23.0/3.0)*tmp179*tmp31*tmp62*((tmp124*(tmp13*tmp167*tmp241 + tmp158*(-3.0/4.0*chi1 + (3.0/4.0)*chi2) + tmp169*tmp211*tmp242 + tmp192*(tmp167*tmp245 + tmp244 + tmp246) + tmp200*tmp21*tmp243) + tmp175*tmp247)*(tmp124*(tmp13*tmp167*tmp241 + tmp158*(-3.0/4.0*chi1 + (3.0/4.0)*chi2) + tmp169*tmp211*tmp242 + tmp192*(tmp167*tmp245 + tmp244 + tmp246) + tmp200*tmp21*tmp243) + tmp175*tmp247)) + (77712374556589527328091748723.0/9536743164062500000000000000.0)*((Omega)*(Omega)*(Omega)*(Omega)*(Omega))*((tmp209)*(tmp209)*(tmp209)*(tmp209))*tmp29*tmp88*((m1*tmp33 + m2*tmp33)*(m1*tmp33 + m2*tmp33))/np.power(Omega_circ, 8.0/3.0) + (6666197686272648743149580252067.0/1712404052734375000000000000000000000.0)*tmp100*tmp136*np.power(tmp139, 14)*tmp38*(tmp99 + 49) + (69721657441386791987771542605413907.0/15155846119232177734375000000000000000000000.0)*tmp100*tmp150*np.power(tmp152, 16)*tmp88*(tmp99 + 49)*(tmp99 + 64) + (1728273474218834859335076361647.0/1248107910156250000000000000000000.0)*tmp100*tmp85*tmp88*np.power(tmp96, 12) + (63748432253452348706521541130361.0/594560591830283203125000000000000000000000000000000.0)*np.power(tmp103, 14)*tmp106*tmp107*(tmp55 + 36)*(tmp55 + 49) + (290126198344600777323475443001.0/1291992187500000000000000000000000.0)*tmp105*tmp180*((Omega*tmp124*(-5.0/16.0*chi1 + (5.0/16.0)*chi2) + tmp175*tmp178)*(Omega*tmp124*(-5.0/16.0*chi1 + (5.0/16.0)*chi2) + tmp175*tmp178)) + (64112709009186366516744544133641.0/7235894531250000000000000000000000000000000.0)*tmp106*np.power(tmp119, 10)*tmp126*tmp88 + (80304665090860966618505674788201.0/5370099109375000000000000000000000000000000.0)*tmp107*np.power(tmp108, 14)*tmp110*(tmp67 + 36)*(tmp67 + 49) + (7632465358236471041440756081.0/70685030287872000000000000000000000.0)*tmp107*np.power(tmp111, 14)*tmp81*(tmp77 + 36)*(tmp77 + 49) + (21630433954113293133611065845404903594929.0/353757715136718750000000000000000000000000000.0)*tmp107*np.power(tmp113, 14)*tmp117 + (1395913190715212935181279944410009.0/84700000000000000000000000000000000000.0)*tmp110*tmp126*np.power(tmp128, 10)*tmp88 + (1059891263751551363546942226424840276151521.0/8313589311885000000000000000000000000000000000000.0)*tmp117*tmp143*np.power(tmp147, 16)*tmp38*(tmp116 + 64) + (635828519099369067424585494127.0/6998400000000000000000000000000.0)*tmp126*tmp81*tmp87*((tmp124*(tmp0*tmp200*tmp220 + tmp211*(-70.0/3.0*tmp217*tmp4 + (10.0/3.0)*tmp217 + (110.0/3.0)*tmp219)) + tmp175*tmp226)*(tmp124*(tmp0*tmp200*tmp220 + tmp211*(-70.0/3.0*tmp217*tmp4 + (10.0/3.0)*tmp217 + (110.0/3.0)*tmp219)) + tmp175*tmp226)) + (4143648096474399341626802965321.0/87362644831833243370056152343750000000000000.0)*np.power(tmp132, 14)*tmp136*tmp42*(tmp24 + 36)*(tmp24 + 49) + (12729286952369368445651715480361.0/2326774986643285956233739852905273437500.0)*tmp136*np.power(tmp137, 14)*tmp49*(tmp44 + 36)*(tmp44 + 49) + (63748432253452348706521541130361.0/3326821322972647500000000000000000000000000000000000000.0)*np.power(tmp142, 16)*tmp143*tmp37*tmp65*(tmp55 + 49)*(tmp55 + 64) + (8922740565651218513167297198689.0/424921296800000000000000000000000000000000000.0)*tmp143*np.power(tmp145, 16)*tmp37*tmp75*(tmp67 + 49)*(tmp67 + 64) + (448968550484498296555338593.0/1503307474922373120000000000000000000.0)*tmp143*np.power(tmp146, 16)*tmp82*(tmp77 + 49)*(tmp77 + 64) + (7018886249798228774293767649.0/2415078583220214843750000000000000000000000000.0)*np.power(tmp149, 16)*tmp150*tmp91*(tmp24 + 49)*(tmp24 + 64) + (31084949822635821896125896262921.0/137655258178710937500000000000000000000.0)*np.power(tmp15, 10)*tmp20*tmp42 + (5651416571920869579318348721.0/3371768744177324697375297546386718750000.0)*tmp150*np.power(tmp151, 16)*tmp95*(tmp44 + 49)*(tmp44 + 64) + (870537749976894817763112040803074048.0/426739481684942657011561095714569091796875.0)*tmp150*np.power(tmp153, 16)*tmp155*tmp88*(tmp156 + 1)*(tmp156 + 4)*(tmp156 + 9)*(tmp156 + 16)*(tmp156 + 25)*(tmp156 + 36)*(tmp156 + 49)*(tmp156 + 64)/(tmp155 - np.exp(-16*tmp26)) + (31084949822635821896125896262921.0/436047363281250000000000000000000000.0)*tmp157*np.power(tmp171, 8)*tmp174*tmp90 + (4895879597065138998508197857569.0/19162237644195556640625000000000.0)*tmp157*tmp173*np.power(tmp203, 8)*tmp48*tmp88 + (352503330988690246420728313633521.0/47851562500000000000000000000000.0)*tmp180*tmp72*((tmp124*(tmp0*tmp200*tmp228 + tmp167*tmp192*tmp229 + tmp200*tmp21*tmp230 + tmp211*tmp227) + tmp175*tmp232)*(tmp124*(tmp0*tmp200*tmp228 + tmp167*tmp192*tmp229 + tmp200*tmp21*tmp230 + tmp211*tmp227) + tmp175*tmp232)) + (1057509992966070739262184940900563.0/19140625000000000000000000000000000.0)*tmp188*tmp31*tmp73*((tmp124*(tmp0*tmp183*tmp200*tmp212 - tmp167*tmp186 + tmp183*tmp210*tmp211) + tmp175*tmp216)*(tmp124*(tmp0*tmp183*tmp200*tmp212 - tmp167*tmp186 + tmp183*tmp210*tmp211) + tmp175*tmp216)) + (290126198344600777323475443001.0/723515625000000000000000000000000000.0)*tmp188*tmp64*((-tmp124*tmp167*tmp186 + tmp175*tmp187)*(-tmp124*tmp167*tmp186 + tmp175*tmp187)) + (4895879597065138998508197857569.0/3528760280460119247436523437500000.0)*tmp20*np.power(tmp43, 10)*tmp49 + (64112709009186366516744544133641.0/14667339112207031250000000000000000000000000000.0)*tmp37*np.power(tmp51, 12)*tmp53*tmp65 + (4187739572145638805543839833230027.0/74186612500000000000000000000000000000000.0)*tmp37*tmp53*np.power(tmp66, 12)*tmp75 + (90832645585624152489226499161.0/1031704128000000000000000000000000.0)*tmp53*np.power(tmp76, 12)*tmp82 + (4143648096474399341626802965321.0/94463501203805208206176757812500000000000.0)*np.power(tmp84, 12)*tmp85*tmp91 + (12729286952369368445651715480361.0/7379961031547281891107559204101562500.0)*tmp85*np.power(tmp92, 12)*tmp95)/np.pi
    fspin21 = tmp247
    fspin33 = tmp232
    fspin31 = tmp178
    fspin43 = tmp216
    fspin41 = tmp187
    fspin55 = tmp226
    EulerGamma = 0.57721566490153286
    rho21 = tmp0*(-10993.0/14112.0*tmp4 + (617.0/4704.0)*tmp5*tmp6*tmp7 - 47009.0/56448.0) + tmp13*((23.0/84.0)*tmp4 - 59.0/56.0) + tmp190*((6313.0/5880.0)*tmp248 - 1168617463883.0/911303737344.0 + (6313.0/5880.0)*EulerGamma) + tmp191*((5029963.0/5927040.0)*tmp248 - 63735873771463.0/16569158860800.0 + (5029963.0/5927040.0)*EulerGamma) + tmp21*(-107.0/105.0*tmp248 - 107.0/105.0*EulerGamma + 7613184941.0/2607897600.0) + tmp4*((53.0/2.0)*tmp190 + 80*tmp191 + (33.0/20.0)*tmp21) + 1
    rho22 = tmp209
    EulerGamma = 0.57721566490153286
    rho31 = tmp0*(-1685.0/1782.0*tmp4 - 829.0/1782.0*tmp8 + 101.0/7128.0) - tmp13*((2.0/9.0)*tmp4 + 13.0/18.0) + tmp190*((169.0/567.0)*tmp248 + (169.0/567.0)*EulerGamma + 2606097992581.0/4854741091200.0) + tmp21*(-26.0/63.0*tmp248 - 26.0/63.0*EulerGamma + 11706720301.0/6129723600.0) + 1
    rho32 = tmp238
    EulerGamma = 0.57721566490153286
    rho33 = tmp0*(-1861.0/990.0*tmp4 + (149.0/330.0)*tmp5*tmp6*tmp7 - 6719.0/3960.0) + tmp13*((2.0/3.0)*tmp4 - 7.0/6.0) + tmp190*((13.0/3.0)*tmp249 - 57566572157.0/8562153600.0 + (13.0/3.0)*EulerGamma) + tmp191*((87347.0/13860.0)*tmp249 - 903823148417327.0/30566888352000.0 + (87347.0/13860.0)*EulerGamma) + tmp21*((12011.0/46332.0)*tmp12 - 26.0/7.0*tmp249 + tmp4*((41.0/192.0)*tmp204 - 129509.0/25740.0) - 274621.0/154440.0*tmp8 - 26.0/7.0*EulerGamma + 3203101567.0/227026800.0) + tmp4*(12*tmp190 - 215*tmp191) + 1
    EulerGamma = 0.57721566490153286
    rho41 = -7775491.0/21141120.0*tmp0 + tmp13*tmp217*(-1385.0/528.0*tmp4 + (6.0/11.0)*tmp8 + 301.0/264.0) + tmp21*(-1571.0/6930.0*tmp248 - 1571.0/6930.0*EulerGamma + 1227423222031.0/1758095539200.0) + 1
    rho42 = tmp171
    EulerGamma = 0.57721566490153286
    rho43 = -6894273.0/7047040.0*tmp0 + tmp13*tmp183*((547.0/176.0)*m1*m2*tmp3 - 10.0/11.0*tmp8 - 111.0/88.0) + tmp190*((174381.0/67760.0)*tmp249 - 2465107182496333.0/460490801971200.0 + (174381.0/67760.0)*EulerGamma) + tmp21*(-1571.0/770.0*tmp249 - 1571.0/770.0*EulerGamma + 1664224207351.0/195343948800.0) + tmp4*(-327.0/500.0*tmp0 + (37.0/2.0)*tmp190 - 369.0/100.0*tmp21) + 1
    rho44 = tmp203
    rho51 = tmp119
    rho52 = tmp15
    rho53 = tmp128
    rho54 = tmp43
    EulerGamma = 0.57721566490153286
    rho55 = -3353747.0/2129400.0*tmp0 + tmp13*(-649.0/195.0*tmp217*tmp4 + (487.0/390.0)*tmp217 + (256.0/195.0)*tmp219) + tmp190*((376451.0/83655.0)*tmp250 - 1213641959949291437.0/118143853747920000.0 + (376451.0/83655.0)*EulerGamma) + tmp191*((2592446431.0/456756300.0)*tmp250 - 150082616449726042201261.0/4837990810977324000000.0 + (2592446431.0/456756300.0)*EulerGamma) + tmp21*(-1546.0/429.0*tmp250 - 1546.0/429.0*EulerGamma + 190606537999247.0/11957879934000.0) + tmp4*(-261.0/100.0*tmp0 - 357.0/10.0*tmp190 + (5.0/4.0)*tmp21) + 1
    rho61 = tmp51
    rho62 = tmp84
    rho63 = tmp66
    rho64 = tmp92
    rho65 = tmp76
    rho66 = tmp96
    rho71 = tmp103
    rho72 = tmp132
    rho73 = tmp108
    rho74 = tmp137
    rho75 = tmp111
    rho76 = tmp139
    rho77 = tmp113
    rho81 = tmp142
    rho82 = tmp149
    rho83 = tmp145
    rho84 = tmp151
    rho85 = tmp146
    rho86 = tmp152
    rho87 = tmp147
    rho88 = tmp153
    return flux , fspin21, fspin31, fspin33, fspin43, fspin41, fspin55, rho21, rho22, rho31, rho32, rho33, rho41, rho42, rho43, rho44, rho51, rho52, rho53, rho54, rho55, rho61, rho62, rho53, rho64, rho65, rho66, rho71, rho72, rho73, rho74, rho75, rho76, rho77, rho81, rho82, rho83, rho84, rho85, rho86, rho87, rho88