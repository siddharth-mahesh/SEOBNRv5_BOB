import numpy as np
from scipy.special import gamma,factorial
import numpy as np
def v5HM_optimized_flux_verbose(m1,m2,r,phi,prstar,pphi,chi1,chi2,Hreal,Omega,Omega_circ):
    tmp0 = np.power(Omega, 4.0/3.0)
    tmp1 = m1 + m2
    tmp5 = ((m1)*(m1))
    tmp6 = ((m2)*(m2))
    tmp9 = ((m1)*(m1)*(m1))
    tmp10 = ((m2)*(m2)*(m2))
    tmp13 = np.power(Omega, 2.0/3.0)
    tmp16 = ((m1)*(m1)*(m1)*(m1)*(m1))
    tmp18 = ((m2)*(m2)*(m2)*(m2)*(m2))
    tmp21 = ((Omega)*(Omega))
    tmp28 = m1 - m2
    tmp111 = ((m2)*(m2)*(m2)*(m2))
    tmp112 = ((m1)*(m1)*(m1)*(m1))
    tmp146 = np.power(Omega, 9)
    tmp147 = np.cbrt(Omega)
    tmp178 = np.power(Omega, 8.0/3.0)
    tmp184 = np.power(Omega, 10.0/3.0)
    tmp185 = np.power(Omega, 5.0/3.0)
    tmp197 = ((np.pi)*(np.pi))
    tmp7 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp11 = np.power(tmp1, -6)
    tmp17 = (1.0/((tmp1)*(tmp1)*(tmp1)*(tmp1)*(tmp1)))
    tmp23 = ((Hreal)*(Hreal))*tmp21
    tmp29 = (1.0/(tmp1))
    tmp36 = np.pi*Hreal*Omega
    tmp120 = np.power(tmp1, -8)
    tmp124 = np.power(tmp1, -7)
    tmp156 = (1.0/2.0)*chi1 - 1.0/2.0*chi2
    tmp158 = (1.0/2.0)*chi1 + (1.0/2.0)*chi2
    tmp161 = (1.0/((tmp1)*(tmp1)*(tmp1)))
    tmp170 = np.log(2*tmp147)
    tmp183 = np.log(8*tmp147)
    tmp203 = np.log(6*tmp147)
    tmp216 = tmp16*tmp18/np.power(tmp1, 10)
    tmp218 = np.log(10*tmp147)
    tmp3 = (1.0/((tmp1)*(tmp1)))
    tmp8 = tmp5*tmp6*tmp7
    tmp12 = tmp10*tmp11*tmp9
    tmp19 = ((tmp16*tmp17 + tmp17*tmp18)*(tmp16*tmp17 + tmp17*tmp18))/np.power(Omega_circ, 8)
    tmp24 = 64*tmp23
    tmp30 = tmp28*tmp29
    tmp40 = 16*tmp23
    tmp42 = (1.0/(1 - np.exp(-8*tmp36)))
    tmp52 = ((np.power(m1, 6)*tmp11 - np.power(m2, 6)*tmp11)*(np.power(m1, 6)*tmp11 - np.power(m2, 6)*tmp11))/np.power(Omega_circ, 28.0/3.0)
    tmp54 = 100*tmp23
    tmp60 = 36*tmp23
    tmp68 = 4*tmp23
    tmp80 = 1 + (1.0/2.0)*((tmp1)*(tmp1))*(((Hreal)*(Hreal)) - 1)/(m1*m2)
    tmp83 = 144*tmp23
    tmp98 = 196*tmp23
    tmp121 = tmp111*tmp112*tmp120
    tmp125 = ((np.power(m1, 7)*tmp124 + np.power(m2, 7)*tmp124)*(np.power(m1, 7)*tmp124 + np.power(m2, 7)*tmp124))/np.power(Omega_circ, 32.0/3.0)
    tmp134 = np.power(Omega, 59.0/3.0)*((np.power(m1, 8)*tmp120 - np.power(m2, 8)*tmp120)*(np.power(m1, 8)*tmp120 - np.power(m2, 8)*tmp120))/np.power(Omega_circ, 12)
    tmp141 = 256*tmp23
    tmp149 = np.log(4*tmp147)
    tmp162 = ((tmp10*tmp161 + tmp161*tmp9)*(tmp10*tmp161 + tmp161*tmp9))/np.power(Omega_circ, 16.0/3.0)
    tmp190 = ((tmp156)*(tmp156))
    tmp192 = ((tmp158)*(tmp158))
    tmp193 = tmp156*tmp158
    tmp198 = ((tmp158)*(tmp158)*(tmp158))
    tmp199 = ((tmp156)*(tmp156)*(tmp156))
    tmp206 = Omega*tmp156
    tmp4 = m1*m2*tmp3
    tmp20 = np.power(Omega, 41.0/3.0)*tmp19
    tmp26 = ((np.pi)*(np.pi)*(np.pi))*Hreal*tmp8
    tmp31 = tmp30 - 1.0e-14
    tmp37 = (tmp24 + 1)*(tmp24 + 4)*(tmp24 + 9)*(tmp24 + 16)/(1 - np.exp(-16*tmp36))
    tmp53 = np.power(Omega, 47.0/3.0)*tmp52
    tmp56 = (tmp54 + 1)*(tmp54 + 4)*(tmp54 + 9)*(tmp54 + 16)*(tmp54 + 25)/(1 - np.exp(-20*tmp36))
    tmp63 = (tmp60 + 1)*(tmp60 + 4)*(tmp60 + 9)/(1 - np.exp(-12*tmp36))
    tmp73 = (tmp68 + 1)*(tmp68 + 4)/(1 - np.exp(-4*tmp36))
    tmp79 = np.power(Omega, 13)*tmp19
    tmp84 = (tmp83 + 1)*(tmp83 + 4)*(tmp83 + 9)*(tmp83 + 16)*(tmp83 + 25)*(tmp83 + 36)/(1 - np.exp(-24*tmp36))
    tmp99 = (tmp98 + 1)*(tmp98 + 4)*(tmp98 + 9)*(tmp98 + 16)*(tmp98 + 25)*(tmp98 + 36)*(tmp98 + 49)/(1 - np.exp(-28*tmp36))
    tmp126 = np.power(Omega, 53.0/3.0)*tmp125
    tmp142 = np.power(Omega, 17)*tmp125
    tmp157 = tmp156*tmp30
    tmp201 = tmp158*tmp190
    tmp205 = (887.0/44.0)*m1*m2*tmp3 - 3143.0/132.0*tmp8
    tmp243 = tmp156*((8797.0/1008.0)*m1*m2*tmp3 - 703.0/112.0*tmp8 - 81.0/16.0)
    tmp14 = tmp13/(-68250*tmp4 + 68250*tmp8 + 13650)
    tmp27 = ((pphi)*(pphi))*tmp26
    tmp32 = np.absolute(tmp31)
    tmp45 = tmp42*(tmp40 + 1)*(tmp40 + 4)
    tmp48 = (tmp40 + 9)*(tmp40 + 25)
    tmp50 = tmp13/(-576*tmp4 + 432*tmp8 + 144)
    tmp64 = tmp63*(tmp60 + 16)
    tmp77 = tmp13/(-420*tmp4 + 420*tmp8 + 84)
    tmp81 = tmp26*((tmp80)*(tmp80))
    tmp95 = tmp13/(-2856*tmp4 + 2142*tmp8 + 714)
    tmp107 = tmp73*(tmp68 + 9)
    tmp109 = tmp13/(780*tmp4 - 390)
    tmp113 = (1.0/(tmp31))
    tmp122 = tmp13*(-29351*tmp12 + 6104*tmp121 - 16185*tmp4 + 37828*tmp8 + 2144)/(11662*tmp12 + 11662*tmp4 - 23324*tmp8 - 1666) + 1
    tmp127 = tmp13/(104958*tmp12 + 104958*tmp4 - 209916*tmp8 - 14994)
    tmp132 = tmp13/(72960*tmp12 + 109440*tmp4 - 182400*tmp8 - 18240)
    tmp135 = tmp13*(-34598*tmp12 + 6056*tmp121 - 28055*tmp4 + 54642*tmp8 + 4350)/(14592*tmp12 + 21888*tmp4 - 36480*tmp8 - 3648) + 1
    tmp139 = tmp13/(19152*tmp12 + 19152*tmp4 - 38304*tmp8 - 2736)
    tmp143 = tmp13*(-13055*tmp12 + 2653*tmp121 - 7498*tmp4 + 17269*tmp8 + 1002)/(6384*tmp12 + 6384*tmp4 - 12768*tmp8 - 912) + 1
    tmp150 = 3*tmp4
    tmp163 = tmp162*(tmp40 + 9)
    tmp164 = 2*tmp4
    tmp168 = (5.0/2.0)*tmp4
    EulerGamma = 0.57721566490153286
    tmp179 = tmp0*(-1685.0/1782.0*tmp4 - 829.0/1782.0*tmp8 + 101.0/7128.0) - tmp13*((2.0/9.0)*tmp4 + 13.0/18.0) + tmp178*((169.0/567.0)*tmp170 + (169.0/567.0)*EulerGamma + 2606097992581.0/4854741091200.0) + tmp21*(-26.0/63.0*tmp170 - 26.0/63.0*EulerGamma + 11706720301.0/6129723600.0) + 1
    tmp195 = (1.0/2.0)*tmp192 + tmp193*tmp30
    tmp207 = -18*tmp4 + (137.0/6.0)*tmp8 + 3
    tmp224 = 6*tmp4
    tmp228 = (19.0/2.0)*tmp4 - 2
    tmp229 = 3 - 12*tmp4
    tmp230 = -593.0/60.0*tmp4 + (407.0/30.0)*tmp8 + 2.0/3.0
    tmp231 = -tmp4 + 44*tmp5*tmp6*tmp7 - 7.0/2.0
    EulerGamma = 0.57721566490153286
    tmp233 = tmp0*(-1861.0/990.0*tmp4 + (149.0/330.0)*tmp5*tmp6*tmp7 - 6719.0/3960.0) + tmp13*((2.0/3.0)*tmp4 - 7.0/6.0) + tmp178*((13.0/3.0)*tmp203 - 57566572157.0/8562153600.0 + (13.0/3.0)*EulerGamma) + tmp184*((87347.0/13860.0)*tmp203 - 903823148417327.0/30566888352000.0 + (87347.0/13860.0)*EulerGamma) + tmp21*((12011.0/46332.0)*tmp12 - 26.0/7.0*tmp203 + tmp4*((41.0/192.0)*tmp197 - 129509.0/25740.0) - 274621.0/154440.0*tmp8 - 26.0/7.0*EulerGamma + 3203101567.0/227026800.0) + tmp4*(12*tmp178 - 215*tmp184) + 1
    EulerGamma = 0.57721566490153286
    tmp235 = tmp0*(-10993.0/14112.0*tmp4 + (617.0/4704.0)*tmp5*tmp6*tmp7 - 47009.0/56448.0) + tmp13*((23.0/84.0)*tmp4 - 59.0/56.0) + tmp178*((6313.0/5880.0)*tmp170 - 1168617463883.0/911303737344.0 + (6313.0/5880.0)*EulerGamma) + tmp184*((5029963.0/5927040.0)*tmp170 - 63735873771463.0/16569158860800.0 + (5029963.0/5927040.0)*EulerGamma) + tmp21*(-107.0/105.0*tmp170 - 107.0/105.0*EulerGamma + 7613184941.0/2607897600.0) + tmp4*((53.0/2.0)*tmp178 + 80*tmp184 + (33.0/20.0)*tmp21) + 1
    tmp238 = (131.0/84.0)*tmp4 + 61.0/12.0
    tmp239 = (21.0/2.0)*tmp4 - 6
    tmp240 = -1636.0/21.0*tmp4 + (9487.0/504.0)*tmp8 + 4163.0/126.0
    tmp15 = -16213384.0/15526875.0*tmp0 + tmp14*(33320*tmp12 + 96019*tmp4 - 127610*tmp8 - 17448) + 1
    tmp33 = ((tmp31 + tmp32)*(tmp31 + tmp32))/((tmp31)*(tmp31))
    tmp39 = -7187914.0/15526875.0*tmp0 + tmp14*(21980*tmp12 + 84679*tmp4 - 104930*tmp8 - 15828) + 1
    tmp51 = tmp50*(220*tmp12 + 838*tmp4 - 910*tmp8 - 185) + 1
    tmp58 = tmp50*(156*tmp12 + 742*tmp4 - 750*tmp8 - 169) + 1
    tmp67 = tmp50*(124*tmp12 + 694*tmp4 - 670*tmp8 - 161) + 1
    tmp78 = -1025435.0/659736.0*tmp0 + tmp77*(273*tmp12 + 602*tmp4 - 861*tmp8 - 106) + 1
    tmp86 = -476887.0/659736.0*tmp0 + tmp77*(133*tmp12 + 462*tmp4 - 581*tmp8 - 86) + 1
    tmp90 = -817991.0/3298680.0*tmp0 + tmp77*(49*tmp12 + 378*tmp4 - 413*tmp8 - 74) + 1
    tmp96 = tmp95*(1380*tmp12 + 4246*tmp4 - 4963*tmp8 - 906) + 1
    tmp100 = tmp95*(804*tmp12 + 3382*tmp4 - 3523*tmp8 - 762) + 1
    tmp102 = tmp95*(420*tmp12 + 2806*tmp4 - 2563*tmp8 - 666) + 1
    tmp104 = tmp64*(tmp60 + 25)
    tmp105 = tmp95*(228*tmp12 + 2518*tmp4 - 2083*tmp8 - 618) + 1
    tmp108 = tmp107*(tmp68 + 16)*(tmp68 + 25)
    tmp110 = -410833.0/709800.0*tmp0 + tmp109*(-850*tmp4 + 176*tmp8 + 375) + 1
    tmp119 = -31877.0/304200.0*tmp0 + tmp109*(-626*tmp4 + 8*tmp8 + 319) + 1
    tmp128 = tmp127*(-217959*tmp12 + 41076*tmp121 - 131805*tmp4 + 298872*tmp8 + 17756) + 1
    tmp130 = tmp127*(-190239*tmp12 + 32760*tmp121 - 123489*tmp4 + 273924*tmp8 + 16832) + 1
    tmp133 = tmp132*(-207550*tmp12 + 38920*tmp121 - 154099*tmp4 + 309498*tmp8 + 23478) + 1
    tmp136 = tmp132*(-149950*tmp12 + 24520*tmp121 - 131059*tmp4 + 249018*tmp8 + 20598) + 1
    tmp138 = tmp132*(-138430*tmp12 + 21640*tmp121 - 126451*tmp4 + 236922*tmp8 + 20022) + 1
    tmp140 = tmp139*(-53445*tmp12 + 12243*tmp121 - 26778*tmp4 + 64659*tmp8 + 3482) + 1
    tmp144 = tmp139*(-28965*tmp12 + 4899*tmp121 - 19434*tmp4 + 42627*tmp8 + 2666) + 1
    tmp145 = tmp139*(-22845*tmp12 + 3063*tmp121 - 17598*tmp4 + 37119*tmp8 + 2462) + 1
    tmp151 = tmp150 - 1
    tmp225 = (1.0/(tmp224 - 3))
    tmp241 = tmp199*(3.0/4.0 - tmp150)
    tmp242 = tmp192*(9.0/4.0 - tmp224)
    tmp34 = tmp27*tmp33
    tmp66 = tmp27*tmp64*(tmp60 + 25)*(tmp60 + 36)
    tmp75 = tmp27*tmp73*(tmp68 + 9)*(tmp68 + 16)
    tmp82 = tmp33*tmp81
    tmp115 = tmp113*((1.0/2.0)*tmp28*tmp29 - 1.0/2.0*tmp32 - 5.0e-15)
    tmp152 = (1.0/(tmp151))
    tmp166 = -1/(tmp164 - 1)
    tmp171 = (1.0/(tmp164 - 1))
    tmp173 = tmp113*((1.0/2.0)*tmp30 + (1.0/2.0)*tmp32 - 5.0e-15)
    EulerGamma = 0.57721566490153286
    tmp202 = np.power(Omega, 7.0/3.0)*(tmp157*tmp192*(tmp164 + 1) + tmp157*((50140.0/3969.0)*tmp4 + (97865.0/63504.0)*tmp8 + 18733.0/15876.0) + tmp158*((50803.0/63504.0)*tmp12 + (74749.0/5292.0)*tmp4 - 245717.0/63504.0*tmp8 + 18733.0/15876.0) + tmp198*(tmp4 + 1.0/3.0) + tmp199*tmp30*(1.0/3.0 - 4.0/3.0*tmp4) + tmp201*(-tmp151 - 4*tmp8)) + Omega*(-0.33333333333333331*chi1 - 0.33333333333333331*chi2 + 0.66666666666666663*m1*m2*tmp158*tmp3 - 0.66666666666666663*tmp157) + tmp0*(tmp190*(1.0/2.0 - tmp164) + tmp195 - 33025.0/21168.0*tmp4 + (19583.0/42336.0)*tmp8 - 20555.0/10584.0) + tmp13*((55.0/84.0)*tmp4 - 43.0/42.0) + tmp178*((9202.0/2205.0)*tmp149 - 387216563023.0/160190110080.0 + (9202.0/2205.0)*EulerGamma) + tmp184*((439877.0/55566.0)*tmp149 - 16094530514677.0/533967033600.0 + (439877.0/55566.0)*EulerGamma) + tmp185*(tmp157*(-19.0/42.0*tmp4 - 34.0/21.0) + tmp158*((49.0/18.0)*tmp4 + (209.0/126.0)*tmp8 - 34.0/21.0)) + tmp21*((10620745.0/39118464.0)*tmp12 - 428.0/105.0*tmp149 + tmp190*(-457.0/504.0*tmp4 - 27.0/14.0*tmp8 + 89.0/252.0) + tmp192*(-1817.0/504.0*tmp4 + (10.0/9.0)*tmp8 + 89.0/252.0) + tmp193*tmp30*(89.0/126.0 - 781.0/252.0*tmp4) + (41.0/192.0)*tmp197*tmp4 - 48993925.0/9779616.0*tmp4 - 6292061.0/3259872.0*tmp8 - 428.0/105.0*EulerGamma + 1556919113.0/122245200.0) + tmp4*(21.199999999999999*tmp178 - 411*tmp184) + 1
    tmp38 = tmp34*tmp37*(tmp24 + 25)
    tmp57 = tmp34*tmp56*(tmp54 + 36)
    tmp76 = tmp75*(tmp68 + 25)*(tmp68 + 36)
    tmp97 = np.power(Omega, 15)*tmp52*tmp82
    tmp116 = ((-tmp111*tmp7 + tmp112*tmp7 - 1.0/2.0*tmp115)*(-tmp111*tmp7 + tmp112*tmp7 - 1.0/2.0*tmp115))/np.power(Omega_circ, 20.0/3.0)
    EulerGamma = 0.57721566490153286
    tmp172 = -7775491.0/21141120.0*tmp0 + tmp13*tmp171*(-1385.0/528.0*tmp4 + (6.0/11.0)*tmp8 + 301.0/264.0) + tmp21*(-1571.0/6930.0*tmp170 - 1571.0/6930.0*EulerGamma + 1227423222031.0/1758095539200.0) + 1
    tmp174 = (1.0/(tmp115 + tmp173*tmp30))
    tmp181 = ((-tmp115 + tmp3*tmp5 - tmp3*tmp6)*(-tmp115 + tmp3*tmp5 - tmp3*tmp6))/((Omega_circ)*(Omega_circ)*(Omega_circ)*(Omega_circ))
    tmp187 = (1.0/((tmp151)*(tmp151)))
    EulerGamma = 0.57721566490153286
    tmp204 = -6894273.0/7047040.0*tmp0 + tmp13*tmp166*((547.0/176.0)*m1*m2*tmp3 - 10.0/11.0*tmp8 - 111.0/88.0) + tmp178*((174381.0/67760.0)*tmp203 - 2465107182496333.0/460490801971200.0 + (174381.0/67760.0)*EulerGamma) + tmp21*(-1571.0/770.0*tmp203 - 1571.0/770.0*EulerGamma + 1664224207351.0/195343948800.0) + tmp4*(-327.0/500.0*tmp0 + (37.0/2.0)*tmp178 - 369.0/100.0*tmp21) + 1
    tmp212 = -1/tmp151
    tmp213 = -1/((tmp151)*(tmp151)*(tmp151))
    tmp219 = tmp171*tmp4
    tmp220 = tmp171*tmp8
    tmp49 = tmp34*tmp45*tmp48*(tmp40 + 16)
    tmp89 = tmp37*tmp82*(tmp24 + 25)*(tmp24 + 36)
    tmp93 = tmp45*tmp82*(tmp40 + 16)
    tmp117 = np.power(Omega, 11)*tmp116
    EulerGamma = 0.57721566490153286
    tmp160 = Omega*tmp152*(tmp157*(2.0/3.0 - 7.0/5.0*tmp4) + tmp158*(-59.0/15.0*tmp4 + (26.0/5.0)*tmp8 + 2.0/3.0)) + tmp0*((4108813.0/4404400.0)*m1*m2*tmp3 - 3628549.0/377520.0*tmp12 - 1204847.0/1006720.0*tmp121 + (21506941.0/5662800.0)*tmp5*tmp6*tmp7 - 3190529.0/8808800.0)/((tmp151)*(tmp151)) + tmp13*tmp152*(-353.0/132.0*tmp4 + (19.0/88.0)*tmp8 + 191.0/220.0) + tmp21*(-3142.0/3465.0*tmp149 - 3142.0/3465.0*EulerGamma + 848238724511.0/219761942400.0) + 1
    tmp169 = tmp147*tmp166*tmp168
    tmp175 = tmp156*tmp174
    tmp177 = np.power(Omega, 35.0/3.0)*tmp116
    tmp182 = np.power(Omega, 7)*tmp181*tmp81
    tmp189 = tmp158*tmp187
    EulerGamma = 0.57721566490153286
    tmp221 = -3353747.0/2129400.0*tmp0 + tmp13*((487.0/390.0)*tmp171 - 649.0/195.0*tmp219 + (256.0/195.0)*tmp220) + tmp178*((376451.0/83655.0)*tmp218 - 1213641959949291437.0/118143853747920000.0 + (376451.0/83655.0)*EulerGamma) + tmp184*((2592446431.0/456756300.0)*tmp218 - 150082616449726042201261.0/4837990810977324000000.0 + (2592446431.0/456756300.0)*EulerGamma) + tmp21*(-1546.0/429.0*tmp218 - 1546.0/429.0*EulerGamma + 190606537999247.0/11957879934000.0) + tmp4*(-261.0/100.0*tmp0 - 357.0/10.0*tmp178 + (5.0/4.0)*tmp21) + 1
    tmp222 = 30*m1*m2*tmp171*tmp3 - 5*tmp171 - 40*tmp220
    tmp94 = tmp48*tmp93*(tmp40 + 36)
    tmp176 = tmp169*(tmp158 - tmp175)
    tmp180 = Omega*(tmp158*((13.0/2.0)*tmp4 - 2) + tmp175*((11.0/2.0)*tmp4 - 2))
    EulerGamma = 0.57721566490153286
    tmp196 = Omega*tmp152*(tmp157*(2.0/3.0 - 13.0/5.0*tmp4) + tmp158*(-41.0/15.0*tmp4 + (14.0/5.0)*tmp8 + 2.0/3.0)) + tmp0*(-801565.0/37752.0*tmp12*tmp187 + (3976393.0/1006720.0)*tmp121*tmp187 - tmp164*tmp190 + (32485357.0/4404400.0)*tmp187*tmp4 - 1401149.0/1415700.0*tmp187*tmp8 - 14210377.0/8808800.0*tmp187 + (1.0/2.0)*tmp190 + tmp195) + tmp13*tmp152*(-587.0/132.0*tmp4 + (175.0/88.0)*tmp8 + 269.0/220.0) + tmp178*((845198.0/190575.0)*tmp183 - 172066910136202271.0/19426955708160000.0 + (845198.0/190575.0)*EulerGamma) + tmp184*((22324502267.0/3815311500.0)*tmp183 - 17154485653213713419357.0/568432724020761600000.0 + (22324502267.0/3815311500.0)*EulerGamma) + tmp185*(tmp157*tmp187*((597.0/440.0)*tmp12 + (10679.0/1650.0)*tmp4 - 1933.0/220.0*tmp8 - 69.0/55.0) + tmp189*((8539.0/440.0)*tmp12 + (591.0/44.0)*tmp121 + (16571.0/1650.0)*tmp4 - 2673.0/100.0*tmp8 - 69.0/55.0)) + tmp21*(-12568.0/3465.0*tmp183 - 12568.0/3465.0*EulerGamma + 16600939332793.0/1098809712000.0) + tmp4*((78.0/5.0)*tmp178 - 216*tmp184 - 89.0/25.0*tmp21) + 1
    tmp210 = tmp158*tmp175
    EulerGamma = 0.57721566490153286
    tmp217 = Omega*((320.0/81.0)*tmp12*tmp198*tmp213 + tmp157*tmp212*((13.0/9.0)*tmp4 + 2.0/9.0) + tmp189*((607.0/81.0)*tmp12 - 1478.0/405.0*tmp4 + (503.0/81.0)*tmp8 + 2.0/9.0)) + tmp0*(tmp157*tmp189*(-88.0/27.0*tmp4 - 50.0/27.0*tmp8 + 2.0/3.0) + tmp187*((1610009.0/320760.0)*m1*m2*tmp3 + (77141.0/40095.0)*tmp111*tmp112*tmp120 - 508474.0/40095.0*tmp12 - 945121.0/320760.0*tmp8 - 180566.0/200475.0) + tmp190*tmp212*(-tmp150 + 4*tmp8 + 1.0/3.0) + tmp192*tmp213*(-1997.0/243.0*tmp12 - 2452.0/243.0*tmp121 - 43.0/27.0*tmp4 + (1435.0/243.0)*tmp5*tmp6*tmp7 + 1.0/3.0)) + tmp13*(-16.0/9.0*tmp187*tmp192*tmp8 + tmp212*((223.0/54.0)*m1*m2*tmp3 - 32.0/27.0*tmp8 - 164.0/135.0)) + 4*tmp147*tmp158*tmp4/(3 - 9*tmp4) + tmp178*((17056.0/8505.0)*tmp149 - 10607269449358.0/3072140846775.0 + (17056.0/8505.0)*EulerGamma) + tmp184*((18778864.0/12629925.0)*tmp149 - 1312549797426453052.0/176264081083715625.0 + (18778864.0/12629925.0)*EulerGamma) + tmp185*(tmp157*tmp187*((889673.0/106920.0)*tmp12 + (376177.0/35640.0)*tmp4 - 75737.0/5346.0*tmp8 - 2788.0/1215.0) + tmp157*tmp192*tmp213*((608.0/81.0)*tmp12 - 16.0/9.0*tmp4 + (736.0/81.0)*tmp8) + tmp158*tmp213*((20471053.0/962280.0)*m1*m2*tmp3 + (101706029.0/962280.0)*tmp10*tmp11*tmp9 - 40204523.0/962280.0*tmp121 - 1184225.0/96228.0*tmp216 - 14103833.0/192456.0*tmp8 - 2788.0/1215.0) + tmp187*tmp201*(-32.0/3.0*tmp12 - 8.0/9.0*tmp4 + 8*tmp5*tmp6*tmp7) + tmp198*(-40232.0/2187.0*tmp12 + (43528.0/2187.0)*tmp121 + (96176.0/2187.0)*tmp216 - 8.0/9.0*tmp4 + (376.0/81.0)*tmp8)/((tmp151)*(tmp151)*(tmp151)*(tmp151))) + tmp21*(-104.0/63.0*tmp149 - 104.0/63.0*EulerGamma + 5849948554.0/940355325.0) + tmp4*(-13.0/2.0*tmp178 + 98*tmp184 + (333.0/1000.0)*tmp21) + 1
    tmp211 = Omega*tmp166*(tmp158*(-667.0/44.0*tmp4 - 529.0/132.0*tmp8) + tmp175*tmp205) + tmp0*tmp166*(tmp190*(-37.0/3.0*tmp4 + 12*tmp8 + 3.0/2.0) + tmp192*((1.0/3.0)*tmp4 + (35.0/6.0)*tmp8 + 3.0/2.0) + tmp207*tmp210) + tmp147*tmp166*((5.0/2.0)*m1*m2*tmp158*tmp3 - tmp168*tmp175)
    tmp227 = Omega*(tmp158*(-10*tmp219 + 10*tmp220 + 10*tmp225) + tmp175*(-70*tmp225*tmp4 + 110*tmp225*tmp8 + 10*tmp225)) + tmp0*(tmp190*(15*m1*m2*tmp171*tmp3 - 20*tmp220 - 5/(4*tmp4 - 2)) + (5.0/2.0)*tmp192 + tmp210*tmp222)
    tmp234 = Omega*(tmp158*(tmp168 - 2) + tmp175*tmp228) + tmp0*(tmp190*(3.0/2.0 - tmp224) + (3.0/2.0)*tmp192 + tmp210*tmp229) + tmp185*(tmp158*((11.0/20.0)*tmp4 + (241.0/30.0)*tmp8 + 2.0/3.0) + tmp175*tmp230) + tmp21*(tmp190*((11.0/2.0)*m1*m2*tmp3 - 12*tmp8 - 7.0/4.0) + tmp192*(-27.0/2.0*tmp4 + 6*tmp5*tmp6*tmp7 - 7.0/4.0) + tmp210*tmp231)
    tmp244 = Omega*(tmp158*((79.0/84.0)*tmp4 + 61.0/12.0) + tmp175*tmp238) + tmp0*(tmp190*(-tmp164 - 3) + tmp192*((1.0/2.0)*tmp4 - 3) + tmp210*tmp239) + tmp147*(-3.0/4.0*chi1 - 3.0/4.0*chi2 - 3.0/2.0*tmp175) + tmp185*(tmp158*((1709.0/1008.0)*tmp4 + (613.0/1008.0)*tmp8 - 81.0/16.0) + tmp174*tmp241 + tmp174*tmp243 + tmp175*tmp242 + (3.0/4.0)*tmp198 + tmp201*(9.0/4.0 - tmp150)) + tmp21*(tmp190*(-9287.0/1008.0*tmp4 + (5.0/7.0)*tmp8 + 4163.0/252.0) + tmp192*(-2633.0/1008.0*tmp4 + (139.0/72.0)*tmp8 + 4163.0/252.0) + tmp210*tmp240)
    flux = -1.0/8.0*Omega*((959412031562833670717182083.0/13351440429687500000000000000.0)*np.power(Omega, 29.0/3.0)*tmp163*np.power(tmp217, 6)*tmp34*tmp45 + (477464829275686064616544614241.0/1054687500000000000000000000000.0)*np.power(Omega, 23.0/3.0)*tmp181*tmp27*tmp73*((tmp115*(tmp13*tmp156*tmp238 + tmp147*(-3.0/4.0*chi1 + (3.0/4.0)*chi2) + tmp158*tmp206*tmp239 + tmp185*(tmp156*tmp242 + tmp241 + tmp243) + tmp193*tmp21*tmp240) + tmp173*((tmp235)*(tmp235)) + tmp173*tmp244)*(tmp115*(tmp13*tmp156*tmp238 + tmp147*(-3.0/4.0*chi1 + (3.0/4.0)*chi2) + tmp158*tmp206*tmp239 + tmp185*(tmp156*tmp242 + tmp241 + tmp243) + tmp193*tmp21*tmp240) + tmp173*((tmp235)*(tmp235)) + tmp173*tmp244)) + (77712374556589527328091748723.0/9536743164062500000000000000.0)*((Omega)*(Omega)*(Omega)*(Omega)*(Omega))*((tmp202)*(tmp202)*(tmp202)*(tmp202))*tmp45*tmp82*((m1*tmp29 + m2*tmp29)*(m1*tmp29 + m2*tmp29))/np.power(Omega_circ, 8.0/3.0) + (7632465358236471041440756081.0/70685030287872000000000000000000000.0)*np.power(tmp100, 14)*tmp56*tmp97*(tmp54 + 36)*(tmp54 + 49) + (80304665090860966618505674788201.0/5370099109375000000000000000000000000000000.0)*np.power(tmp102, 14)*tmp104*tmp97*(tmp60 + 36)*(tmp60 + 49) + (1395913190715212935181279944410009.0/84700000000000000000000000000000000000.0)*tmp104*np.power(tmp110, 10)*tmp117*tmp82 + (63748432253452348706521541130361.0/594560591830283203125000000000000000000000000000000.0)*np.power(tmp105, 14)*tmp108*tmp97*(tmp68 + 36)*(tmp68 + 49) + (290126198344600777323475443001.0/1291992187500000000000000000000000.0)*tmp107*tmp182*((Omega*tmp115*(-5.0/16.0*chi1 + (5.0/16.0)*chi2) + tmp173*((tmp179)*(tmp179)*(tmp179)) + tmp173*tmp180)*(Omega*tmp115*(-5.0/16.0*chi1 + (5.0/16.0)*chi2) + tmp173*((tmp179)*(tmp179)*(tmp179)) + tmp173*tmp180)) + (64112709009186366516744544133641.0/7235894531250000000000000000000000000000000.0)*tmp108*tmp117*np.power(tmp119, 10)*tmp82 + (635828519099369067424585494127.0/6998400000000000000000000000000.0)*tmp117*tmp56*tmp81*((tmp115*(tmp0*tmp193*tmp222 + tmp206*((10.0/3.0)*tmp171 - 70.0/3.0*tmp219 + (110.0/3.0)*tmp220)) + tmp173*((tmp221)*(tmp221)*(tmp221)*(tmp221)*(tmp221)) + tmp173*tmp227)*(tmp115*(tmp0*tmp193*tmp222 + tmp206*((10.0/3.0)*tmp171 - 70.0/3.0*tmp219 + (110.0/3.0)*tmp220)) + tmp173*((tmp221)*(tmp221)*(tmp221)*(tmp221)*(tmp221)) + tmp173*tmp227)) + (6666197686272648743149580252067.0/1712404052734375000000000000000000000.0)*np.power(tmp122, 14)*tmp126*tmp34*tmp84*(tmp83 + 49) + (12729286952369368445651715480361.0/2326774986643285956233739852905273437500.0)*tmp126*np.power(tmp128, 14)*tmp38*(tmp24 + 36)*(tmp24 + 49) + (4143648096474399341626802965321.0/87362644831833243370056152343750000000000000.0)*tmp126*np.power(tmp130, 14)*tmp49*(tmp40 + 36)*(tmp40 + 49) + (1059891263751551363546942226424840276151521.0/8313589311885000000000000000000000000000000000000.0)*np.power(tmp133, 16)*tmp134*tmp34*tmp99*(tmp98 + 64) + (448968550484498296555338593.0/1503307474922373120000000000000000000.0)*tmp134*np.power(tmp135, 16)*tmp57*(tmp54 + 49)*(tmp54 + 64) + (8922740565651218513167297198689.0/424921296800000000000000000000000000000000000.0)*tmp134*np.power(tmp136, 16)*tmp33*tmp66*(tmp60 + 49)*(tmp60 + 64) + (63748432253452348706521541130361.0/3326821322972647500000000000000000000000000000000000000.0)*tmp134*np.power(tmp138, 16)*tmp33*tmp76*(tmp68 + 49)*(tmp68 + 64) + (870537749976894817763112040803074048.0/426739481684942657011561095714569091796875.0)*np.power(tmp140, 16)*tmp142*tmp82*(tmp141 + 1)*(tmp141 + 4)*(tmp141 + 9)*(tmp141 + 16)*(tmp141 + 25)*(tmp141 + 36)*(tmp141 + 49)*(tmp141 + 64)/(1 - np.exp(-32*tmp36)) + (69721657441386791987771542605413907.0/15155846119232177734375000000000000000000000.0)*tmp142*np.power(tmp143, 16)*tmp82*tmp84*(tmp83 + 49)*(tmp83 + 64) + (5651416571920869579318348721.0/3371768744177324697375297546386718750000.0)*tmp142*np.power(tmp144, 16)*tmp89*(tmp24 + 49)*(tmp24 + 64) + (7018886249798228774293767649.0/2415078583220214843750000000000000000000000000.0)*tmp142*np.power(tmp145, 16)*tmp94*(tmp40 + 49)*(tmp40 + 64) + (31084949822635821896125896262921.0/436047363281250000000000000000000000.0)*tmp146*np.power(tmp160, 8)*tmp163*tmp93 + (4895879597065138998508197857569.0/19162237644195556640625000000000.0)*tmp146*tmp162*np.power(tmp196, 8)*tmp37*tmp82 + (4895879597065138998508197857569.0/3528760280460119247436523437500000.0)*np.power(tmp15, 10)*tmp20*tmp38 + (1057509992966070739262184940900563.0/19140625000000000000000000000000000.0)*tmp177*tmp27*tmp64*((tmp115*(tmp0*tmp166*tmp193*tmp207 - tmp156*tmp169 + tmp166*tmp205*tmp206) + tmp173*((tmp204)*(tmp204)*(tmp204)*(tmp204)) + tmp173*tmp211)*(tmp115*(tmp0*tmp166*tmp193*tmp207 - tmp156*tmp169 + tmp166*tmp205*tmp206) + tmp173*((tmp204)*(tmp204)*(tmp204)*(tmp204)) + tmp173*tmp211)) + (290126198344600777323475443001.0/723515625000000000000000000000000000.0)*tmp177*tmp75*((-tmp115*tmp156*tmp169 + ((tmp172)*(tmp172)*(tmp172)*(tmp172))*tmp173 + tmp173*tmp176)*(-tmp115*tmp156*tmp169 + ((tmp172)*(tmp172)*(tmp172)*(tmp172))*tmp173 + tmp173*tmp176)) + (352503330988690246420728313633521.0/47851562500000000000000000000000.0)*tmp182*tmp63*((tmp115*(tmp0*tmp193*tmp229 + tmp156*tmp185*tmp230 + tmp193*tmp21*tmp231 + tmp206*tmp228) + tmp173*((tmp233)*(tmp233)*(tmp233)) + tmp173*tmp234)*(tmp115*(tmp0*tmp193*tmp229 + tmp156*tmp185*tmp230 + tmp193*tmp21*tmp231 + tmp206*tmp228) + tmp173*((tmp233)*(tmp233)*(tmp233)) + tmp173*tmp234)) + (31084949822635821896125896262921.0/137655258178710937500000000000000000000.0)*tmp20*np.power(tmp39, 10)*tmp49 + (4187739572145638805543839833230027.0/74186612500000000000000000000000000000000.0)*tmp33*tmp53*np.power(tmp58, 12)*tmp66 + (64112709009186366516744544133641.0/14667339112207031250000000000000000000000000000.0)*tmp33*tmp53*np.power(tmp67, 12)*tmp76 + (90832645585624152489226499161.0/1031704128000000000000000000000000.0)*np.power(tmp51, 12)*tmp53*tmp57 + (1728273474218834859335076361647.0/1248107910156250000000000000000000.0)*np.power(tmp78, 12)*tmp79*tmp82*tmp84 + (12729286952369368445651715480361.0/7379961031547281891107559204101562500.0)*tmp79*np.power(tmp86, 12)*tmp89 + (4143648096474399341626802965321.0/94463501203805208206176757812500000000000.0)*tmp79*np.power(tmp90, 12)*tmp94 + (21630433954113293133611065845404903594929.0/353757715136718750000000000000000000000000000.0)*np.power(tmp96, 14)*tmp97*tmp99)/np.pi
    fspin21 = tmp244
    fspin33 = tmp234
    fspin31 = tmp180
    fspin43 = tmp211
    fspin41 = tmp176
    fspin55 = tmp227
    rho21 = tmp235
    rho22 = tmp202
    rho31 = tmp179
    rho32 = tmp217
    rho33 = tmp233
    rho41 = tmp172
    rho42 = tmp160
    rho43 = tmp204
    rho44 = tmp196
    rho51 = tmp119
    rho52 = tmp39
    rho53 = tmp110
    rho54 = tmp15
    rho55 = tmp221
    rho61 = tmp67
    rho62 = tmp90
    rho63 = tmp58
    rho64 = tmp86
    rho65 = tmp51
    rho66 = tmp78
    rho71 = tmp105
    rho72 = tmp130
    rho73 = tmp102
    rho74 = tmp128
    rho75 = tmp100
    rho76 = tmp122
    rho77 = tmp96
    rho81 = tmp138
    rho82 = tmp145
    rho83 = tmp136
    rho84 = tmp144
    rho85 = tmp135
    rho86 = tmp143
    rho87 = tmp133
    rho88 = tmp140
    source_even = tmp80
    source_odd = pphi*tmp147
    T22 = np.sqrt(2)*np.sqrt(np.pi)*np.sqrt(Hreal*Omega*tmp42)*np.sqrt(tmp40 + 1)*np.sqrt(tmp40 + 4)
    return flux , fspin21, fspin31, fspin33, fspin43, fspin41, fspin55, rho21, rho22, rho31, rho32, rho33, rho41, rho42, rho43, rho44, rho51, rho52, rho53, rho54, rho55, rho61, rho62, rho63, rho64, rho65, rho66, rho71, rho72, rho73, rho74, rho75, rho76, rho77, rho81, rho82, rho83, rho84, rho85, rho86, rho87, rho88, source_even, source_odd, T22