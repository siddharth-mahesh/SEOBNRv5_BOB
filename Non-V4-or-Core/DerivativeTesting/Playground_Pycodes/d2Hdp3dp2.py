from __future__ import division
import numpy as np
def compute_d2Hdp3dp2(m1, m2, eta, x, y, z, p1, p2, p3, S1x, S1y, S1z, S2x, S2y, S2z, KK, k0, k1, dSO, dSS, tortoise, EMgamma):
    M = m1+m2
    mu = m1*m2/M
    eta = mu/M
    r = np.sqrt(x*x+y*y+z*z)
    u = 1/r
    sigmastar3 = m2/m1*S1z+m1/m2*S2z
    sigmastar2 = m2/m1*S1y+m1/m2*S2y
    sigmastar1 = m2/m1*S1x+m1/m2*S2x
    sigma3 = S1z+S2z
    sigma2 = S1y+S2y
    sigma1 = S1x+S2x
    Skerr3 = sigma3
    Skerr2 = sigma2
    Skerr1 = sigma1
    Skerrmag = np.sqrt(Skerr1*Skerr1+Skerr2*Skerr2+Skerr3*Skerr3)
    Skerrhat3 = Skerr3/Skerrmag
    Skerrhat2 = Skerr2/Skerrmag
    Skerrhat1 = Skerr1/Skerrmag
    a = Skerrmag
    n3 = z/r
    n2 = y/r
    n1 = x/r
    e33 = Skerrhat3
    e32 = Skerrhat2
    e31 = Skerrhat1
    xi3 = e31*n2-e32*n1
    xi2 = -e31*n3+e33*n1
    xi1 = e32*n3-e33*n2
    v3 = n1*xi2-n2*xi1
    v2 = n3*xi1-n1*xi3
    v1 = n2*xi3-n3*xi2
    costheta = e31*n1+e32*n2+e33*n3
    sin2theta = 1-costheta*costheta
    xisq = sin2theta
    w2 = a*a+r*r
    Sigma = r*r+a*a*costheta*costheta
    Dinv = 1+np.log(1+6*eta*u*u+2*(26-3*eta)*eta*u*u*u)
    omegatilde = 2*a*r
    K = 1.712-1.803949138004582*eta-39.77229225266885*eta*eta+103.16588921239249*eta*eta*eta
    etaKminus1 = eta*K-1
    Delta0 = K*(eta*K-2)
    Delta1 = -2*etaKminus1*(K+Delta0)
    Delta2 = np.true_divide(1,2)*Delta1*(Delta1-4*etaKminus1)-a*a*etaKminus1*etaKminus1*Delta0
    Delta3 = -np.true_divide(1,3)*Delta1*Delta1*Delta1+etaKminus1*Delta1*Delta1+Delta2*Delta1-2*etaKminus1*(Delta2-etaKminus1)-a*a*etaKminus1*etaKminus1*Delta1
    Delta4 = np.true_divide(1,12)*(6*a*a*(Delta1*Delta1-2*Delta2)*etaKminus1*etaKminus1+3*Delta1*Delta1*Delta1*Delta1-8*etaKminus1*Delta1*Delta1*Delta1-12*Delta2*Delta1*Delta1+12*(2*etaKminus1*Delta2+Delta3)*Delta1+12*(np.true_divide(94,3)-np.true_divide(41,32)*np.pi*np.pi)*etaKminus1*etaKminus1+6*(Delta2*Delta2-4*Delta3*etaKminus1))
    Delta5 = etaKminus1*etaKminus1*((np.true_divide(-4237,60)+np.true_divide(128,5)*EMgamma+np.true_divide(2275,512)*np.pi*np.pi-np.true_divide(1,3)*a*a*(Delta1*Delta1*Delta1-3*Delta1*Delta2+3*Delta3)-(Delta1*Delta1*Delta1*Delta1*Delta1-5*Delta1*Delta1*Delta1*Delta2+5*Delta1*Delta2*Delta2+5*Delta1*Delta1*Delta3-5*Delta2*Delta3-5*Delta1*Delta4)/(5*etaKminus1*etaKminus1)+(Delta1*Delta1*Delta1*Delta1-4*Delta1*Delta1*Delta2+2*Delta2*Delta2+4*Delta1*Delta3-4*Delta4)/(2*etaKminus1)+np.true_divide(256,5)*np.log(2)))
    Delta5l = etaKminus1*etaKminus1*np.true_divide(64,5)
    logarg = u*(Delta1+u*(Delta2+u*(Delta3+u*(Delta4+u*(Delta5+Delta5l*np.log(u))))))
    Deltaucalib = 1+eta*(Delta0+np.log(1+logarg))
    Deltaucalibprime = -eta*u*u*(Delta1+u*(2*Delta2+u*(3*Delta3+u*(4*Delta4+u*(5*(Delta5+Delta5l*np.log(u)))))))/(1+logarg)
    Deltaubar = a*a*u*u+(2*u+1/etaKminus1)/etaKminus1
    Deltaubarprime = -2*a*a*u*u*u-2*u*u/(etaKminus1)
    Deltau = Deltaubar*Deltaucalib
    Deltauprime = Deltaubarprime*Deltaucalib+Deltaubar*Deltaucalibprime
    Deltatprime = 2*r*Deltau+r*r*Deltauprime
    Deltat = r*r*Deltau
    Deltar = Deltat*Dinv
    Lambt = w2*w2-a*a*Deltat*sin2theta
    csi = np.sqrt(Deltar*Deltat)/w2
    csi1 = 1+(1-abs(1-tortoise))*(csi-1)
    csi2 = 1+(np.true_divide(1,2)-np.true_divide(1,2)*np.sign(np.true_divide(3,2)-tortoise))*(csi-1)
    prT = csi2*(p1*n1+p2*n2+p3*n3)
    phat3 = p3+prT*(1-1/csi1)*n3
    phat2 = p2+prT*(1-1/csi1)*n2
    phat1 = p1+prT*(1-1/csi1)*n1
    pdotxir = (phat1*xi1+phat2*xi2+phat3*xi3)*r
    pdotn = phat1*n1+phat2*n2+phat3*n3
    pdotvr = (phat1*v1+phat2*v2+phat3*v3)*r
    pphi = pdotxir
    Qcoeff2 = 1/(Sigma*sin2theta)
    Qcoeff1 = Sigma/(Lambt*sin2theta)
    DrSipn2 = Deltar*pdotn*pdotn/Sigma
    Q = 1+DrSipn2+Qcoeff1*pdotxir*pdotxir+Qcoeff2*pdotvr*pdotvr
    prT_p3 = csi2*n3
    phat3_p3 = n3*prT_p3*(1-1/csi1)+1
    phat2_p3 = n2*prT_p3*(1-1/csi1)
    phat1_p3 = n1*prT_p3*(1-1/csi1)
    pdotxir_p3 = r*(phat1_p3*xi1+phat2_p3*xi2+phat3_p3*xi3)
    pdotn_p3 = n1*phat1_p3+n2*phat2_p3+n3*phat3_p3
    pdotvr_p3 = r*(phat1_p3*v1+phat2_p3*v2+phat3_p3*v3)
    pphi_p3 = pdotxir_p3
    DrSipn2_p3 = 2*Deltar*pdotn*pdotn_p3/Sigma
    Q_p3 = DrSipn2_p3+2*Qcoeff1*pdotxir*pdotxir_p3+2*Qcoeff2*pdotvr*pdotvr_p3
    prTprm_p2 = csi2*n2
    phat3prm_p2 = n3*prTprm_p2*(1 - 1/csi1)
    phat2prm_p2 = n2*prTprm_p2*(1 - 1/csi1) + 1
    phat1prm_p2 = n1*prTprm_p2*(1 - 1/csi1)
    pdotxirprm_p2 = r*(phat1prm_p2*xi1 + phat2prm_p2*xi2 + phat3prm_p2*xi3)
    pdotnprm_p2 = n1*phat1prm_p2 + n2*phat2prm_p2 + n3*phat3prm_p2
    pdotvrprm_p2 = r*(phat1prm_p2*v1 + phat2prm_p2*v2 + phat3prm_p2*v3)
    pphiprm_p2 = pdotxirprm_p2
    DrSipn2prm_p2 = 2*Deltar*pdotn*pdotnprm_p2/Sigma
    Qprm_p2 = DrSipn2prm_p2 + 2*Qcoeff1*pdotxir*pdotxirprm_p2 + 2*Qcoeff2*pdotvr*pdotvrprm_p2
    DrSipn2_p3prm_p2 = 2*Deltar*pdotn_p3*pdotnprm_p2/Sigma
    Q_p3prm_p2 = DrSipn2_p3prm_p2 + 2*Qcoeff1*pdotxir_p3*pdotxirprm_p2 + 2*Qcoeff2*pdotvr_p3*pdotvrprm_p2
    Hreal_p3prm_p2 = Q_p3prm_p2
    return np.array([Hreal_p3prm_p2])