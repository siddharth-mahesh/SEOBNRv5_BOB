/* 
* Header file for sBOB waveform functions 
* Author: Siddharth Mahesh 
* Standard order of input for all functions is as follows: 
* time, QNM frequency, QNM damping time, reference frequency, peak strain 
* This module was generated using Nrpy+ 
*/
#include <stdio.h> 
 #include<math.h> 
 #include<stdlib.h> 
 #include<string.h>
#ifndef SBOB_FUNCS_H
#define SBOB_FUNCS_H
void get_sBOB_strainamplitude(const double t, double *strain_amplitude);
void get_sBOB_phase(const double t, double *phase);
#endif
/*
 * Output sBOB strain amplitude
 */
void get_sBOB_strainamplitude(const double t, double *strain_amplitude) {
#include "./set_Cparameters.h"

  /*
   *  Original SymPy expression:
   *  "*strain_amplitude = (Mf/2 + 1/2)**2/(4*Mf**2*sqrt(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*cosh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))))"
   */
  const double tmp_1 = 1 - af;
  const double tmp_2 = pow(tmp_1, 0.12920000000000001);
  const double tmp_3 = 1.5250999999999999 - 1.1568000000000001*tmp_2;
  const double tmp_4 = 1.4187000000000001*pow(tmp_1, -0.499) + 0.69999999999999996;
  const double tmp_6 = Mf/tmp_3;
  const double tmp_7 = tmp_3*(t + tmp_4*tmp_6*log(2*tmp_6*(0.097592999999999999 - 0.091933000000000001*af)/(((af)*(af)) - 2.4228000000000001*af + 1.4366000000000001)))/(Mf*tmp_4);
  const double tmp_8 = 0.16906095035683122*((1 - 0.75850763884335459*tmp_2)*(1 - 0.75850763884335459*tmp_2)*(1 - 0.75850763884335459*tmp_2)*(1 - 0.75850763884335459*tmp_2))/((Mf)*(Mf)*(Mf)*(Mf));
  const double tmp_9 = 1.3163592146527707e-6*((1 - 0.94200403717479742*af)*(1 - 0.94200403717479742*af)*(1 - 0.94200403717479742*af)*(1 - 0.94200403717479742*af))/((0.41274558362225522*((af)*(af)) - af + 0.59295030543173188)*(0.41274558362225522*((af)*(af)) - af + 0.59295030543173188)*(0.41274558362225522*((af)*(af)) - af + 0.59295030543173188)*(0.41274558362225522*((af)*(af)) - af + 0.59295030543173188));
  *strain_amplitude = (1.0/4.0)*(((1.0/2.0)*Mf + 1.0/2.0)*((1.0/2.0)*Mf + 1.0/2.0))/(((Mf)*(Mf))*sqrt(tmp_8 + tmp_9 + (tmp_8 - tmp_9)*tanh(tmp_7))*cosh(tmp_7));
}
/*
 * Output sBOB waveform phase
 */
void get_sBOB_phase(const double t, double *phase) {
#include "./set_Cparameters.h"

  /*
   *  Original SymPy expression:
   *  "*phase = -2*Mf*(0.097593 - 0.091933*af)*(1.4187*(1 - af)**(-0.499) + 0.7)*(-atan(0.64122556145172*(7.78629962669899e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)*(af**2 - 2.4228*af + 1.4366)/(0.097593 - 0.091933*af)) + atan((af**2 - 2.4228*af + 1.4366)*(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(0.097593 - 0.091933*af)))/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)) - Mf*(0.097593 - 0.091933*af)*(1.4187*(1 - af)**(-0.499) + 0.7)*log((1 - 0.64122556145172*(7.78629962669899e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)*(af**2 - 2.4228*af + 1.4366)/(0.097593 - 0.091933*af))*(1 + (af**2 - 2.4228*af + 1.4366)*(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(0.097593 - 0.091933*af))/((1 + 0.64122556145172*(7.78629962669899e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)*(af**2 - 2.4228*af + 1.4366)/(0.097593 - 0.091933*af))*(1 - (af**2 - 2.4228*af + 1.4366)*(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(0.097593 - 0.091933*af))))/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)) + 2*(0.354675*(1 - af)**(-0.499) + 0.175)*log((-1.28245112290344*Mf*(7.78629962669899e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(1.5251 - 1.1568*(1 - af)**0.1292) + 1)*(2*Mf*(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(1.5251 - 1.1568*(1 - af)**0.1292) + 1)/((1.28245112290344*Mf*(7.78629962669899e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(1.5251 - 1.1568*(1 - af)**0.1292) + 1)*(-2*Mf*(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(1.5251 - 1.1568*(1 - af)**0.1292) + 1))) + 2*(0.70935*(1 - af)**(-0.499) + 0.35)*(-atan(1.28245112290344*Mf*(7.78629962669899e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(1.5251 - 1.1568*(1 - af)**0.1292)) + atan(2*Mf*(1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + (-1.31635921465277e-6*(1 - 0.942004037174797*af)**4/(0.412745583622255*af**2 - af + 0.592950305431732)**4 + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)*tanh((1.5251 - 1.1568*(1 - af)**0.1292)*(Mf*(1.4187*(1 - af)**(-0.499) + 0.7)*log(2*Mf*(0.097593 - 0.091933*af)/((1.5251 - 1.1568*(1 - af)**0.1292)*(af**2 - 2.4228*af + 1.4366)))/(1.5251 - 1.1568*(1 - af)**0.1292) + t)/(Mf*(1.4187*(1 - af)**(-0.499) + 0.7))) + 0.169060950356831*(1 - 0.758507638843355*(1 - af)**0.1292)**4/Mf**4)**(1/4)/(1.5251 - 1.1568*(1 - af)**0.1292)))"
   */
  const double tmp_1 = 1 - af;
  const double tmp_2 = pow(tmp_1, -0.499);
  const double tmp_3 = pow(tmp_1, 0.12920000000000001);
  const double tmp_4 = ((1 - 0.75850763884335459*tmp_3)*(1 - 0.75850763884335459*tmp_3)*(1 - 0.75850763884335459*tmp_3)*(1 - 0.75850763884335459*tmp_3))/((Mf)*(Mf)*(Mf)*(Mf));
  const double tmp_6 = ((1 - 0.94200403717479742*af)*(1 - 0.94200403717479742*af)*(1 - 0.94200403717479742*af)*(1 - 0.94200403717479742*af))/((0.41274558362225522*((af)*(af)) - af + 0.59295030543173188)*(0.41274558362225522*((af)*(af)) - af + 0.59295030543173188)*(0.41274558362225522*((af)*(af)) - af + 0.59295030543173188)*(0.41274558362225522*((af)*(af)) - af + 0.59295030543173188));
  const double tmp_7 = pow(tmp_4 + 7.7862996266989856e-6*tmp_6, 1.0/4.0);
  const double tmp_8 = 1.5250999999999999 - 1.1568000000000001*tmp_3;
  const double tmp_9 = Mf/tmp_8;
  const double tmp_10 = 1.2824511229034399*tmp_7*tmp_9;
  const double tmp_11 = 0.16906095035683122*tmp_4;
  const double tmp_12 = 1.3163592146527707e-6*tmp_6;
  const double tmp_13 = 1.4187000000000001*tmp_2 + 0.69999999999999996;
  const double tmp_15 = ((af)*(af)) - 2.4228000000000001*af + 1.4366000000000001;
  const double tmp_16 = 0.097592999999999999 - 0.091933000000000001*af;
  const double tmp_17 = tmp_16/tmp_15;
  const double tmp_19 = pow(tmp_11 + tmp_12 + (tmp_11 - tmp_12)*tanh(tmp_8*(t + tmp_13*tmp_9*log(2*tmp_17*tmp_9))/(Mf*tmp_13)), 1.0/4.0);
  const double tmp_20 = 2*tmp_19*tmp_9;
  const double tmp_21 = tmp_15/tmp_16;
  const double tmp_22 = 0.64122556145171994*tmp_21*tmp_7;
  const double tmp_23 = tmp_19*tmp_21;
  const double tmp_24 = tmp_13*tmp_17*tmp_9;
  *phase = -2*tmp_24*(-atan(tmp_22) + atan(tmp_23)) - tmp_24*log((1 - tmp_22)*(tmp_23 + 1)/((1 - tmp_23)*(tmp_22 + 1))) + 2*(0.35467500000000002*tmp_2 + 0.17499999999999999)*log((1 - tmp_10)*(tmp_20 + 1)/((1 - tmp_20)*(tmp_10 + 1))) + 2*(0.70935000000000004*tmp_2 + 0.34999999999999998)*(-atan(tmp_10) + atan(tmp_20));
}
